
examples/PCSE/Proyecto/out/Proyecto.elf:     file format elf32-littlearm
examples/PCSE/Proyecto/out/Proyecto.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a002779

Program Header:
0x70000001 off    0x0000fac0 vaddr 0x1a007ac0 paddr 0x1a007ac0 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00000b6c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00007ac8 memsz 0x00007ac8 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a007ac8 align 2**15
         filesz 0x000008f4 memsz 0x000008f4 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ac0  1a000000  1a000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000008f4  10000000  1a007ac8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000108f4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000108f4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000108f4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000108f4  2**2
                  CONTENTS
  6 .bss          00000274  100008f8  100008f8  000008f8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000108f4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000108f4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000108f4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000108f4  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a007ac0  1a007ac0  0000fac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000108f4  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000108f4  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000108f4  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000108f4  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000108f4  2**2
                  CONTENTS
 17 .noinit       00000000  10000b6c  10000b6c  000108f4  2**2
                  CONTENTS
 18 .debug_info   00016e6d  00000000  00000000  000108f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003d58  00000000  00000000  00027761  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00008406  00000000  00000000  0002b4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000b98  00000000  00000000  000338bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a38  00000000  00000000  00034457  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000c40f  00000000  00000000  00034e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000101af  00000000  00000000  0004129e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001f1f0  00000000  00000000  0005144d  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0007063d  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000706ad  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000024b0  00000000  00000000  000706e4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100008f8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007ac0 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b6c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00117c l     F .text	000000b4 uartProcessIRQ
10000afc l     O .bss	00000004 rxIsrCallbackUART0
10000b00 l     O .bss	00000004 txIsrCallbackUART0
10000b04 l     O .bss	00000004 txIsrCallbackUART2
10000b08 l     O .bss	00000004 txIsrCallbackUART3
1a007764 l     O .text	00000048 lpcUarts
10000b0c l     O .bss	00000004 rxIsrCallbackUART2
10000b10 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 wifi_esp8266.c
1a000300 l     F .text	00000060 getResponse
100008f8 l     O .bss	0000004e esp8266Wifi
00000000 l    df *ABS*	00000000 lcd.c
10000948 l     O .bss	00000005 lcd
00000000 l    df *ABS*	00000000 main.c
10000950 l     O .bss	00000028 stringToGPRS
10000978 l     O .bss	00000014 stringToLCD
1000098c l     O .bss	0000012c stringToWIFI
00000000 l    df *ABS*	00000000 oneWireSensor.c
1a00094c l     F .text	00000020 oneWireSensorCheckCRC
1a00096c l     F .text	00000054 oneWireSensorWriteBit
1a0009c0 l     F .text	0000001c oneWireSensorWriteByte
1a0009dc l     F .text	00000050 oneWireSensorReset
1a000a2c l     F .text	0000004c oneWireSensorReadBit
1a000a78 l     F .text	0000001e oneWireSensorReadByte
10000ab8 l     O .bss	00000018 oneWireSensor
1a007578 l     O .text	00000030 operation
00000000 l    df *ABS*	00000000 gprs.c
1a000b78 l     F .text	0000005c getResponse
10000ad0 l     O .bss	00000010 gprs
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_convert.c
10000ae0 l     O .bss	00000014 result.10095
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000e34 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a00148c l     F .text	00000030 i2cHardwareInit
1a0014bc l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001524 l     F .text	00000002 errorOcurred
1a001528 l     F .text	00000002 doNothing
10000008 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a001720 l     F .text	00000040 Board_LED_Init
1a001760 l     F .text	0000003c Board_TEC_Init
1a00179c l     F .text	0000003c Board_GPIO_Init
1a0017d8 l     F .text	00000038 Board_SPI_Init
1a001810 l     F .text	00000024 Board_I2C_Init
1a001834 l     F .text	00000030 Board_ADC_Init
1a0077ac l     O .text	00000012 GpioPorts
1a0077c8 l     O .text	00000008 GpioButtons
1a0077d0 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 system.c
10000b14 l     O .bss	00000004 heap_end.10251
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0077dc l     O .text	0000000c InitClkStates
1a0077e8 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0019ac l     F .text	0000002c Chip_UART_GetIndex
1a007880 l     O .text	00000008 UART_BClock
1a007888 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001b50 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001b64 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001c28 l     F .text	000000a8 pll_calc_divs
1a001cd0 l     F .text	00000104 pll_get_frac
1a001dd4 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002040 l     F .text	00000022 Chip_Clock_GetDivRate
10000b18 l     O .bss	00000008 audio_usb_pll_freq
1a00789c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a007908 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000048 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0026c0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0026d4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a007950 l     O .text	00000010 zeroes.6916
1a007990 l     O .text	00000010 blanks.6915
00000000 l    df *ABS*	00000000 dtoa.c
1a004db8 l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 locale.c
100004ac l     O .data	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a0079c0 l     O .text	0000000c p05.5296
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 impure.c
10000080 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a007ac8 l       .ARM.exidx	00000000 __exidx_end
1a007ac8 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a007ac0 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a007ac0 l       .bss_RAM5	00000000 __init_array_end
1a007ac0 l       .bss_RAM5	00000000 __preinit_array_end
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a007ac0 l       .bss_RAM5	00000000 __init_array_start
1a007ac0 l       .bss_RAM5	00000000 __preinit_array_start
1a001e68 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002298 g     F .text	0000000e Chip_I2CM_Xfer
1a0072d8 g     F .text	00000012 .hidden __aeabi_dcmple
1a0037d0 g     F .text	000000ba strcpy
1a002c04 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a0015a8 g     F .text	00000040 TIMER2_IRQHandler
1a001260 g     F .text	00000014 uartRxRead
1a007214 g     F .text	0000007a .hidden __cmpdf2
1a0014f8 g     F .text	0000000e i2cInit
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a000acc g     F .text	00000078 oneWireSensorFillScratchpad
1a007214 g     F .text	0000007a .hidden __eqdf2
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a00305c g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a000d90 g     F .text	0000008c int64ToString
1a002b10 g     F .text	0000005a .hidden __floatdidf
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a001304 g     F .text	0000001c uartReadByte
1a00144c g     F .text	0000003e delayRead
10000af8 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a002498 g     F .text	00000122 handleMasterXferState
1a000000 g       *ABS*	00000000 __vectors_start__
1a001c08 g     F .text	0000000c Chip_ADC_SetResolution
1a006354 g     F .text	00000002 __malloc_unlock
1a00114c g     F .text	00000030 SysTick_Handler
1a001a2c g     F .text	00000040 Chip_UART_SetBaud
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a006d50 g     F .text	000000c6 memmove
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a006358 g     F .text	0000004c _Balloc
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a007204 g     F .text	0000008a .hidden __gtdf2
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
53ff50c6 g       *ABS*	00000000 __valid_user_code_checksum
1a0072a0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a0015e8 g     F .text	00000040 TIMER3_IRQHandler
1a0020cc g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000668 g     F .text	00000074 lcdSendByte
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a000754 g     F .text	00000014 lcdWriteString
1a0035b4 g     F .text	00000134 memcpy
1a007290 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a0038e8 g     F .text	000014cc _svfprintf_r
1a002aa0 g     F .text	00000022 .hidden __floatsidf
1a002644 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a00720c g     F .text	00000082 .hidden __ltdf2
1a002ba4 g     F .text	00000000 .hidden __aeabi_uldivmod
10000b6c g       .noinit	00000000 _noinit
1a00133c g     F .text	00000018 uartWriteString
10000b68 g     O .bss	00000004 SystemCoreClock
1a006944 g     F .text	0000005c __fpclassifyd
1a0019d8 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a0079d0 g     O .text	000000c8 __mprec_tens
1a000194  w    F .text	00000002 UsageFault_Handler
1a002148 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
10000b28 g     O .bss	00000004 __malloc_top_pad
10000b58 g     O .bss	00000008 tickCounter
1a001934 g     F .text	0000006c Board_SetupClocking
1a002a80 g     F .text	0000001e .hidden __aeabi_ui2d
1a005d90 g     F .text	00000008 _localeconv_r
1a0064d8 g     F .text	00000012 __i2b
1a002610 g     F .text	00000034 Chip_I2C_SetMasterEventHandler
1a0027fc g     F .text	00000000 .hidden __aeabi_drsub
1a0018c4 g     F .text	00000020 _sbrk_r
1a0077c4 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000bd4 g     F .text	0000003c gprsInit
1a0072c4 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001a8  w    F .text	00000002 GPIO1_IRQHandler
10000b24 g     O .bss	00000004 __malloc_max_sbrked_mem
1a002ac4 g     F .text	0000003a .hidden __extendsfdf2
1a002e8c g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a002808 g     F .text	00000276 .hidden __adddf3
1a001230 g     F .text	00000018 uartRxReady
1a000a98 g     F .text	00000034 oneWireSensorInit
1a002c38 g     F .text	00000254 .hidden __aeabi_dmul
1a0004bc g     F .text	000001ac wifiSendTCPIPData
1a0002fc g     O .text	00000004 CRP_WORD
1a006e18 g     F .text	000003ec _realloc_r
1a003564 g     F .text	00000050 __libc_init_array
1a0032f8 g     F .text	0000026a .hidden __udivdi3
1a007a98 g     O .text	00000028 __mprec_bigtens
1a000768 g     F .text	00000034 lcdSetPosXY
1a002a80 g     F .text	0000001e .hidden __floatunsidf
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a00676c g     F .text	00000046 __mcmp
1a001888 g     F .text	0000003c Board_Init
1a0027f8 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10000b6c g       .bss	00000000 _ebss
1a00152c g     F .text	0000003c TIMER0_IRQHandler
1a0010d0 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a0022a8 g     F .text	00000024 Chip_I2CM_XferBlocking
1a00643c g     F .text	00000040 __hi0bits
1a0025e0 g     F .text	00000030 Chip_I2C_SetClockRate
1a007314 g     F .text	0000004e .hidden __fixdfsi
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a001e1c g     F .text	0000004c Chip_Clock_EnableCrystal
1a000ccc g     F .text	000000a8 gprsGetSignal
1a002808 g     F .text	00000276 .hidden __aeabi_dadd
1a0001ac g     F .text	0000001a data_init
1a00720c g     F .text	00000082 .hidden __ledf2
1a006620 g     F .text	000000a0 __pow5mult
1a002b00 g     F .text	0000006a .hidden __aeabi_ul2d
1a001568 g     F .text	00000040 TIMER1_IRQHandler
1a0025bc g     F .text	00000024 Chip_I2C_Init
1a001354 g     F .text	0000000a UART2_IRQHandler
1a001fd8 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a00762c g     O .text	00000136 gpioPinsInit
1a001320 g     F .text	0000001a uartWriteByte
1a0026ec g     F .text	00000012 Chip_SSP_SetClockRate
1a000c10 g     F .text	000000bc gprsSendSMS
1a007300 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0001a8  w    F .text	00000002 GPIO2_IRQHandler
1a0062bc g     F .text	00000092 memchr
1a006ba0 g     F .text	000001b0 _free_r
1a0020a8 g     F .text	00000024 Chip_Clock_GetBaseClock
1a0072ec g     F .text	00000012 .hidden __aeabi_dcmpge
1a0006dc g     F .text	00000054 lcdInit
100008f8 g       .bss	00000000 _bss
1a001bd4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a002804 g     F .text	0000027a .hidden __aeabi_dsub
100008f0 g     O .data	00000004 __malloc_sbrk_base
1a00142c g     F .text	00000020 delayInit
1a002b00 g     F .text	0000006a .hidden __floatundidf
1a0066c0 g     F .text	000000aa __lshift
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a0069a0 g     F .text	00000104 __ssprint_r
1a002700 g     F .text	0000003e Chip_SSP_SetBitRate
1a002324 g     F .text	00000002 Chip_GPIO_Init
1a0077c0 g     O .text	00000004 OscRateIn
1a001288 g     F .text	0000007c uartInit
1a0064ec g     F .text	00000134 __multiply
10000b6c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
10000b2c g     O .bss	00000028 __malloc_current_mallinfo
1a006888 g     F .text	000000ba __d2b
1a00136c g     F .text	0000003e delayInaccurate
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a002aa0 g     F .text	00000022 .hidden __aeabi_i2d
1a000e60 g     F .text	0000019c gpioInit
1a002c34  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002e8c g     F .text	000001d0 .hidden __divdf3
100004e4 g     O .data	00000408 __malloc_av_
1a002c38 g     F .text	00000254 .hidden __muldf3
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a006350 g     F .text	00000002 __malloc_lock
1a002674 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a006aa4 g     F .text	0000005e _calloc_r
1a001e84 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0036e8 g     F .text	0000009a memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a0007b4 g     F .text	00000198 main
10000b20 g     O .bss	00000004 __malloc_max_total_mem
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000198  w    F .text	00000002 SVC_Handler
10000000 g     O .data	00000004 DWT_CTRL
1a004ee8 g     F .text	00000ea2 _dtoa_r
1a005d98 g     F .text	00000524 _malloc_r
1a002b10 g     F .text	0000005a .hidden __aeabi_l2d
1a001248 g     F .text	00000018 uartTxReady
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a0020d8 g     F .text	0000003c Chip_Clock_EnableOpts
1a006b04 g     F .text	0000009c _malloc_trim_r
1a001ea0 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0022cc g     F .text	00000058 fpuInit
1a001f58 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0018e4 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0013f4 g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a007214 g     F .text	0000007a .hidden __nedf2
1a000ffc g     F .text	00000058 gpioWrite
1a003784 g     F .text	0000004c sprintf
1a001b94 g     F .text	00000040 Chip_ADC_Init
1a001900 g     F .text	00000034 Board_SetupMuxing
1a001a6c g     F .text	000000e4 Chip_UART_SetBaudFDR
1a0010ac g     F .text	0000000c tickRead
10000b60 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000af4 g     O .bss	00000004 tickHookFunction
100004a8 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001274 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
1a002194 g     F .text	00000104 Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
10000b6c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a002740 g     F .text	00000038 Chip_SSP_Init
1a00268c g     F .text	00000034 Chip_I2C_EventHandlerPolling
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a001508 g     F .text	0000001a i2cWrite
1a001864 g     F .text	00000024 Board_Debug_Init
1a0072b0 g     F .text	00000012 .hidden __aeabi_dcmpeq
100008f4 g       .data	00000000 _edata
1a002478 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a002328 g     F .text	00000150 Chip_SetupCoreClock
1a0001a8  w    F .text	00000002 GPIO0_IRQHandler
100008ec g     O .data	00000004 __malloc_trim_threshold
1a000360 g     F .text	0000015c wifiInit
1a000000 g     O .text	00000114 g_pfnVectors
1a002778 g     F .text	00000080 ResetISR
1a001c14 g     F .text	00000014 SystemCoreClockUpdate
1a0067b4 g     F .text	000000d2 __mdiff
1a007314 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a0013ac g     F .text	00000046 delayInaccurateUs
1a002c34  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a00388c g     F .text	0000005c strlen
1a002114 g     F .text	00000034 Chip_Clock_Enable
1a0072a0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a007204 g     F .text	0000008a .hidden __gedf2
1a001360 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a002bd4 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a001054 g     F .text	00000058 gpioRead
1a002ac4 g     F .text	0000003a .hidden __aeabi_f2d
1a001628 g     F .text	000000f8 boardInit
1a000e1c g     F .text	00000018 intToString
1a00079c g     F .text	00000018 lcdClearLine
1a002804 g     F .text	0000027a .hidden __subdf3
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a00647c g     F .text	0000005a __lo0bits
1a002b6c g     F .text	00000000 .hidden __aeabi_ldivmod
1a0010b8 g     F .text	00000018 tickPowerSet
1a000b44 g     F .text	00000034 oneWireSensorReadTempValue
1a000730 g     F .text	00000022 lcdWriteChar
1a002064 g     F .text	00000044 Chip_Clock_SetBaseClock
1a000d74 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a0019a0 g     F .text	0000000c Board_SystemInit
1a0063b8 g     F .text	00000082 __multadd
1a0063a4 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 79 27 00 1a 85 01 00 1a 89 01 00 1a     ....y'..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a c6 50 ff 53     .............P.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	4d 11 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     M...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 2d 15 00 1a 69 15 00 1a a9 15 00 1a     ....-...i.......
1a00007c:	e9 15 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 55 13 00 1a     ....y.......U...
1a0000ac:	61 13 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     a...............
1a0000bc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a007ac8 	.word	0x1a007ac8
1a000118:	10000000 	.word	0x10000000
1a00011c:	000008f4 	.word	0x000008f4
1a000120:	1a007ac8 	.word	0x1a007ac8
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007ac8 	.word	0x1a007ac8
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007ac8 	.word	0x1a007ac8
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007ac8 	.word	0x1a007ac8
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100008f8 	.word	0x100008f8
1a000154:	00000274 	.word	0x00000274
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fffe 	bl	1a00117c <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <getResponse>:
* @fn static esp8266Error_t getResponse()
* @brief Obtencion de la respuesta a un comando por parte del modulo Wifi
* @return ESP8266_WORKING si la respuesta recibida es la esperada, ESP8266_NOT_WORKING caso contrario.
* @note static
*/
static esp8266Error_t getResponse(){
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b089      	sub	sp, #36	; 0x24
    uint8_t index = 0;										/** index : Indice actual dentro del buffer de la respuesta esperada */
    uint8_t byteReceived;									/** byteReceived : Byte recibido */
    esp8266Error_t moduleResponse = ESP8266_NOT_WORKING;	/** moduleResponse : Estado de funcionamiento del modulo Wifi */
    delay_t esp8266Delay;									/** esp8266Delay : Tiempo de espera de la respuesta por parte del modulo Wifi */
    /* Inicializacion del delay */
    delayInit(&esp8266Delay, ESP8266_DELAY);
1a000304:	4668      	mov	r0, sp
1a000306:	f241 3288 	movw	r2, #5000	; 0x1388
1a00030a:	2300      	movs	r3, #0
1a00030c:	f001 f88e 	bl	1a00142c <delayInit>
* @note static
*/
static esp8266Error_t getResponse(){
    uint8_t index = 0;										/** index : Indice actual dentro del buffer de la respuesta esperada */
    uint8_t byteReceived;									/** byteReceived : Byte recibido */
    esp8266Error_t moduleResponse = ESP8266_NOT_WORKING;	/** moduleResponse : Estado de funcionamiento del modulo Wifi */
1a000310:	2500      	movs	r5, #0
* @brief Obtencion de la respuesta a un comando por parte del modulo Wifi
* @return ESP8266_WORKING si la respuesta recibida es la esperada, ESP8266_NOT_WORKING caso contrario.
* @note static
*/
static esp8266Error_t getResponse(){
    uint8_t index = 0;										/** index : Indice actual dentro del buffer de la respuesta esperada */
1a000312:	462c      	mov	r4, r5
    esp8266Error_t moduleResponse = ESP8266_NOT_WORKING;	/** moduleResponse : Estado de funcionamiento del modulo Wifi */
    delay_t esp8266Delay;									/** esp8266Delay : Tiempo de espera de la respuesta por parte del modulo Wifi */
    /* Inicializacion del delay */
    delayInit(&esp8266Delay, ESP8266_DELAY);
    /* Mientras el delay no expire y no se reciba la respuesta esperada */
    while (!delayRead(&esp8266Delay) && ESP8266_NOT_WORKING == moduleResponse){
1a000314:	e019      	b.n	1a00034a <getResponse+0x4a>
		/* Si se recibio un caracter por la UART del Wifi */
		if(uartReadByte(esp8266Wifi.wifiUart, &byteReceived)){
1a000316:	4b11      	ldr	r3, [pc, #68]	; (1a00035c <getResponse+0x5c>)
1a000318:	7818      	ldrb	r0, [r3, #0]
1a00031a:	f10d 011f 	add.w	r1, sp, #31
1a00031e:	f000 fff1 	bl	1a001304 <uartReadByte>
1a000322:	b190      	cbz	r0, 1a00034a <getResponse+0x4a>
			/* Si el caracter recibido coincide con el caracter esperado */
			if (byteReceived == esp8266Wifi.responseToWait[index]){
1a000324:	4b0d      	ldr	r3, [pc, #52]	; (1a00035c <getResponse+0x5c>)
1a000326:	4423      	add	r3, r4
1a000328:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
1a00032c:	f89d 301f 	ldrb.w	r3, [sp, #31]
1a000330:	429a      	cmp	r2, r3
1a000332:	d107      	bne.n	1a000344 <getResponse+0x44>
				/* Se aumenta en uno el indice para obtener el siguiente caracter esperado */
				index++;
1a000334:	3401      	adds	r4, #1
1a000336:	b2e4      	uxtb	r4, r4
				/* Si se llego al final de la respuesta esperada es porque se recibio la respuesta esperada de forma correcta */
				if (esp8266Wifi.responseToWait[index] == '\0'){
1a000338:	4b08      	ldr	r3, [pc, #32]	; (1a00035c <getResponse+0x5c>)
1a00033a:	4423      	add	r3, r4
1a00033c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
1a000340:	b113      	cbz	r3, 1a000348 <getResponse+0x48>
1a000342:	e002      	b.n	1a00034a <getResponse+0x4a>
					moduleResponse = ESP8266_WORKING;
				}
			} 
			else {/* Si el caracter recibido no coincide con el caracter esperado */
            	/* Se reinicia el indice para comenzar de nuevo */
				index = 0;
1a000344:	2400      	movs	r4, #0
1a000346:	e000      	b.n	1a00034a <getResponse+0x4a>
				/* Se aumenta en uno el indice para obtener el siguiente caracter esperado */
				index++;
				/* Si se llego al final de la respuesta esperada es porque se recibio la respuesta esperada de forma correcta */
				if (esp8266Wifi.responseToWait[index] == '\0'){
					/* Se setea el valor de retorno como ESP8266 en funcionamiento */
					moduleResponse = ESP8266_WORKING;
1a000348:	2501      	movs	r5, #1
    esp8266Error_t moduleResponse = ESP8266_NOT_WORKING;	/** moduleResponse : Estado de funcionamiento del modulo Wifi */
    delay_t esp8266Delay;									/** esp8266Delay : Tiempo de espera de la respuesta por parte del modulo Wifi */
    /* Inicializacion del delay */
    delayInit(&esp8266Delay, ESP8266_DELAY);
    /* Mientras el delay no expire y no se reciba la respuesta esperada */
    while (!delayRead(&esp8266Delay) && ESP8266_NOT_WORKING == moduleResponse){
1a00034a:	4668      	mov	r0, sp
1a00034c:	f001 f87e 	bl	1a00144c <delayRead>
1a000350:	b908      	cbnz	r0, 1a000356 <getResponse+0x56>
1a000352:	2d00      	cmp	r5, #0
1a000354:	d0df      	beq.n	1a000316 <getResponse+0x16>
			}
		}
    }
    /* Se retorna ESP8266_NOT_WORKING si no se encontro la respuesta esperada y ESP8266_WORKING en caso contrario */
    return moduleResponse;
}
1a000356:	4628      	mov	r0, r5
1a000358:	b009      	add	sp, #36	; 0x24
1a00035a:	bd30      	pop	{r4, r5, pc}
1a00035c:	100008f8 	.word	0x100008f8

1a000360 <wifiInit>:

/*==================[external functions definition]==========================*/
esp8266Error_t wifiInit(uartMap_t wifiUart, wifiMode_t wifiMode, TCPUDPConnectionType_t TCPUDPConnectionType, 
						char* wifiName, char* wifiPassword){
1a000360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000364:	4688      	mov	r8, r1
1a000366:	4617      	mov	r7, r2
1a000368:	461e      	mov	r6, r3

	esp8266Error_t error;		/** error : Estado de funcionamiento del modulo Wifi */
	/* Se setea la UART a utilizar por el Wifi */
	esp8266Wifi.wifiUart = wifiUart;
1a00036a:	4c48      	ldr	r4, [pc, #288]	; (1a00048c <wifiInit+0x12c>)
1a00036c:	4625      	mov	r5, r4
1a00036e:	f805 0b3f 	strb.w	r0, [r5], #63
	uartInit(wifiUart, 115200);
1a000372:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000376:	f000 ff87 	bl	1a001288 <uartInit>
	/* Copiar al buffer de respuesta esperada la respuesta OK */
	strcpy(esp8266Wifi.responseToWait, responseOK);
1a00037a:	4b45      	ldr	r3, [pc, #276]	; (1a000490 <wifiInit+0x130>)
1a00037c:	881a      	ldrh	r2, [r3, #0]
1a00037e:	789b      	ldrb	r3, [r3, #2]
1a000380:	f8a4 203f 	strh.w	r2, [r4, #63]	; 0x3f
1a000384:	70ab      	strb	r3, [r5, #2]
	/* Enviar el comando AT */
	uartWriteString(esp8266Wifi.wifiUart, AT);
1a000386:	7820      	ldrb	r0, [r4, #0]
1a000388:	4942      	ldr	r1, [pc, #264]	; (1a000494 <wifiInit+0x134>)
1a00038a:	f000 ffd7 	bl	1a00133c <uartWriteString>
	/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
	error = getResponse();
1a00038e:	f7ff ffb7 	bl	1a000300 <getResponse>
	/* Si el modulo Wifi funciona correctamente */
	if(ESP8266_WORKING == error){
1a000392:	2801      	cmp	r0, #1
1a000394:	d178      	bne.n	1a000488 <wifiInit+0x128>
		/* Enviar el comando AT+RST */
		uartWriteString(esp8266Wifi.wifiUart, ATRST);
1a000396:	7820      	ldrb	r0, [r4, #0]
1a000398:	493f      	ldr	r1, [pc, #252]	; (1a000498 <wifiInit+0x138>)
1a00039a:	f000 ffcf 	bl	1a00133c <uartWriteString>
		/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
		error = getResponse();
1a00039e:	f7ff ffaf 	bl	1a000300 <getResponse>
		/* Si el modulo Wifi funciona correctamente */
		if(ESP8266_WORKING == error){
1a0003a2:	2801      	cmp	r0, #1
1a0003a4:	d170      	bne.n	1a000488 <wifiInit+0x128>
			/* Setear el modo Wifi y el tipo de conexion TCP/UDP */
			esp8266Wifi.wifiMode = wifiMode;
1a0003a6:	f884 8001 	strb.w	r8, [r4, #1]
			esp8266Wifi.TCPUDPConnectionType = TCPUDPConnectionType;
1a0003aa:	70a7      	strb	r7, [r4, #2]
			/* Copiar el nombre y contraseña de la red a la cual conectar el modulo */
			strcpy(esp8266Wifi.wifiName, wifiName);
1a0003ac:	1ce0      	adds	r0, r4, #3
1a0003ae:	4631      	mov	r1, r6
1a0003b0:	f003 fa0e 	bl	1a0037d0 <strcpy>
			strcpy(esp8266Wifi.wifiPassword, wifiPassword);
1a0003b4:	f104 0021 	add.w	r0, r4, #33	; 0x21
1a0003b8:	9906      	ldr	r1, [sp, #24]
1a0003ba:	f003 fa09 	bl	1a0037d0 <strcpy>
			/* Setar el modo de Wifi */
			/* Enviar el comando AT+CWMODE */
			uartWriteString(esp8266Wifi.wifiUart, ATCWMODE);
1a0003be:	7820      	ldrb	r0, [r4, #0]
1a0003c0:	4936      	ldr	r1, [pc, #216]	; (1a00049c <wifiInit+0x13c>)
1a0003c2:	f000 ffbb 	bl	1a00133c <uartWriteString>
			uartWriteString(esp8266Wifi.wifiUart, intToString(esp8266Wifi.wifiMode));
1a0003c6:	7825      	ldrb	r5, [r4, #0]
1a0003c8:	7860      	ldrb	r0, [r4, #1]
1a0003ca:	2100      	movs	r1, #0
1a0003cc:	f000 fd26 	bl	1a000e1c <intToString>
1a0003d0:	4601      	mov	r1, r0
1a0003d2:	4628      	mov	r0, r5
1a0003d4:	f000 ffb2 	bl	1a00133c <uartWriteString>
			uartWriteString(esp8266Wifi.wifiUart, "\r\n");
1a0003d8:	7820      	ldrb	r0, [r4, #0]
1a0003da:	4931      	ldr	r1, [pc, #196]	; (1a0004a0 <wifiInit+0x140>)
1a0003dc:	f000 ffae 	bl	1a00133c <uartWriteString>
			/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
			error = getResponse();
1a0003e0:	f7ff ff8e 	bl	1a000300 <getResponse>
			/* Si el modulo Wifi funciona correctamente */
			if(ESP8266_WORKING == error){
1a0003e4:	2801      	cmp	r0, #1
1a0003e6:	d14f      	bne.n	1a000488 <wifiInit+0x128>
				/* Setear el tipo de conexion TCP/UDP */
				/* Enviar el comando AT+CIPMUX */
				uartWriteString(esp8266Wifi.wifiUart, ATCIPMUX);
1a0003e8:	7820      	ldrb	r0, [r4, #0]
1a0003ea:	492e      	ldr	r1, [pc, #184]	; (1a0004a4 <wifiInit+0x144>)
1a0003ec:	f000 ffa6 	bl	1a00133c <uartWriteString>
				uartWriteString(esp8266Wifi.wifiUart, intToString(esp8266Wifi.TCPUDPConnectionType));
1a0003f0:	7825      	ldrb	r5, [r4, #0]
1a0003f2:	78a0      	ldrb	r0, [r4, #2]
1a0003f4:	2100      	movs	r1, #0
1a0003f6:	f000 fd11 	bl	1a000e1c <intToString>
1a0003fa:	4601      	mov	r1, r0
1a0003fc:	4628      	mov	r0, r5
1a0003fe:	f000 ff9d 	bl	1a00133c <uartWriteString>
				uartWriteString(esp8266Wifi.wifiUart, "\r\n");
1a000402:	7820      	ldrb	r0, [r4, #0]
1a000404:	4926      	ldr	r1, [pc, #152]	; (1a0004a0 <wifiInit+0x140>)
1a000406:	f000 ff99 	bl	1a00133c <uartWriteString>
				/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
				error = getResponse();
1a00040a:	f7ff ff79 	bl	1a000300 <getResponse>
				/* Si el modulo Wifi funciona correctamente */
				if(ESP8266_WORKING == error){
1a00040e:	2801      	cmp	r0, #1
1a000410:	d13a      	bne.n	1a000488 <wifiInit+0x128>
					/* Conectarse a la red */
					/* Enviar el comando AT+CWJAP */
					uartWriteString(esp8266Wifi.wifiUart, ATCWJAP);
1a000412:	4626      	mov	r6, r4
1a000414:	7820      	ldrb	r0, [r4, #0]
1a000416:	4924      	ldr	r1, [pc, #144]	; (1a0004a8 <wifiInit+0x148>)
1a000418:	f000 ff90 	bl	1a00133c <uartWriteString>
					uartWriteString(esp8266Wifi.wifiUart, esp8266Wifi.wifiName);
1a00041c:	4621      	mov	r1, r4
1a00041e:	f811 0b03 	ldrb.w	r0, [r1], #3
1a000422:	f000 ff8b 	bl	1a00133c <uartWriteString>
					uartWriteString(esp8266Wifi.wifiUart, "\",\"");
1a000426:	7820      	ldrb	r0, [r4, #0]
1a000428:	4920      	ldr	r1, [pc, #128]	; (1a0004ac <wifiInit+0x14c>)
1a00042a:	f000 ff87 	bl	1a00133c <uartWriteString>
					uartWriteString(esp8266Wifi.wifiUart, esp8266Wifi.wifiPassword);
1a00042e:	4621      	mov	r1, r4
1a000430:	f811 0b21 	ldrb.w	r0, [r1], #33
1a000434:	f000 ff82 	bl	1a00133c <uartWriteString>
					uartWriteString(esp8266Wifi.wifiUart, "\"\r\n");
1a000438:	4625      	mov	r5, r4
1a00043a:	f815 0b3f 	ldrb.w	r0, [r5], #63
1a00043e:	491c      	ldr	r1, [pc, #112]	; (1a0004b0 <wifiInit+0x150>)
1a000440:	f000 ff7c 	bl	1a00133c <uartWriteString>
					/* Reiniciar el buffer de respuesta esperada */
					memset( esp8266Wifi.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a000444:	270f      	movs	r7, #15
1a000446:	4628      	mov	r0, r5
1a000448:	2100      	movs	r1, #0
1a00044a:	463a      	mov	r2, r7
1a00044c:	f003 f94c 	bl	1a0036e8 <memset>
					/* Copiar al buffer de respuesta esperada la primer respuesta esperada al comando CW+JAP */
					strcpy(esp8266Wifi.responseToWait, responseCWJAP1);
1a000450:	4b18      	ldr	r3, [pc, #96]	; (1a0004b4 <wifiInit+0x154>)
1a000452:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000454:	f8c4 003f 	str.w	r0, [r4, #63]	; 0x3f
1a000458:	6069      	str	r1, [r5, #4]
1a00045a:	60aa      	str	r2, [r5, #8]
1a00045c:	881a      	ldrh	r2, [r3, #0]
1a00045e:	789b      	ldrb	r3, [r3, #2]
1a000460:	81aa      	strh	r2, [r5, #12]
1a000462:	73ab      	strb	r3, [r5, #14]
					/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
					error = getResponse();
1a000464:	f7ff ff4c 	bl	1a000300 <getResponse>
1a000468:	4604      	mov	r4, r0
					/* Reiniciar el buffer de respuesta esperada */
					memset( esp8266Wifi.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a00046a:	4628      	mov	r0, r5
1a00046c:	2100      	movs	r1, #0
1a00046e:	463a      	mov	r2, r7
1a000470:	f003 f93a 	bl	1a0036e8 <memset>
					/* Copiar al buffer de respuesta esperada la segunda respuesta esperada al comando CW+JAP */
					strcpy(esp8266Wifi.responseToWait, responseCWJAP2);
1a000474:	4b10      	ldr	r3, [pc, #64]	; (1a0004b8 <wifiInit+0x158>)
1a000476:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000478:	f8c6 003f 	str.w	r0, [r6, #63]	; 0x3f
1a00047c:	6069      	str	r1, [r5, #4]
1a00047e:	60aa      	str	r2, [r5, #8]
					/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
					error &= getResponse();
1a000480:	f7ff ff3e 	bl	1a000300 <getResponse>
1a000484:	4020      	ands	r0, r4
1a000486:	b2c0      	uxtb	r0, r0
				}
			}
		}
	}
	return error;
}
1a000488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00048c:	100008f8 	.word	0x100008f8
1a000490:	1a0073a8 	.word	0x1a0073a8
1a000494:	1a007364 	.word	0x1a007364
1a000498:	1a00736c 	.word	0x1a00736c
1a00049c:	1a007378 	.word	0x1a007378
1a0004a0:	1a007384 	.word	0x1a007384
1a0004a4:	1a007388 	.word	0x1a007388
1a0004a8:	1a007394 	.word	0x1a007394
1a0004ac:	1a0073a0 	.word	0x1a0073a0
1a0004b0:	1a0073a4 	.word	0x1a0073a4
1a0004b4:	1a0073ac 	.word	0x1a0073ac
1a0004b8:	1a0073bc 	.word	0x1a0073bc

1a0004bc <wifiSendTCPIPData>:

esp8266Error_t wifiSendTCPIPData(char *data, char* transportLayer, char* TCPUDPIp, int32_t TCPUDPPort, uint8_t TCPUDPConnectionId){
1a0004bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0004c0:	4607      	mov	r7, r0
1a0004c2:	4689      	mov	r9, r1
1a0004c4:	4615      	mov	r5, r2
1a0004c6:	4698      	mov	r8, r3
1a0004c8:	f89d 6020 	ldrb.w	r6, [sp, #32]
	esp8266Error_t error;				/** error : Estado de funcionamiento del modulo Wifi */

	/* Iniciar conexion TCP/UDP */
	/* Enviar el comando AT+CIPSTART */
	uartWriteString(esp8266Wifi.wifiUart, ATCIPSTART);
1a0004cc:	4b5a      	ldr	r3, [pc, #360]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a0004ce:	7818      	ldrb	r0, [r3, #0]
1a0004d0:	495a      	ldr	r1, [pc, #360]	; (1a00063c <wifiSendTCPIPData+0x180>)
1a0004d2:	f000 ff33 	bl	1a00133c <uartWriteString>
	/* Si la interfaz de conexion es distinta de 0 */
	if(TCPUDPConnectionId){
1a0004d6:	b176      	cbz	r6, 1a0004f6 <wifiSendTCPIPData+0x3a>
		/* Se envia el id de la interfaz de conexion al modulo Wifi */
		uartWriteString(esp8266Wifi.wifiUart, intToString(TCPUDPConnectionId));
1a0004d8:	4c57      	ldr	r4, [pc, #348]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a0004da:	f894 a000 	ldrb.w	sl, [r4]
1a0004de:	4630      	mov	r0, r6
1a0004e0:	2100      	movs	r1, #0
1a0004e2:	f000 fc9b 	bl	1a000e1c <intToString>
1a0004e6:	4601      	mov	r1, r0
1a0004e8:	4650      	mov	r0, sl
1a0004ea:	f000 ff27 	bl	1a00133c <uartWriteString>
		uartWriteString(esp8266Wifi.wifiUart, ",");
1a0004ee:	7820      	ldrb	r0, [r4, #0]
1a0004f0:	4953      	ldr	r1, [pc, #332]	; (1a000640 <wifiSendTCPIPData+0x184>)
1a0004f2:	f000 ff23 	bl	1a00133c <uartWriteString>
	}
	uartWriteString(esp8266Wifi.wifiUart, "\"");
1a0004f6:	4c50      	ldr	r4, [pc, #320]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a0004f8:	7820      	ldrb	r0, [r4, #0]
1a0004fa:	4952      	ldr	r1, [pc, #328]	; (1a000644 <wifiSendTCPIPData+0x188>)
1a0004fc:	f000 ff1e 	bl	1a00133c <uartWriteString>
	uartWriteString(esp8266Wifi.wifiUart, transportLayer);
1a000500:	7820      	ldrb	r0, [r4, #0]
1a000502:	4649      	mov	r1, r9
1a000504:	f000 ff1a 	bl	1a00133c <uartWriteString>
	uartWriteString(esp8266Wifi.wifiUart, "\",\"");
1a000508:	7820      	ldrb	r0, [r4, #0]
1a00050a:	494f      	ldr	r1, [pc, #316]	; (1a000648 <wifiSendTCPIPData+0x18c>)
1a00050c:	f000 ff16 	bl	1a00133c <uartWriteString>
	uartWriteString(esp8266Wifi.wifiUart, TCPUDPIp);
1a000510:	7820      	ldrb	r0, [r4, #0]
1a000512:	4629      	mov	r1, r5
1a000514:	f000 ff12 	bl	1a00133c <uartWriteString>
	uartWriteString(esp8266Wifi.wifiUart, "\",");
1a000518:	7820      	ldrb	r0, [r4, #0]
1a00051a:	494c      	ldr	r1, [pc, #304]	; (1a00064c <wifiSendTCPIPData+0x190>)
1a00051c:	f000 ff0e 	bl	1a00133c <uartWriteString>
	uartWriteString(esp8266Wifi.wifiUart, intToString(TCPUDPPort));
1a000520:	7825      	ldrb	r5, [r4, #0]
1a000522:	4640      	mov	r0, r8
1a000524:	17c1      	asrs	r1, r0, #31
1a000526:	f000 fc79 	bl	1a000e1c <intToString>
1a00052a:	4601      	mov	r1, r0
1a00052c:	4628      	mov	r0, r5
1a00052e:	f000 ff05 	bl	1a00133c <uartWriteString>
	uartWriteString(esp8266Wifi.wifiUart, "\r\n");
1a000532:	4625      	mov	r5, r4
1a000534:	f815 0b3f 	ldrb.w	r0, [r5], #63
1a000538:	4945      	ldr	r1, [pc, #276]	; (1a000650 <wifiSendTCPIPData+0x194>)
1a00053a:	f000 feff 	bl	1a00133c <uartWriteString>
	/* Reiniciar el buffer de respuesta esperada */
	memset( esp8266Wifi.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a00053e:	4628      	mov	r0, r5
1a000540:	2100      	movs	r1, #0
1a000542:	220f      	movs	r2, #15
1a000544:	f003 f8d0 	bl	1a0036e8 <memset>
	/* Copiar al buffer de respuesta esperada la respuesta OK */
	strcpy(esp8266Wifi.responseToWait, responseOK);
1a000548:	4b42      	ldr	r3, [pc, #264]	; (1a000654 <wifiSendTCPIPData+0x198>)
1a00054a:	881a      	ldrh	r2, [r3, #0]
1a00054c:	789b      	ldrb	r3, [r3, #2]
1a00054e:	f8a4 203f 	strh.w	r2, [r4, #63]	; 0x3f
1a000552:	70ab      	strb	r3, [r5, #2]
	/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
	error = getResponse();
1a000554:	f7ff fed4 	bl	1a000300 <getResponse>
	/* Si el modulo Wifi funciona correctamente */
	if(ESP8266_WORKING == error){
1a000558:	2801      	cmp	r0, #1
1a00055a:	d16a      	bne.n	1a000632 <wifiSendTCPIPData+0x176>
		/* Enviar datos */
		/* Enviar el comando AT+CIPSEND */
		uartWriteString(esp8266Wifi.wifiUart, ATCIPSEND);
1a00055c:	7820      	ldrb	r0, [r4, #0]
1a00055e:	493e      	ldr	r1, [pc, #248]	; (1a000658 <wifiSendTCPIPData+0x19c>)
1a000560:	f000 feec 	bl	1a00133c <uartWriteString>
		/* Si la interfaz de conexion es distinta de 0 */
		if(TCPUDPConnectionId){
1a000564:	b166      	cbz	r6, 1a000580 <wifiSendTCPIPData+0xc4>
			/* Se envia el id de la interfaz de conexion al modulo Wifi */
			uartWriteString(esp8266Wifi.wifiUart, intToString(TCPUDPConnectionId));
1a000566:	7825      	ldrb	r5, [r4, #0]
1a000568:	4630      	mov	r0, r6
1a00056a:	2100      	movs	r1, #0
1a00056c:	f000 fc56 	bl	1a000e1c <intToString>
1a000570:	4601      	mov	r1, r0
1a000572:	4628      	mov	r0, r5
1a000574:	f000 fee2 	bl	1a00133c <uartWriteString>
			uartWriteString(esp8266Wifi.wifiUart, ",");
1a000578:	7820      	ldrb	r0, [r4, #0]
1a00057a:	4931      	ldr	r1, [pc, #196]	; (1a000640 <wifiSendTCPIPData+0x184>)
1a00057c:	f000 fede 	bl	1a00133c <uartWriteString>
		}
		/* Tamaño de datos a enviar + 2 por el \r\n */
		uartWriteString(esp8266Wifi.wifiUart, intToString(strlen(data)+2));
1a000580:	4c2d      	ldr	r4, [pc, #180]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a000582:	7825      	ldrb	r5, [r4, #0]
1a000584:	4638      	mov	r0, r7
1a000586:	f003 f981 	bl	1a00388c <strlen>
1a00058a:	f04f 0800 	mov.w	r8, #0
1a00058e:	3002      	adds	r0, #2
1a000590:	4641      	mov	r1, r8
1a000592:	f000 fc43 	bl	1a000e1c <intToString>
1a000596:	4601      	mov	r1, r0
1a000598:	4628      	mov	r0, r5
1a00059a:	f000 fecf 	bl	1a00133c <uartWriteString>
		uartWriteString(esp8266Wifi.wifiUart, "\r\n");
1a00059e:	4625      	mov	r5, r4
1a0005a0:	f815 0b3f 	ldrb.w	r0, [r5], #63
1a0005a4:	492a      	ldr	r1, [pc, #168]	; (1a000650 <wifiSendTCPIPData+0x194>)
1a0005a6:	f000 fec9 	bl	1a00133c <uartWriteString>
		memset( esp8266Wifi.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a0005aa:	4628      	mov	r0, r5
1a0005ac:	4641      	mov	r1, r8
1a0005ae:	220f      	movs	r2, #15
1a0005b0:	f003 f89a 	bl	1a0036e8 <memset>
		strcpy(esp8266Wifi.responseToWait, ">");
1a0005b4:	4b29      	ldr	r3, [pc, #164]	; (1a00065c <wifiSendTCPIPData+0x1a0>)
1a0005b6:	881b      	ldrh	r3, [r3, #0]
1a0005b8:	f8a4 303f 	strh.w	r3, [r4, #63]	; 0x3f
		/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
		error = getResponse();
1a0005bc:	f7ff fea0 	bl	1a000300 <getResponse>
1a0005c0:	4604      	mov	r4, r0
		/* Si el modulo Wifi funciona correctamente */
		if(ESP8266_WORKING == error){
1a0005c2:	2801      	cmp	r0, #1
1a0005c4:	d118      	bne.n	1a0005f8 <wifiSendTCPIPData+0x13c>
			uartWriteString(esp8266Wifi.wifiUart, data);
1a0005c6:	4d1c      	ldr	r5, [pc, #112]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a0005c8:	7828      	ldrb	r0, [r5, #0]
1a0005ca:	4639      	mov	r1, r7
1a0005cc:	f000 feb6 	bl	1a00133c <uartWriteString>
			uartWriteString(esp8266Wifi.wifiUart, "\r\n");
1a0005d0:	462c      	mov	r4, r5
1a0005d2:	f814 0b3f 	ldrb.w	r0, [r4], #63
1a0005d6:	491e      	ldr	r1, [pc, #120]	; (1a000650 <wifiSendTCPIPData+0x194>)
1a0005d8:	f000 feb0 	bl	1a00133c <uartWriteString>
			/* Reiniciar el buffer de respuesta esperada */
			memset( esp8266Wifi.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a0005dc:	4620      	mov	r0, r4
1a0005de:	4641      	mov	r1, r8
1a0005e0:	220f      	movs	r2, #15
1a0005e2:	f003 f881 	bl	1a0036e8 <memset>
			/* Copiar al buffer de respuesta esperada la respuesta OK */
			strcpy(esp8266Wifi.responseToWait, responseOK);
1a0005e6:	4b1b      	ldr	r3, [pc, #108]	; (1a000654 <wifiSendTCPIPData+0x198>)
1a0005e8:	881a      	ldrh	r2, [r3, #0]
1a0005ea:	789b      	ldrb	r3, [r3, #2]
1a0005ec:	f8a5 203f 	strh.w	r2, [r5, #63]	; 0x3f
1a0005f0:	70a3      	strb	r3, [r4, #2]
			/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
			error = getResponse();
1a0005f2:	f7ff fe85 	bl	1a000300 <getResponse>
1a0005f6:	4604      	mov	r4, r0
		}
		/* Cerrar la conexion TCP/UDP */
		/* Enviar el comando AT+CIPCLOSE */
		uartWriteString(esp8266Wifi.wifiUart, ATCIPCLOSE);
1a0005f8:	4b0f      	ldr	r3, [pc, #60]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a0005fa:	7818      	ldrb	r0, [r3, #0]
1a0005fc:	4918      	ldr	r1, [pc, #96]	; (1a000660 <wifiSendTCPIPData+0x1a4>)
1a0005fe:	f000 fe9d 	bl	1a00133c <uartWriteString>
		/* Si la interfaz de conexion es distinta de 0 */
		if(TCPUDPConnectionId){
1a000602:	b16e      	cbz	r6, 1a000620 <wifiSendTCPIPData+0x164>
			/* Se envia el id de la interfaz de conexion al modulo Wifi */
			uartWriteString(esp8266Wifi.wifiUart, "=");
1a000604:	4d0c      	ldr	r5, [pc, #48]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a000606:	7828      	ldrb	r0, [r5, #0]
1a000608:	4916      	ldr	r1, [pc, #88]	; (1a000664 <wifiSendTCPIPData+0x1a8>)
1a00060a:	f000 fe97 	bl	1a00133c <uartWriteString>
			uartWriteString(esp8266Wifi.wifiUart, intToString(TCPUDPConnectionId));
1a00060e:	782d      	ldrb	r5, [r5, #0]
1a000610:	4630      	mov	r0, r6
1a000612:	2100      	movs	r1, #0
1a000614:	f000 fc02 	bl	1a000e1c <intToString>
1a000618:	4601      	mov	r1, r0
1a00061a:	4628      	mov	r0, r5
1a00061c:	f000 fe8e 	bl	1a00133c <uartWriteString>
		}
		uartWriteString(esp8266Wifi.wifiUart, "\r\n");
1a000620:	4b05      	ldr	r3, [pc, #20]	; (1a000638 <wifiSendTCPIPData+0x17c>)
1a000622:	7818      	ldrb	r0, [r3, #0]
1a000624:	490a      	ldr	r1, [pc, #40]	; (1a000650 <wifiSendTCPIPData+0x194>)
1a000626:	f000 fe89 	bl	1a00133c <uartWriteString>
		/* Obtener el estado de funcionamiento del modulo Wifi de acuerdo a si se recibio o no la respuesta esperada */
		error &= getResponse();
1a00062a:	f7ff fe69 	bl	1a000300 <getResponse>
1a00062e:	4020      	ands	r0, r4
1a000630:	b2c0      	uxtb	r0, r0
	}
	return error;
}
1a000632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000636:	bf00      	nop
1a000638:	100008f8 	.word	0x100008f8
1a00063c:	1a0073c8 	.word	0x1a0073c8
1a000640:	1a0073d8 	.word	0x1a0073d8
1a000644:	1a0075bc 	.word	0x1a0075bc
1a000648:	1a0073a0 	.word	0x1a0073a0
1a00064c:	1a0073dc 	.word	0x1a0073dc
1a000650:	1a007384 	.word	0x1a007384
1a000654:	1a0073a8 	.word	0x1a0073a8
1a000658:	1a0073e0 	.word	0x1a0073e0
1a00065c:	1a0073ec 	.word	0x1a0073ec
1a000660:	1a0073f0 	.word	0x1a0073f0
1a000664:	1a0073fc 	.word	0x1a0073fc

1a000668 <lcdSendByte>:
	lcdSendByte(LCD_COMMAND_TYPE, 0x06);     /* Command 0x06 set default entry mode set */
	lcdSendByte(LCD_COMMAND_TYPE, 0x80);     /* Command 0x80 set default character type */ 

}

void lcdSendByte(lcdDataType_t dataType, uint8_t data){
1a000668:	b500      	push	{lr}
1a00066a:	b085      	sub	sp, #20
	uint8_t dataHigh;     		/** dataHigh : Parte alta del dato a enviar */
	uint8_t dataLow;			/** dataLow : Parte baja del dato a enviar */
	uint8_t dataNibble[4];		/** dataNibble[4] : Nibbles de datos a enviar via I2C */

	/* Separar el dato a enviar en parte alta y parte baja */
	dataHigh = data & 0xf0;
1a00066c:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
	dataLow = (data << 4) & 0xf0;
1a000670:	0109      	lsls	r1, r1, #4
1a000672:	b2c9      	uxtb	r1, r1

	/* Formatear el paquete a enviar */
	if(dataType){	
1a000674:	b1a0      	cbz	r0, 1a0006a0 <lcdSendByte+0x38>
		dataNibble[0] = dataHigh | (1 << LCD_I2C_EN) | (1 << LCD_I2C_RS) | lcd.backlightMode;    
1a000676:	4a18      	ldr	r2, [pc, #96]	; (1a0006d8 <lcdSendByte+0x70>)
1a000678:	7812      	ldrb	r2, [r2, #0]
1a00067a:	4313      	orrs	r3, r2
1a00067c:	f043 0005 	orr.w	r0, r3, #5
1a000680:	f88d 000c 	strb.w	r0, [sp, #12]
		dataNibble[1] = dataHigh | (1 << LCD_I2C_RS) | lcd.backlightMode;      
1a000684:	f043 0301 	orr.w	r3, r3, #1
1a000688:	f88d 300d 	strb.w	r3, [sp, #13]
		dataNibble[2] = dataLow  | (1 << LCD_I2C_EN) | (1 << LCD_I2C_RS) | lcd.backlightMode;    
1a00068c:	4311      	orrs	r1, r2
1a00068e:	f041 0305 	orr.w	r3, r1, #5
1a000692:	f88d 300e 	strb.w	r3, [sp, #14]
		dataNibble[3] = dataLow  | (1 << LCD_I2C_RS) | lcd.backlightMode;
1a000696:	f041 0101 	orr.w	r1, r1, #1
1a00069a:	f88d 100f 	strb.w	r1, [sp, #15]
1a00069e:	e00f      	b.n	1a0006c0 <lcdSendByte+0x58>
	}
	else{
		dataNibble[0] = dataHigh | (1 << LCD_I2C_EN) | lcd.backlightMode;    
1a0006a0:	4a0d      	ldr	r2, [pc, #52]	; (1a0006d8 <lcdSendByte+0x70>)
1a0006a2:	7812      	ldrb	r2, [r2, #0]
1a0006a4:	4313      	orrs	r3, r2
1a0006a6:	f043 0004 	orr.w	r0, r3, #4
1a0006aa:	f88d 000c 	strb.w	r0, [sp, #12]
		dataNibble[1] = dataHigh | lcd.backlightMode;      
1a0006ae:	f88d 300d 	strb.w	r3, [sp, #13]
		dataNibble[2] = dataLow  | (1 << LCD_I2C_EN) | lcd.backlightMode;    
1a0006b2:	4311      	orrs	r1, r2
1a0006b4:	f041 0304 	orr.w	r3, r1, #4
1a0006b8:	f88d 300e 	strb.w	r3, [sp, #14]
		dataNibble[3] = dataLow  | lcd.backlightMode;   
1a0006bc:	f88d 100f 	strb.w	r1, [sp, #15]
	}

	/* Enviar por I2C */
	i2cWrite(I2C0, lcd.i2cAddress, (uint8_t *)dataNibble, 4, FALSE);      
1a0006c0:	4b05      	ldr	r3, [pc, #20]	; (1a0006d8 <lcdSendByte+0x70>)
1a0006c2:	7919      	ldrb	r1, [r3, #4]
1a0006c4:	2000      	movs	r0, #0
1a0006c6:	9000      	str	r0, [sp, #0]
1a0006c8:	aa03      	add	r2, sp, #12
1a0006ca:	2304      	movs	r3, #4
1a0006cc:	f000 ff1c 	bl	1a001508 <i2cWrite>
   
}
1a0006d0:	b005      	add	sp, #20
1a0006d2:	f85d fb04 	ldr.w	pc, [sp], #4
1a0006d6:	bf00      	nop
1a0006d8:	10000948 	.word	0x10000948

1a0006dc <lcdInit>:

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

void lcdInit(uint8_t i2cAddress){
1a0006dc:	b510      	push	{r4, lr}
	/* Inicializar estructura de datos local */
	lcd.i2cAddress = i2cAddress;
1a0006de:	4b13      	ldr	r3, [pc, #76]	; (1a00072c <lcdInit+0x50>)
1a0006e0:	7118      	strb	r0, [r3, #4]
	lcd.cursorMode = LCD_CURSOR_OFF;
1a0006e2:	2400      	movs	r4, #0
1a0006e4:	705c      	strb	r4, [r3, #1]
	lcd.displayMode = LCD_DISPLAY_ON;
1a0006e6:	2204      	movs	r2, #4
1a0006e8:	709a      	strb	r2, [r3, #2]
	lcd.backlightMode = LCD_BACKLIGHT_ON;
1a0006ea:	2208      	movs	r2, #8
1a0006ec:	701a      	strb	r2, [r3, #0]
	lcd.size = LCD_SIZE_8X5;
1a0006ee:	70dc      	strb	r4, [r3, #3]
	/* Configuracion I2C Port */
	i2cConfig( I2C0, LCD_CLOCK_RATE_10KHZ );
1a0006f0:	4620      	mov	r0, r4
1a0006f2:	f242 7110 	movw	r1, #10000	; 0x2710
1a0006f6:	f000 feff 	bl	1a0014f8 <i2cInit>

	/* Configuracion LCD */
	lcdSendByte(LCD_COMMAND_TYPE, 0x02);     /* Command 0x02 set 4 bit mode for start   */
1a0006fa:	4620      	mov	r0, r4
1a0006fc:	2102      	movs	r1, #2
1a0006fe:	f7ff ffb3 	bl	1a000668 <lcdSendByte>
	lcdSendByte(LCD_COMMAND_TYPE, 0x20);     /* Command 0x20 set 4 bit mode and 1 lines */
1a000702:	4620      	mov	r0, r4
1a000704:	2120      	movs	r1, #32
1a000706:	f7ff ffaf 	bl	1a000668 <lcdSendByte>

	lcdSendByte(LCD_COMMAND_TYPE, 0x28);     /* Command 0x28 set 4 bit mode and 2 lines */
1a00070a:	4620      	mov	r0, r4
1a00070c:	2128      	movs	r1, #40	; 0x28
1a00070e:	f7ff ffab 	bl	1a000668 <lcdSendByte>

	lcdSendByte(LCD_COMMAND_TYPE, 0x0C);     /* Command 0x0c set display on, cursor off */
1a000712:	4620      	mov	r0, r4
1a000714:	210c      	movs	r1, #12
1a000716:	f7ff ffa7 	bl	1a000668 <lcdSendByte>
	lcdSendByte(LCD_COMMAND_TYPE, 0x06);     /* Command 0x06 set default entry mode set */
1a00071a:	4620      	mov	r0, r4
1a00071c:	2106      	movs	r1, #6
1a00071e:	f7ff ffa3 	bl	1a000668 <lcdSendByte>
	lcdSendByte(LCD_COMMAND_TYPE, 0x80);     /* Command 0x80 set default character type */ 
1a000722:	4620      	mov	r0, r4
1a000724:	2180      	movs	r1, #128	; 0x80
1a000726:	f7ff ff9f 	bl	1a000668 <lcdSendByte>
1a00072a:	bd10      	pop	{r4, pc}
1a00072c:	10000948 	.word	0x10000948

1a000730 <lcdWriteChar>:
	/* Enviar por I2C */
	i2cWrite(I2C0, lcd.i2cAddress, (uint8_t *)dataNibble, 4, FALSE);      
   
}

void lcdWriteChar(char c){
1a000730:	b508      	push	{r3, lr}
1a000732:	4601      	mov	r1, r0
	switch (c){
1a000734:	280c      	cmp	r0, #12
1a000736:	d108      	bne.n	1a00074a <lcdWriteChar+0x1a>
		case '\f' :	
			lcdSendByte(LCD_COMMAND_TYPE,1);
1a000738:	2000      	movs	r0, #0
1a00073a:	2101      	movs	r1, #1
1a00073c:	f7ff ff94 	bl	1a000668 <lcdSendByte>
			delayInaccurate(5);
1a000740:	2005      	movs	r0, #5
1a000742:	2100      	movs	r1, #0
1a000744:	f000 fe12 	bl	1a00136c <delayInaccurate>
		break;
1a000748:	bd08      	pop	{r3, pc}
		default:
			lcdSendByte(LCD_DATA_TYPE,c);
1a00074a:	2001      	movs	r0, #1
1a00074c:	f7ff ff8c 	bl	1a000668 <lcdSendByte>
1a000750:	bd08      	pop	{r3, pc}
1a000752:	bf00      	nop

1a000754 <lcdWriteString>:
		break;
	}
}

void lcdWriteString (char *c){
1a000754:	b510      	push	{r4, lr}
1a000756:	4604      	mov	r4, r0
	while (*c){
1a000758:	e002      	b.n	1a000760 <lcdWriteString+0xc>
	  lcdWriteChar(*c);
1a00075a:	f7ff ffe9 	bl	1a000730 <lcdWriteChar>
	  c++;
1a00075e:	3401      	adds	r4, #1
		break;
	}
}

void lcdWriteString (char *c){
	while (*c){
1a000760:	7820      	ldrb	r0, [r4, #0]
1a000762:	2800      	cmp	r0, #0
1a000764:	d1f9      	bne.n	1a00075a <lcdWriteString+0x6>
	  lcdWriteChar(*c);
	  c++;
	}
}
1a000766:	bd10      	pop	{r4, pc}

1a000768 <lcdSetPosXY>:

void lcdSetPosXY(uint8_t x, lcdLine_t y){
1a000768:	b508      	push	{r3, lr}
  uint8_t address;	/** address : Direccion de la linea a donde escribir el dato */
  if (y==1) 
1a00076a:	2901      	cmp	r1, #1
1a00076c:	d005      	beq.n	1a00077a <lcdSetPosXY+0x12>
  	address = LCD_SECOND_LINE_ADDRESS; 
  else if(y==2)
1a00076e:	2902      	cmp	r1, #2
1a000770:	d005      	beq.n	1a00077e <lcdSetPosXY+0x16>
  	address = LCD_THIRD_LINE_ADDRESS;
  else if(y==3)
1a000772:	2903      	cmp	r1, #3
1a000774:	d105      	bne.n	1a000782 <lcdSetPosXY+0x1a>
  	address = LCD_FOURTH_LINE_ADDRESS;
1a000776:	2154      	movs	r1, #84	; 0x54
1a000778:	e004      	b.n	1a000784 <lcdSetPosXY+0x1c>
}

void lcdSetPosXY(uint8_t x, lcdLine_t y){
  uint8_t address;	/** address : Direccion de la linea a donde escribir el dato */
  if (y==1) 
  	address = LCD_SECOND_LINE_ADDRESS; 
1a00077a:	2140      	movs	r1, #64	; 0x40
1a00077c:	e002      	b.n	1a000784 <lcdSetPosXY+0x1c>
  else if(y==2)
  	address = LCD_THIRD_LINE_ADDRESS;
1a00077e:	2114      	movs	r1, #20
1a000780:	e000      	b.n	1a000784 <lcdSetPosXY+0x1c>
  else if(y==3)
  	address = LCD_FOURTH_LINE_ADDRESS;
  else{
  	address=LCD_FIRST_LINE_ADDRESS;
1a000782:	2100      	movs	r1, #0
  }
  address += x;
1a000784:	4401      	add	r1, r0
  lcdSendByte(LCD_COMMAND_TYPE,0x80|address);
1a000786:	f061 017f 	orn	r1, r1, #127	; 0x7f
1a00078a:	2000      	movs	r0, #0
1a00078c:	b2c9      	uxtb	r1, r1
1a00078e:	f7ff ff6b 	bl	1a000668 <lcdSendByte>
  delayInaccurateUs(100);
1a000792:	2064      	movs	r0, #100	; 0x64
1a000794:	2100      	movs	r1, #0
1a000796:	f000 fe09 	bl	1a0013ac <delayInaccurateUs>
1a00079a:	bd08      	pop	{r3, pc}

1a00079c <lcdClearLine>:
void lcdSetCursorBackLightMode(lcdBacklightMode_t mode){
	lcd.backlightMode = mode;
	lcdSendByte(LCD_COMMAND_TYPE, 0x00);
}

void lcdClearLine(lcdLine_t line){	
1a00079c:	b508      	push	{r3, lr}
1a00079e:	4601      	mov	r1, r0
	lcdSetPosXY(LCD_COMMAND_TYPE,line);
1a0007a0:	2000      	movs	r0, #0
1a0007a2:	f7ff ffe1 	bl	1a000768 <lcdSetPosXY>
	lcdWriteString("                    ");
1a0007a6:	4802      	ldr	r0, [pc, #8]	; (1a0007b0 <lcdClearLine+0x14>)
1a0007a8:	f7ff ffd4 	bl	1a000754 <lcdWriteString>
1a0007ac:	bd08      	pop	{r3, pc}
1a0007ae:	bf00      	nop
1a0007b0:	1a007400 	.word	0x1a007400

1a0007b4 <main>:
/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

/* Programa Principal */
int main( void ){
1a0007b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0007b8:	ed2d 8b02 	vpush	{d8}
1a0007bc:	b085      	sub	sp, #20
    uint8_t signal;                 /** signal : Señal del modulo GPRS SIM900 */
    gprsError_t gprsError;          /** gprsError : Estado de funcionamiento del GPRS SIM900 */
    esp8266Error_t esp8266Error;    /** esp8266Error : Estado de funcionamiento del Wifi ESP8266 */

    /* Inicializar y configurar la plataforma */
    boardConfig();
1a0007be:	f000 ff33 	bl	1a001628 <boardInit>
    /* Inicializar y configurar el lcd */
    lcdInit(LCD_ADDRESS);
1a0007c2:	203f      	movs	r0, #63	; 0x3f
1a0007c4:	f7ff ff8a 	bl	1a0006dc <lcdInit>
    /* Mensaje de bienvenida en la PRIMER LINEA */
    lcdSetPosXY(LCD_LEFT_MARGIN, LCD_FIRST_LINE);
1a0007c8:	2000      	movs	r0, #0
1a0007ca:	4601      	mov	r1, r0
1a0007cc:	f7ff ffcc 	bl	1a000768 <lcdSetPosXY>
    lcdWriteString("Proyecto Final PCSE");
1a0007d0:	484e      	ldr	r0, [pc, #312]	; (1a00090c <main+0x158>)
1a0007d2:	f7ff ffbf 	bl	1a000754 <lcdWriteString>
    /* Inicializar el sensor ds18b20 */
    oneWireSensorInit(TWELVE_BITS_RESOLUTION, GPIO0);
1a0007d6:	200c      	movs	r0, #12
1a0007d8:	2120      	movs	r1, #32
1a0007da:	f000 f95d 	bl	1a000a98 <oneWireSensorInit>
    /* Inicializar y configurar el GPRS SIM900 */
    gprsError = gprsInit(UART_GPIO);
1a0007de:	2000      	movs	r0, #0
1a0007e0:	f000 f9f8 	bl	1a000bd4 <gprsInit>
1a0007e4:	4605      	mov	r5, r0
    /* Inicializar y configurar el Wifi ESP8266 */
    esp8266Error = wifiInit(UART_232, STATION_MODE | ACCESS_POINT_MODE, SINGLE_CONNECTION, NETWORK, PASSWORD);
1a0007e6:	4b4a      	ldr	r3, [pc, #296]	; (1a000910 <main+0x15c>)
1a0007e8:	9300      	str	r3, [sp, #0]
1a0007ea:	2005      	movs	r0, #5
1a0007ec:	2103      	movs	r1, #3
1a0007ee:	2200      	movs	r2, #0
1a0007f0:	4b48      	ldr	r3, [pc, #288]	; (1a000914 <main+0x160>)
1a0007f2:	f7ff fdb5 	bl	1a000360 <wifiInit>
1a0007f6:	4680      	mov	r8, r0
    /* Repetir Por Siempre */
    while(1){
        /* Si el llenado de la memoria SRAM SCRATCHPAD es correcta */
        if(ONE_WIRE_SENSOR_WORKING == oneWireSensorFillScratchpad()){
1a0007f8:	f000 f968 	bl	1a000acc <oneWireSensorFillScratchpad>
1a0007fc:	2801      	cmp	r0, #1
1a0007fe:	d17e      	bne.n	1a0008fe <main+0x14a>
            /* Limpiar la SEGUNDA LINEA */
            lcdClearLine(LCD_SECOND_LINE);
1a000800:	f7ff ffcc 	bl	1a00079c <lcdClearLine>
            /* Obtener el valor de la temperatura y escribirlo en la TERCER LINEA */
            lcdSetPosXY(LCD_LEFT_MARGIN, LCD_THIRD_LINE);
1a000804:	2000      	movs	r0, #0
1a000806:	2102      	movs	r1, #2
1a000808:	f7ff ffae 	bl	1a000768 <lcdSetPosXY>
            temp = oneWireSensorReadTempValue();
1a00080c:	f000 f99a 	bl	1a000b44 <oneWireSensorReadTempValue>
1a000810:	eeb0 8a40 	vmov.f32	s16, s0
            /* Reiniciar el string al LCD */
            memset(stringToLCD, 0, STRING_TO_LCD_LENGTH);
1a000814:	4c40      	ldr	r4, [pc, #256]	; (1a000918 <main+0x164>)
1a000816:	4623      	mov	r3, r4
1a000818:	2200      	movs	r2, #0
1a00081a:	f843 2b04 	str.w	r2, [r3], #4
1a00081e:	6062      	str	r2, [r4, #4]
1a000820:	3304      	adds	r3, #4
1a000822:	f843 2b04 	str.w	r2, [r3], #4
1a000826:	f843 2b04 	str.w	r2, [r3], #4
1a00082a:	601a      	str	r2, [r3, #0]
            /* Formatear el string al LCD */
            sprintf(stringToLCD, "Temperature: %04.1fC", temp);
1a00082c:	ee10 0a10 	vmov	r0, s0
1a000830:	f002 f948 	bl	1a002ac4 <__aeabi_f2d>
1a000834:	4606      	mov	r6, r0
1a000836:	460f      	mov	r7, r1
1a000838:	4620      	mov	r0, r4
1a00083a:	4938      	ldr	r1, [pc, #224]	; (1a00091c <main+0x168>)
1a00083c:	4632      	mov	r2, r6
1a00083e:	463b      	mov	r3, r7
1a000840:	f002 ffa0 	bl	1a003784 <sprintf>
            /* Escribir el string en el LCD */
            lcdWriteString(stringToLCD);
1a000844:	4620      	mov	r0, r4
1a000846:	f7ff ff85 	bl	1a000754 <lcdWriteString>
            /* SI la inicializacion del Wifi ESP8266 fue correcta */
            if(ESP8266_WORKING == esp8266Error){
1a00084a:	f1b8 0f01 	cmp.w	r8, #1
1a00084e:	d118      	bne.n	1a000882 <main+0xce>
                /* Reiniciar el string al Wifi */
                memset(stringToWIFI, 0, STRING_TO_WIFI_LENGTH);
1a000850:	4c33      	ldr	r4, [pc, #204]	; (1a000920 <main+0x16c>)
1a000852:	4620      	mov	r0, r4
1a000854:	2100      	movs	r1, #0
1a000856:	f44f 7296 	mov.w	r2, #300	; 0x12c
1a00085a:	f002 ff45 	bl	1a0036e8 <memset>
                /* Foramatear el string al Wifi con el metodo POST para UBIDOTS */
                sprintf(stringToWIFI, "POST /api/v1.6/devices/%s/?token=%s HTTP/1.1\r\nHost: things.ubidots.com\r\nContent-Type: application/json\r\nContent-Length: 13\r\n\r\n{\"%s\":%04.1f}",
1a00085e:	4b31      	ldr	r3, [pc, #196]	; (1a000924 <main+0x170>)
1a000860:	9300      	str	r3, [sp, #0]
1a000862:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a000866:	4620      	mov	r0, r4
1a000868:	492f      	ldr	r1, [pc, #188]	; (1a000928 <main+0x174>)
1a00086a:	4a30      	ldr	r2, [pc, #192]	; (1a00092c <main+0x178>)
1a00086c:	4b30      	ldr	r3, [pc, #192]	; (1a000930 <main+0x17c>)
1a00086e:	f002 ff89 	bl	1a003784 <sprintf>
                        UBIDOTS_DEVICE_LABEL, UBIDOTS_TOKEN, UBIDOTS_TEMP_LABEL, temp);

                /* Enviar el string por TCP a UBIDORS */
                wifiSendTCPIPData(stringToWIFI, TRANSPORT_LAYER, UBIDOTS, UBIDOTS_PORT, TCP_INTERFACE);
1a000872:	2300      	movs	r3, #0
1a000874:	9300      	str	r3, [sp, #0]
1a000876:	4620      	mov	r0, r4
1a000878:	492e      	ldr	r1, [pc, #184]	; (1a000934 <main+0x180>)
1a00087a:	4a2f      	ldr	r2, [pc, #188]	; (1a000938 <main+0x184>)
1a00087c:	2350      	movs	r3, #80	; 0x50
1a00087e:	f7ff fe1d 	bl	1a0004bc <wifiSendTCPIPData>
            } 
            lcdSetPosXY(LCD_LEFT_MARGIN, LCD_FOURTH_LINE);
1a000882:	2000      	movs	r0, #0
1a000884:	2103      	movs	r1, #3
1a000886:	f7ff ff6f 	bl	1a000768 <lcdSetPosXY>
            /* Si la inicializacion del GPRS fue correcta */
			if(GPRS_WORKING == gprsError){
1a00088a:	2d01      	cmp	r5, #1
1a00088c:	d116      	bne.n	1a0008bc <main+0x108>
                /* Obtener la señal del gprs */
                signal = gprsGetSignal();
1a00088e:	f000 fa1d 	bl	1a000ccc <gprsGetSignal>
1a000892:	4681      	mov	r9, r0
                /* Reiniciar el string al LCD */
				memset(stringToLCD, 0, STRING_TO_LCD_LENGTH);
1a000894:	4c20      	ldr	r4, [pc, #128]	; (1a000918 <main+0x164>)
1a000896:	4623      	mov	r3, r4
1a000898:	2200      	movs	r2, #0
1a00089a:	f843 2b04 	str.w	r2, [r3], #4
1a00089e:	6062      	str	r2, [r4, #4]
1a0008a0:	3304      	adds	r3, #4
1a0008a2:	f843 2b04 	str.w	r2, [r3], #4
1a0008a6:	f843 2b04 	str.w	r2, [r3], #4
1a0008aa:	601a      	str	r2, [r3, #0]
                /* Formatear el string con la señal del GPRS en dbm */
				sprintf(stringToLCD, "Signal: -%ddbm   ", signal);
1a0008ac:	4620      	mov	r0, r4
1a0008ae:	4923      	ldr	r1, [pc, #140]	; (1a00093c <main+0x188>)
1a0008b0:	464a      	mov	r2, r9
1a0008b2:	f002 ff67 	bl	1a003784 <sprintf>
                /* Enviar al LCD el string */
				lcdWriteString(stringToLCD);
1a0008b6:	4620      	mov	r0, r4
1a0008b8:	f7ff ff4c 	bl	1a000754 <lcdWriteString>
			}
            /* Si la operacion previa sobre el GPRS arrojo que funcionaba y la temperatura es mayor al umbral */
			if(GPRS_WORKING == gprsError && temp >= MAX_TEMP){
1a0008bc:	2d01      	cmp	r5, #1
1a0008be:	d11e      	bne.n	1a0008fe <main+0x14a>
1a0008c0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x3a
1a0008c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
1a0008c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0008cc:	db17      	blt.n	1a0008fe <main+0x14a>
				/* Reiniciar el string al GPRS */
                memset(stringToGPRS, 0, STRING_TO_LCD_LENGTH);
1a0008ce:	4c1c      	ldr	r4, [pc, #112]	; (1a000940 <main+0x18c>)
1a0008d0:	4623      	mov	r3, r4
1a0008d2:	2200      	movs	r2, #0
1a0008d4:	f843 2b04 	str.w	r2, [r3], #4
1a0008d8:	6062      	str	r2, [r4, #4]
1a0008da:	3304      	adds	r3, #4
1a0008dc:	f843 2b04 	str.w	r2, [r3], #4
1a0008e0:	f843 2b04 	str.w	r2, [r3], #4
1a0008e4:	601a      	str	r2, [r3, #0]
                /* Formatear el string al GPRS con el valor actual de temperatura y señal */
				sprintf(stringToGPRS, "Temperature: %04.1f, Signal: -%ddbm", temp, signal);
1a0008e6:	f8cd 9000 	str.w	r9, [sp]
1a0008ea:	4620      	mov	r0, r4
1a0008ec:	4915      	ldr	r1, [pc, #84]	; (1a000944 <main+0x190>)
1a0008ee:	4632      	mov	r2, r6
1a0008f0:	463b      	mov	r3, r7
1a0008f2:	f002 ff47 	bl	1a003784 <sprintf>
                /* Enviar al numero de celular especificado el reporte */
				gprsSendSMS(stringToGPRS, CELL_NUMBER);
1a0008f6:	4620      	mov	r0, r4
1a0008f8:	4913      	ldr	r1, [pc, #76]	; (1a000948 <main+0x194>)
1a0008fa:	f000 f989 	bl	1a000c10 <gprsSendSMS>
			}
        }
        /* Delay Bloqueante */
        delay(DELAY);
1a0008fe:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
1a000902:	2100      	movs	r1, #0
1a000904:	f000 fd76 	bl	1a0013f4 <delay>
   }
1a000908:	e776      	b.n	1a0007f8 <main+0x44>
1a00090a:	bf00      	nop
1a00090c:	1a007418 	.word	0x1a007418
1a000910:	1a007438 	.word	0x1a007438
1a000914:	1a00742c 	.word	0x1a00742c
1a000918:	10000978 	.word	0x10000978
1a00091c:	1a007444 	.word	0x1a007444
1a000920:	1000098c 	.word	0x1000098c
1a000924:	1a007514 	.word	0x1a007514
1a000928:	1a00745c 	.word	0x1a00745c
1a00092c:	1a0074e8 	.word	0x1a0074e8
1a000930:	1a0074f0 	.word	0x1a0074f0
1a000934:	1a00751c 	.word	0x1a00751c
1a000938:	1a007520 	.word	0x1a007520
1a00093c:	1a007534 	.word	0x1a007534
1a000940:	10000950 	.word	0x10000950
1a000944:	1a007548 	.word	0x1a007548
1a000948:	1a00756c 	.word	0x1a00756c

1a00094c <oneWireSensorCheckCRC>:
* @note Funcion privada.
*/
static uint8_t oneWireSensorCheckCRC(uint8_t crc, uint8_t data){
	uint8_t i;		/** i : Indice del for */
	/* crc XOR data */
	crc = crc ^ data;
1a00094c:	4048      	eors	r0, r1
	/* Por cada bit dentro del byte */
	for (i = 0; i < 8; i++){
1a00094e:	2300      	movs	r3, #0
1a000950:	e009      	b.n	1a000966 <oneWireSensorCheckCRC+0x1a>
		/* Si es un '1', se hace un corrimiento a derecha y un XOR con el polinomio */
	    if (crc & BIT_MASK)
1a000952:	f010 0f01 	tst.w	r0, #1
1a000956:	d003      	beq.n	1a000960 <oneWireSensorCheckCRC+0x14>
	        crc = (crc >> 1) ^ CRC_POLYNOMIAL;
1a000958:	0840      	lsrs	r0, r0, #1
1a00095a:	f080 008c 	eor.w	r0, r0, #140	; 0x8c
1a00095e:	e000      	b.n	1a000962 <oneWireSensorCheckCRC+0x16>
	    else /* Si no, solamente se hace el corrimiento */
	        crc >>= 1;
1a000960:	0840      	lsrs	r0, r0, #1
static uint8_t oneWireSensorCheckCRC(uint8_t crc, uint8_t data){
	uint8_t i;		/** i : Indice del for */
	/* crc XOR data */
	crc = crc ^ data;
	/* Por cada bit dentro del byte */
	for (i = 0; i < 8; i++){
1a000962:	3301      	adds	r3, #1
1a000964:	b2db      	uxtb	r3, r3
1a000966:	2b07      	cmp	r3, #7
1a000968:	d9f3      	bls.n	1a000952 <oneWireSensorCheckCRC+0x6>
	    else /* Si no, solamente se hace el corrimiento */
	        crc >>= 1;
	}

	return crc;
}
1a00096a:	4770      	bx	lr

1a00096c <oneWireSensorWriteBit>:
* @brief Escritura de 1 bit del sensor 
* @param bit : Bit a escribir.
* @return Nada.
* @note Funcion privada.
*/
static void oneWireSensorWriteBit(uint8_t bit){
1a00096c:	b538      	push	{r3, r4, r5, lr}
1a00096e:	4605      	mov	r5, r0
	/* Configuracion de GPIO como OUTPUT */
	gpioConfig(oneWireSensor.gpio, GPIO_OUTPUT);	
1a000970:	4c12      	ldr	r4, [pc, #72]	; (1a0009bc <oneWireSensorWriteBit+0x50>)
1a000972:	7b20      	ldrb	r0, [r4, #12]
1a000974:	2101      	movs	r1, #1
1a000976:	f000 fa73 	bl	1a000e60 <gpioInit>
	/* Seteado del bus en bajo*/
	gpioWrite(oneWireSensor.gpio, FALSE);
1a00097a:	7b20      	ldrb	r0, [r4, #12]
1a00097c:	2100      	movs	r1, #0
1a00097e:	f000 fb3d 	bl	1a000ffc <gpioWrite>
	if (bit){ /* Escribir un '1' */
1a000982:	b165      	cbz	r5, 1a00099e <oneWireSensorWriteBit+0x32>
		/* Liberacion del bus despues de 10us */
		delayInaccurateUs(10);
1a000984:	200a      	movs	r0, #10
1a000986:	2100      	movs	r1, #0
1a000988:	f000 fd10 	bl	1a0013ac <delayInaccurateUs>
		gpioConfig(oneWireSensor.gpio, GPIO_INPUT);
1a00098c:	7b20      	ldrb	r0, [r4, #12]
1a00098e:	2100      	movs	r1, #0
1a000990:	f000 fa66 	bl	1a000e60 <gpioInit>
		/* Esperar fin slot escritura + 2us de recuperacion entre bits sucesivos */
		delayInaccurateUs(52);
1a000994:	2034      	movs	r0, #52	; 0x34
1a000996:	2100      	movs	r1, #0
1a000998:	f000 fd08 	bl	1a0013ac <delayInaccurateUs>
1a00099c:	bd38      	pop	{r3, r4, r5, pc}
	}
	else{ /* Escribir un '0' */
		/* Mantener en bajo el bus durante todo el slot de escritura */
		delayInaccurateUs(60);
1a00099e:	203c      	movs	r0, #60	; 0x3c
1a0009a0:	2100      	movs	r1, #0
1a0009a2:	f000 fd03 	bl	1a0013ac <delayInaccurateUs>
		/* Liberacion del bus*/
		gpioConfig(oneWireSensor.gpio, GPIO_INPUT);
1a0009a6:	4b05      	ldr	r3, [pc, #20]	; (1a0009bc <oneWireSensorWriteBit+0x50>)
1a0009a8:	7b18      	ldrb	r0, [r3, #12]
1a0009aa:	2100      	movs	r1, #0
1a0009ac:	f000 fa58 	bl	1a000e60 <gpioInit>
		/* 2us de recuperacion entre bits sucesivos */
		delayInaccurateUs(2);
1a0009b0:	2002      	movs	r0, #2
1a0009b2:	2100      	movs	r1, #0
1a0009b4:	f000 fcfa 	bl	1a0013ac <delayInaccurateUs>
1a0009b8:	bd38      	pop	{r3, r4, r5, pc}
1a0009ba:	bf00      	nop
1a0009bc:	10000ab8 	.word	0x10000ab8

1a0009c0 <oneWireSensorWriteByte>:
* @brief Escritura de un byte al sensor
* @param command : Comando a enviar.
* @return Nada.
* @note Funcion privada.
*/
static void oneWireSensorWriteByte(oneWireSensorCommand_t command){
1a0009c0:	b538      	push	{r3, r4, r5, lr}
1a0009c2:	4605      	mov	r5, r0
	uint8_t currentBit;  /** currentBit : Bit que en cada momento se esta escribiendo */
	/* Por cada bit dentro del comando, se hace un OR con la mascara de un bit(0x01) y un corrimiento del comando a derecha */
	for (currentBit = 0; currentBit < 8; currentBit++){
1a0009c4:	2400      	movs	r4, #0
1a0009c6:	e006      	b.n	1a0009d6 <oneWireSensorWriteByte+0x16>
		oneWireSensorWriteBit(command & BIT_MASK);
1a0009c8:	f005 0001 	and.w	r0, r5, #1
1a0009cc:	f7ff ffce 	bl	1a00096c <oneWireSensorWriteBit>
		command = command >> 1;	
1a0009d0:	086d      	lsrs	r5, r5, #1
* @note Funcion privada.
*/
static void oneWireSensorWriteByte(oneWireSensorCommand_t command){
	uint8_t currentBit;  /** currentBit : Bit que en cada momento se esta escribiendo */
	/* Por cada bit dentro del comando, se hace un OR con la mascara de un bit(0x01) y un corrimiento del comando a derecha */
	for (currentBit = 0; currentBit < 8; currentBit++){
1a0009d2:	3401      	adds	r4, #1
1a0009d4:	b2e4      	uxtb	r4, r4
1a0009d6:	2c07      	cmp	r4, #7
1a0009d8:	d9f6      	bls.n	1a0009c8 <oneWireSensorWriteByte+0x8>
		oneWireSensorWriteBit(command & BIT_MASK);
		command = command >> 1;	
	}
}
1a0009da:	bd38      	pop	{r3, r4, r5, pc}

1a0009dc <oneWireSensorReset>:
* @fn sensorFunctionalState_t oneWireSensorReset()
* @brief Reseteo y deteccion del estado del sensor
* @return SENSOR_WORKING si el sensor contesto con el pulso de presencia, SENSOR_NOT_WORKING caso contrario.
* @note Funcion privada.
*/
static oneWireSensorError_t oneWireSensorReset(){
1a0009dc:	b510      	push	{r4, lr}
	oneWireSensorError_t error;	/** error : Estado del sensor */
	
	/* Configuracion del GPIO como OUTPUT */
	gpioConfig(oneWireSensor.gpio, GPIO_OUTPUT);		
1a0009de:	4c12      	ldr	r4, [pc, #72]	; (1a000a28 <oneWireSensorReset+0x4c>)
1a0009e0:	7b20      	ldrb	r0, [r4, #12]
1a0009e2:	2101      	movs	r1, #1
1a0009e4:	f000 fa3c 	bl	1a000e60 <gpioInit>
	/* Seteo del bus en bajo */
	gpioWrite(oneWireSensor.gpio, FALSE);
1a0009e8:	7b20      	ldrb	r0, [r4, #12]
1a0009ea:	2100      	movs	r1, #0
1a0009ec:	f000 fb06 	bl	1a000ffc <gpioWrite>
	/* Liberacion del bus despues de 480us */
	delayInaccurateUs(480);
1a0009f0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
1a0009f4:	2100      	movs	r1, #0
1a0009f6:	f000 fcd9 	bl	1a0013ac <delayInaccurateUs>
	/* Configuracion del GPIO como entrada para liberar el bus */
	gpioConfig(oneWireSensor.gpio, GPIO_INPUT);		
1a0009fa:	7b20      	ldrb	r0, [r4, #12]
1a0009fc:	2100      	movs	r1, #0
1a0009fe:	f000 fa2f 	bl	1a000e60 <gpioInit>
	/* Espera de 80us para detectar el pulso de presencia del sensor */
	delayInaccurateUs(80);
1a000a02:	2050      	movs	r0, #80	; 0x50
1a000a04:	2100      	movs	r1, #0
1a000a06:	f000 fcd1 	bl	1a0013ac <delayInaccurateUs>
	/* Lectura del bus para verificar si el sensor esta funcionando */
	if(!gpioRead(oneWireSensor.gpio)){ /* Si el sensor seteo el bus en bajo es porque esta funcionando */
1a000a0a:	7b20      	ldrb	r0, [r4, #12]
1a000a0c:	f000 fb22 	bl	1a001054 <gpioRead>
1a000a10:	b908      	cbnz	r0, 1a000a16 <oneWireSensorReset+0x3a>
		error = ONE_WIRE_SENSOR_WORKING;
1a000a12:	2401      	movs	r4, #1
1a000a14:	e000      	b.n	1a000a18 <oneWireSensorReset+0x3c>
	}
	else{ /* Si el bus sigue en alto producto de la resistencia de pullup es porque NO esta funcionando */
		error = ONE_WIRE_SENSOR_NOT_WORKING;
1a000a16:	2400      	movs	r4, #0
	}
	/* Espera de 400us para que el sensor libere el bus */
	delayInaccurateUs(400);
1a000a18:	f44f 70c8 	mov.w	r0, #400	; 0x190
1a000a1c:	2100      	movs	r1, #0
1a000a1e:	f000 fcc5 	bl	1a0013ac <delayInaccurateUs>
	return error;
}
1a000a22:	4620      	mov	r0, r4
1a000a24:	bd10      	pop	{r4, pc}
1a000a26:	bf00      	nop
1a000a28:	10000ab8 	.word	0x10000ab8

1a000a2c <oneWireSensorReadBit>:
* @fn static uint8_t oneWireSensorReadBit()
* @brief Lectura de 1 bit del sensor 
* @return El bit leido.
* @note Funcion privada.
*/
static uint8_t oneWireSensorReadBit(){
1a000a2c:	b510      	push	{r4, lr}
	uint8_t bit = 0;  /** bit : Bit leido del sensor */

	/* Configuracion del GPIO como OUTPUT */
	gpioConfig(oneWireSensor.gpio, GPIO_OUTPUT);		
1a000a2e:	4c11      	ldr	r4, [pc, #68]	; (1a000a74 <oneWireSensorReadBit+0x48>)
1a000a30:	7b20      	ldrb	r0, [r4, #12]
1a000a32:	2101      	movs	r1, #1
1a000a34:	f000 fa14 	bl	1a000e60 <gpioInit>
	/* Seteado del bus en bajo por al menos 1us*/
	gpioWrite(oneWireSensor.gpio, FALSE);
1a000a38:	7b20      	ldrb	r0, [r4, #12]
1a000a3a:	2100      	movs	r1, #0
1a000a3c:	f000 fade 	bl	1a000ffc <gpioWrite>
	delayInaccurateUs(10);
1a000a40:	200a      	movs	r0, #10
1a000a42:	2100      	movs	r1, #0
1a000a44:	f000 fcb2 	bl	1a0013ac <delayInaccurateUs>
	/* Configuracion del GPIO como entrada para liberarlo */
	gpioConfig(oneWireSensor.gpio, GPIO_INPUT);		
1a000a48:	7b20      	ldrb	r0, [r4, #12]
1a000a4a:	2100      	movs	r1, #0
1a000a4c:	f000 fa08 	bl	1a000e60 <gpioInit>
	/* Se espera hasta que el valor en el bus es valido*/
	delayInaccurateUs(12);
1a000a50:	200c      	movs	r0, #12
1a000a52:	2100      	movs	r1, #0
1a000a54:	f000 fcaa 	bl	1a0013ac <delayInaccurateUs>
	/* Lectura del GPIO */
	if(gpioRead(oneWireSensor.gpio)){
1a000a58:	7b20      	ldrb	r0, [r4, #12]
1a000a5a:	f000 fafb 	bl	1a001054 <gpioRead>
1a000a5e:	b908      	cbnz	r0, 1a000a64 <oneWireSensorReadBit+0x38>
* @brief Lectura de 1 bit del sensor 
* @return El bit leido.
* @note Funcion privada.
*/
static uint8_t oneWireSensorReadBit(){
	uint8_t bit = 0;  /** bit : Bit leido del sensor */
1a000a60:	2400      	movs	r4, #0
1a000a62:	e000      	b.n	1a000a66 <oneWireSensorReadBit+0x3a>
	gpioConfig(oneWireSensor.gpio, GPIO_INPUT);		
	/* Se espera hasta que el valor en el bus es valido*/
	delayInaccurateUs(12);
	/* Lectura del GPIO */
	if(gpioRead(oneWireSensor.gpio)){
		bit = 1;   /* Se leyo un 1 */
1a000a64:	2401      	movs	r4, #1
	} 
	/* Else -> No hacer nada -> Un cero fue leido */
	/* Se espera a que el sensor libere el bus */
	delayInaccurateUs(50);
1a000a66:	2032      	movs	r0, #50	; 0x32
1a000a68:	2100      	movs	r1, #0
1a000a6a:	f000 fc9f 	bl	1a0013ac <delayInaccurateUs>

	return bit;
}
1a000a6e:	4620      	mov	r0, r4
1a000a70:	bd10      	pop	{r4, pc}
1a000a72:	bf00      	nop
1a000a74:	10000ab8 	.word	0x10000ab8

1a000a78 <oneWireSensorReadByte>:
* @fn static uint8_t oneWireSensorReadByte()
* @brief Lectura de 1 byte del sensor. 
* @return El byte leido.
* @note Funcion privada.
*/
static uint8_t oneWireSensorReadByte(){
1a000a78:	b538      	push	{r3, r4, r5, lr}
	uint8_t currentBit;  /** currentBit : Numero actual de bit leido */
	uint8_t byte = 0;    /** byte : Byte leido */
1a000a7a:	2500      	movs	r5, #0
	/* Por cada bit dentro del byte */
	for (currentBit = 0; currentBit < 8; currentBit++){
1a000a7c:	462c      	mov	r4, r5
1a000a7e:	e006      	b.n	1a000a8e <oneWireSensorReadByte+0x16>
		/* Se lee un bit y se hace un corrimiento */
		byte = byte | (oneWireSensorReadBit() << currentBit);
1a000a80:	f7ff ffd4 	bl	1a000a2c <oneWireSensorReadBit>
1a000a84:	40a0      	lsls	r0, r4
1a000a86:	4305      	orrs	r5, r0
1a000a88:	b2ed      	uxtb	r5, r5
*/
static uint8_t oneWireSensorReadByte(){
	uint8_t currentBit;  /** currentBit : Numero actual de bit leido */
	uint8_t byte = 0;    /** byte : Byte leido */
	/* Por cada bit dentro del byte */
	for (currentBit = 0; currentBit < 8; currentBit++){
1a000a8a:	3401      	adds	r4, #1
1a000a8c:	b2e4      	uxtb	r4, r4
1a000a8e:	2c07      	cmp	r4, #7
1a000a90:	d9f6      	bls.n	1a000a80 <oneWireSensorReadByte+0x8>
		/* Se lee un bit y se hace un corrimiento */
		byte = byte | (oneWireSensorReadBit() << currentBit);
	}
	return byte;
}
1a000a92:	4628      	mov	r0, r5
1a000a94:	bd38      	pop	{r3, r4, r5, pc}
1a000a96:	bf00      	nop

1a000a98 <oneWireSensorInit>:
/*==================[external data definition]===============================*/

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/
void oneWireSensorInit(oneWireSensorResolution_t resolution, gpioMap_t gpio){
1a000a98:	b470      	push	{r4, r5, r6}
	oneWireSensor.operation.resolution = operation[resolution - NINE_BITS_RESOLUTION].resolution;
1a000a9a:	3809      	subs	r0, #9
1a000a9c:	4a09      	ldr	r2, [pc, #36]	; (1a000ac4 <oneWireSensorInit+0x2c>)
1a000a9e:	0044      	lsls	r4, r0, #1
1a000aa0:	1823      	adds	r3, r4, r0
1a000aa2:	009b      	lsls	r3, r3, #2
1a000aa4:	18d5      	adds	r5, r2, r3
1a000aa6:	5cd6      	ldrb	r6, [r2, r3]
1a000aa8:	4b07      	ldr	r3, [pc, #28]	; (1a000ac8 <oneWireSensorInit+0x30>)
1a000aaa:	701e      	strb	r6, [r3, #0]
	oneWireSensor.operation.step = operation[resolution - NINE_BITS_RESOLUTION].step;
1a000aac:	686e      	ldr	r6, [r5, #4]
1a000aae:	605e      	str	r6, [r3, #4]
	oneWireSensor.operation.delay = operation[resolution - NINE_BITS_RESOLUTION].delay;
1a000ab0:	892d      	ldrh	r5, [r5, #8]
1a000ab2:	811d      	strh	r5, [r3, #8]
	oneWireSensor.operation.mask = operation[resolution - NINE_BITS_RESOLUTION].mask;
1a000ab4:	4420      	add	r0, r4
1a000ab6:	0080      	lsls	r0, r0, #2
1a000ab8:	4410      	add	r0, r2
1a000aba:	7a82      	ldrb	r2, [r0, #10]
1a000abc:	729a      	strb	r2, [r3, #10]
	oneWireSensor.gpio = gpio;
1a000abe:	7319      	strb	r1, [r3, #12]
}
1a000ac0:	bc70      	pop	{r4, r5, r6}
1a000ac2:	4770      	bx	lr
1a000ac4:	1a007578 	.word	0x1a007578
1a000ac8:	10000ab8 	.word	0x10000ab8

1a000acc <oneWireSensorFillScratchpad>:

oneWireSensorError_t oneWireSensorFillScratchpad(){	
1a000acc:	b570      	push	{r4, r5, r6, lr}
	uint8_t currentByte;  					/** currentByte : Byte leido en cada momento*/
	uint8_t crc = 0;						/** crc : Valor del calculo de CRC */
	/* Reset Sensor */
	if(ONE_WIRE_SENSOR_WORKING == oneWireSensorReset()){
1a000ace:	f7ff ff85 	bl	1a0009dc <oneWireSensorReset>
1a000ad2:	2801      	cmp	r0, #1
1a000ad4:	d12d      	bne.n	1a000b32 <oneWireSensorFillScratchpad+0x66>
		/* Skip ROM */
		oneWireSensorWriteByte(SKIP_ROM);
1a000ad6:	20cc      	movs	r0, #204	; 0xcc
1a000ad8:	f7ff ff72 	bl	1a0009c0 <oneWireSensorWriteByte>
		/* Conversion Temperatura */
		oneWireSensorWriteByte(CONVERT_T);
1a000adc:	2044      	movs	r0, #68	; 0x44
1a000ade:	f7ff ff6f 	bl	1a0009c0 <oneWireSensorWriteByte>
		/* Espera tiempo conversion */
		delay(oneWireSensor.operation.delay);
1a000ae2:	4b17      	ldr	r3, [pc, #92]	; (1a000b40 <oneWireSensorFillScratchpad+0x74>)
1a000ae4:	8918      	ldrh	r0, [r3, #8]
1a000ae6:	2100      	movs	r1, #0
1a000ae8:	f000 fc84 	bl	1a0013f4 <delay>
		/* Reset Sensor */
		if(ONE_WIRE_SENSOR_WORKING == oneWireSensorReset()){
1a000aec:	f7ff ff76 	bl	1a0009dc <oneWireSensorReset>
1a000af0:	4604      	mov	r4, r0
1a000af2:	2801      	cmp	r0, #1
1a000af4:	d11f      	bne.n	1a000b36 <oneWireSensorFillScratchpad+0x6a>
			/* Skip ROM */
			oneWireSensorWriteByte(SKIP_ROM);
1a000af6:	20cc      	movs	r0, #204	; 0xcc
1a000af8:	f7ff ff62 	bl	1a0009c0 <oneWireSensorWriteByte>
			/* Lectura SRAM SCRATCHPAD */
			oneWireSensorWriteByte(READ_SCRATCHPAD);
1a000afc:	20be      	movs	r0, #190	; 0xbe
1a000afe:	f7ff ff5f 	bl	1a0009c0 <oneWireSensorWriteByte>
	oneWireSensor.gpio = gpio;
}

oneWireSensorError_t oneWireSensorFillScratchpad(){	
	uint8_t currentByte;  					/** currentByte : Byte leido en cada momento*/
	uint8_t crc = 0;						/** crc : Valor del calculo de CRC */
1a000b02:	2600      	movs	r6, #0
			/* Skip ROM */
			oneWireSensorWriteByte(SKIP_ROM);
			/* Lectura SRAM SCRATCHPAD */
			oneWireSensorWriteByte(READ_SCRATCHPAD);
			/* Llenado del SCRATCHPAD y calculo CRC */
			for(currentByte = 0; currentByte < SCRATCHPAD_LENGTH - 1; currentByte++){
1a000b04:	4635      	mov	r5, r6
1a000b06:	e00b      	b.n	1a000b20 <oneWireSensorFillScratchpad+0x54>
				oneWireSensor.scratchpad[currentByte] = oneWireSensorReadByte();
1a000b08:	f7ff ffb6 	bl	1a000a78 <oneWireSensorReadByte>
1a000b0c:	4601      	mov	r1, r0
1a000b0e:	4b0c      	ldr	r3, [pc, #48]	; (1a000b40 <oneWireSensorFillScratchpad+0x74>)
1a000b10:	442b      	add	r3, r5
1a000b12:	7358      	strb	r0, [r3, #13]
				crc = oneWireSensorCheckCRC(crc, oneWireSensor.scratchpad[currentByte]);
1a000b14:	4630      	mov	r0, r6
1a000b16:	f7ff ff19 	bl	1a00094c <oneWireSensorCheckCRC>
1a000b1a:	4606      	mov	r6, r0
			/* Skip ROM */
			oneWireSensorWriteByte(SKIP_ROM);
			/* Lectura SRAM SCRATCHPAD */
			oneWireSensorWriteByte(READ_SCRATCHPAD);
			/* Llenado del SCRATCHPAD y calculo CRC */
			for(currentByte = 0; currentByte < SCRATCHPAD_LENGTH - 1; currentByte++){
1a000b1c:	3501      	adds	r5, #1
1a000b1e:	b2ed      	uxtb	r5, r5
1a000b20:	2d07      	cmp	r5, #7
1a000b22:	d9f1      	bls.n	1a000b08 <oneWireSensorFillScratchpad+0x3c>
				oneWireSensor.scratchpad[currentByte] = oneWireSensorReadByte();
				crc = oneWireSensorCheckCRC(crc, oneWireSensor.scratchpad[currentByte]);
			}
			/* Obtencion CRC del SCRATCHPAD */
			oneWireSensor.scratchpad[SCRATCHPAD_CRC_BYTE] = oneWireSensorReadByte();
1a000b24:	f7ff ffa8 	bl	1a000a78 <oneWireSensorReadByte>
1a000b28:	4b05      	ldr	r3, [pc, #20]	; (1a000b40 <oneWireSensorFillScratchpad+0x74>)
1a000b2a:	7558      	strb	r0, [r3, #21]
			/* Si el CRC calculado y el CRC del SCRATCHPAD son iguales, la lectura fue correcta */
			if(crc == oneWireSensor.scratchpad[SCRATCHPAD_CRC_BYTE]){
1a000b2c:	4286      	cmp	r6, r0
1a000b2e:	d104      	bne.n	1a000b3a <oneWireSensorFillScratchpad+0x6e>
1a000b30:	e004      	b.n	1a000b3c <oneWireSensorFillScratchpad+0x70>
			
		}
		else return ONE_WIRE_SENSOR_NOT_WORKING;
		
	}
	else return ONE_WIRE_SENSOR_NOT_WORKING;
1a000b32:	2400      	movs	r4, #0
1a000b34:	e002      	b.n	1a000b3c <oneWireSensorFillScratchpad+0x70>
				return ONE_WIRE_SENSOR_WORKING;
			}
			else return ONE_WIRE_SENSOR_NOT_WORKING;
			
		}
		else return ONE_WIRE_SENSOR_NOT_WORKING;
1a000b36:	2400      	movs	r4, #0
1a000b38:	e000      	b.n	1a000b3c <oneWireSensorFillScratchpad+0x70>
			oneWireSensor.scratchpad[SCRATCHPAD_CRC_BYTE] = oneWireSensorReadByte();
			/* Si el CRC calculado y el CRC del SCRATCHPAD son iguales, la lectura fue correcta */
			if(crc == oneWireSensor.scratchpad[SCRATCHPAD_CRC_BYTE]){
				return ONE_WIRE_SENSOR_WORKING;
			}
			else return ONE_WIRE_SENSOR_NOT_WORKING;
1a000b3a:	2400      	movs	r4, #0
		else return ONE_WIRE_SENSOR_NOT_WORKING;
		
	}
	else return ONE_WIRE_SENSOR_NOT_WORKING;
	
}
1a000b3c:	4620      	mov	r0, r4
1a000b3e:	bd70      	pop	{r4, r5, r6, pc}
1a000b40:	10000ab8 	.word	0x10000ab8

1a000b44 <oneWireSensorReadTempValue>:

float oneWireSensorReadTempValue(){
	/* Retorno del calculo de temperatura */
	return (float) ( ( ( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_MSB]&0x0f ) <<4 )
1a000b44:	4a0b      	ldr	r2, [pc, #44]	; (1a000b74 <oneWireSensorReadTempValue+0x30>)
1a000b46:	7b93      	ldrb	r3, [r2, #14]
1a000b48:	011b      	lsls	r3, r3, #4
1a000b4a:	b2db      	uxtb	r3, r3
						+ (( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_LSB]&0xf0 ) >>4) ) +
1a000b4c:	7b51      	ldrb	r1, [r2, #13]
1a000b4e:	eb03 1311 	add.w	r3, r3, r1, lsr #4
	
}

float oneWireSensorReadTempValue(){
	/* Retorno del calculo de temperatura */
	return (float) ( ( ( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_MSB]&0x0f ) <<4 )
1a000b52:	ee07 3a90 	vmov	s15, r3
1a000b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						+ (( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_LSB]&0xf0 ) >>4) ) +
								(float)( ( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_LSB]&oneWireSensor.operation.mask )*
1a000b5a:	7a93      	ldrb	r3, [r2, #10]
1a000b5c:	400b      	ands	r3, r1
1a000b5e:	ee00 3a10 	vmov	s0, r3
						oneWireSensor.operation.step );
1a000b62:	ed92 7a01 	vldr	s14, [r2, #4]

float oneWireSensorReadTempValue(){
	/* Retorno del calculo de temperatura */
	return (float) ( ( ( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_MSB]&0x0f ) <<4 )
						+ (( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_LSB]&0xf0 ) >>4) ) +
								(float)( ( oneWireSensor.scratchpad[SCRATCHPAD_TEMPERATURE_LSB]&oneWireSensor.operation.mask )*
1a000b66:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
1a000b6a:	ee20 0a07 	vmul.f32	s0, s0, s14
						oneWireSensor.operation.step );
}
1a000b6e:	ee37 0a80 	vadd.f32	s0, s15, s0
1a000b72:	4770      	bx	lr
1a000b74:	10000ab8 	.word	0x10000ab8

1a000b78 <getResponse>:
* @fn static gprsError_t gprsGetResponse()
* @brief Obtencion de la respuesta a un comando por parte del modulo GPRS
* @return GPRS_WORKING si la respuesta recibida es la esperada, GPRS_NOT_WORKING caso contrario.
* @note static
*/
static gprsError_t getResponse(){
1a000b78:	b530      	push	{r4, r5, lr}
1a000b7a:	b089      	sub	sp, #36	; 0x24
   uint8_t index = 0;                              /** index : Indice actual dentro del buffer de la respuesta esperada */
   uint8_t byteReceived;                           /** byteReceived : Byte recibido */
   delay_t gprsDelay;                              /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS */
   gprsError_t moduleResponse = GPRS_NOT_WORKING;  /** moduleResponse : Estado de funcionamiento del modulo GPRS */
   /* Inicializacion del delay */
   delayInit(&gprsDelay, GPRS_DELAY);
1a000b7c:	4668      	mov	r0, sp
1a000b7e:	f241 3288 	movw	r2, #5000	; 0x1388
1a000b82:	2300      	movs	r3, #0
1a000b84:	f000 fc52 	bl	1a00142c <delayInit>
*/
static gprsError_t getResponse(){
   uint8_t index = 0;                              /** index : Indice actual dentro del buffer de la respuesta esperada */
   uint8_t byteReceived;                           /** byteReceived : Byte recibido */
   delay_t gprsDelay;                              /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS */
   gprsError_t moduleResponse = GPRS_NOT_WORKING;  /** moduleResponse : Estado de funcionamiento del modulo GPRS */
1a000b88:	2500      	movs	r5, #0
* @brief Obtencion de la respuesta a un comando por parte del modulo GPRS
* @return GPRS_WORKING si la respuesta recibida es la esperada, GPRS_NOT_WORKING caso contrario.
* @note static
*/
static gprsError_t getResponse(){
   uint8_t index = 0;                              /** index : Indice actual dentro del buffer de la respuesta esperada */
1a000b8a:	462c      	mov	r4, r5
   delay_t gprsDelay;                              /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS */
   gprsError_t moduleResponse = GPRS_NOT_WORKING;  /** moduleResponse : Estado de funcionamiento del modulo GPRS */
   /* Inicializacion del delay */
   delayInit(&gprsDelay, GPRS_DELAY);
   /* Mientras el delay no expire y no se reciba la respuesta esperada */
   while (!delayRead(&gprsDelay) && GPRS_NOT_WORKING == moduleResponse){
1a000b8c:	e017      	b.n	1a000bbe <getResponse+0x46>
      /* Si se recibio un caracter por la UART del GPRS */
      if(uartReadByte(gprs.gprsUart, &byteReceived)){
1a000b8e:	4b10      	ldr	r3, [pc, #64]	; (1a000bd0 <getResponse+0x58>)
1a000b90:	7818      	ldrb	r0, [r3, #0]
1a000b92:	f10d 011f 	add.w	r1, sp, #31
1a000b96:	f000 fbb5 	bl	1a001304 <uartReadByte>
1a000b9a:	b180      	cbz	r0, 1a000bbe <getResponse+0x46>
         /* Si el caracter recibido coincide con el caracter esperado */
         if (byteReceived == gprs.responseToWait[index]){
1a000b9c:	4b0c      	ldr	r3, [pc, #48]	; (1a000bd0 <getResponse+0x58>)
1a000b9e:	4423      	add	r3, r4
1a000ba0:	785a      	ldrb	r2, [r3, #1]
1a000ba2:	f89d 301f 	ldrb.w	r3, [sp, #31]
1a000ba6:	429a      	cmp	r2, r3
1a000ba8:	d106      	bne.n	1a000bb8 <getResponse+0x40>
             /* Se aumenta en uno el indice para obtener el siguiente caracter esperado */
            index++;
1a000baa:	3401      	adds	r4, #1
1a000bac:	b2e4      	uxtb	r4, r4
            /* Si se llego al final de la respuesta esperada es porque se recibio la respuesta esperada de forma correcta */
            if (gprs.responseToWait[index] == '\0'){
1a000bae:	4b08      	ldr	r3, [pc, #32]	; (1a000bd0 <getResponse+0x58>)
1a000bb0:	4423      	add	r3, r4
1a000bb2:	785b      	ldrb	r3, [r3, #1]
1a000bb4:	b113      	cbz	r3, 1a000bbc <getResponse+0x44>
1a000bb6:	e002      	b.n	1a000bbe <getResponse+0x46>
               moduleResponse = GPRS_WORKING;
            }
         } 
         else { /* Si el caracter recibido no coincide con el caracter esperado */
            /* Se reinicia el indice para comenzar de nuevo */
            index = 0;
1a000bb8:	2400      	movs	r4, #0
1a000bba:	e000      	b.n	1a000bbe <getResponse+0x46>
             /* Se aumenta en uno el indice para obtener el siguiente caracter esperado */
            index++;
            /* Si se llego al final de la respuesta esperada es porque se recibio la respuesta esperada de forma correcta */
            if (gprs.responseToWait[index] == '\0'){
               /* Se setea el valor de retorno como GPRS en funcionamiento */
               moduleResponse = GPRS_WORKING;
1a000bbc:	2501      	movs	r5, #1
   delay_t gprsDelay;                              /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS */
   gprsError_t moduleResponse = GPRS_NOT_WORKING;  /** moduleResponse : Estado de funcionamiento del modulo GPRS */
   /* Inicializacion del delay */
   delayInit(&gprsDelay, GPRS_DELAY);
   /* Mientras el delay no expire y no se reciba la respuesta esperada */
   while (!delayRead(&gprsDelay) && GPRS_NOT_WORKING == moduleResponse){
1a000bbe:	4668      	mov	r0, sp
1a000bc0:	f000 fc44 	bl	1a00144c <delayRead>
1a000bc4:	b908      	cbnz	r0, 1a000bca <getResponse+0x52>
1a000bc6:	2d00      	cmp	r5, #0
1a000bc8:	d0e1      	beq.n	1a000b8e <getResponse+0x16>
         }
      }
   }
   /* Sse retorna GPRS_NOT_WORKING si no se encontro la respuesta esperada y GPRS_WORKING en caso contrario */
   return moduleResponse;
}
1a000bca:	4628      	mov	r0, r5
1a000bcc:	b009      	add	sp, #36	; 0x24
1a000bce:	bd30      	pop	{r4, r5, pc}
1a000bd0:	10000ad0 	.word	0x10000ad0

1a000bd4 <gprsInit>:
/*==================[external functions definition]==========================*/
gprsError_t gprsInit(uartMap_t gprsUart){
1a000bd4:	b570      	push	{r4, r5, r6, lr}
1a000bd6:	4605      	mov	r5, r0
   /* Se setea la UART a utilizar por el GPRS */
   gprs.gprsUart = gprsUart;
1a000bd8:	4e0a      	ldr	r6, [pc, #40]	; (1a000c04 <gprsInit+0x30>)
1a000bda:	4634      	mov	r4, r6
1a000bdc:	f804 0b01 	strb.w	r0, [r4], #1
   uartInit(gprsUart, 115200);
1a000be0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000be4:	f000 fb50 	bl	1a001288 <uartInit>
   /* Copiar al buffer de respuesta esperada la respuesta OK */
   strcpy(gprs.responseToWait, responseOK);
1a000be8:	4b07      	ldr	r3, [pc, #28]	; (1a000c08 <gprsInit+0x34>)
1a000bea:	881a      	ldrh	r2, [r3, #0]
1a000bec:	789b      	ldrb	r3, [r3, #2]
1a000bee:	f8a6 2001 	strh.w	r2, [r6, #1]
1a000bf2:	70a3      	strb	r3, [r4, #2]
   /* Enviar el comando AT */
   uartWriteString(gprsUart, AT);
1a000bf4:	4628      	mov	r0, r5
1a000bf6:	4905      	ldr	r1, [pc, #20]	; (1a000c0c <gprsInit+0x38>)
1a000bf8:	f000 fba0 	bl	1a00133c <uartWriteString>
   /* Retornar el estado de funcionamiento del modulo GPRS de acuerdo a si se recibio o no la respuesta esperada */
   return getResponse();
1a000bfc:	f7ff ffbc 	bl	1a000b78 <getResponse>
}
1a000c00:	bd70      	pop	{r4, r5, r6, pc}
1a000c02:	bf00      	nop
1a000c04:	10000ad0 	.word	0x10000ad0
1a000c08:	1a0073a8 	.word	0x1a0073a8
1a000c0c:	1a007364 	.word	0x1a007364

1a000c10 <gprsSendSMS>:


gprsError_t gprsSendSMS(char *sms, char *cellNumber){
1a000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000c12:	4607      	mov	r7, r0
1a000c14:	460e      	mov	r6, r1
   gprsError_t error;      /** error : Estado de funcionamiento del modulo GPRS */
   /* Reiniciar el buffer de respuesta esperada */
   memset(gprs.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a000c16:	4c27      	ldr	r4, [pc, #156]	; (1a000cb4 <gprsSendSMS+0xa4>)
1a000c18:	1c65      	adds	r5, r4, #1
1a000c1a:	4628      	mov	r0, r5
1a000c1c:	2100      	movs	r1, #0
1a000c1e:	220f      	movs	r2, #15
1a000c20:	f002 fd62 	bl	1a0036e8 <memset>
   /* Copiar al buffer de respuesta esperada la respuesta OK */
   strcpy(gprs.responseToWait, responseOK);
1a000c24:	4b24      	ldr	r3, [pc, #144]	; (1a000cb8 <gprsSendSMS+0xa8>)
1a000c26:	881a      	ldrh	r2, [r3, #0]
1a000c28:	789b      	ldrb	r3, [r3, #2]
1a000c2a:	f8a4 2001 	strh.w	r2, [r4, #1]
1a000c2e:	70e3      	strb	r3, [r4, #3]
   /* Enviar el comando de seteo de modo de texto */
   uartWriteString(gprs.gprsUart, ATCMGF);
1a000c30:	7820      	ldrb	r0, [r4, #0]
1a000c32:	4922      	ldr	r1, [pc, #136]	; (1a000cbc <gprsSendSMS+0xac>)
1a000c34:	f000 fb82 	bl	1a00133c <uartWriteString>
   /* Obtener el estado de funcionamiento del modulo GPRS de acuerdo a si se recibio o no la respuesta esperada */
   error = getResponse();
1a000c38:	f7ff ff9e 	bl	1a000b78 <getResponse>
   /* Si el modulo GPRS funciona correctamente */
   if(GPRS_WORKING == error){
1a000c3c:	2801      	cmp	r0, #1
1a000c3e:	d137      	bne.n	1a000cb0 <gprsSendSMS+0xa0>
      delay(100);
1a000c40:	2064      	movs	r0, #100	; 0x64
1a000c42:	2100      	movs	r1, #0
1a000c44:	f000 fbd6 	bl	1a0013f4 <delay>
      /* Enviar el comando de envio de SMS con el indice del numero de celular indicado*/
      uartWriteString(gprs.gprsUart, ATCMGS);
1a000c48:	7820      	ldrb	r0, [r4, #0]
1a000c4a:	491d      	ldr	r1, [pc, #116]	; (1a000cc0 <gprsSendSMS+0xb0>)
1a000c4c:	f000 fb76 	bl	1a00133c <uartWriteString>
      uartWriteString(gprs.gprsUart, cellNumber);
1a000c50:	7820      	ldrb	r0, [r4, #0]
1a000c52:	4631      	mov	r1, r6
1a000c54:	f000 fb72 	bl	1a00133c <uartWriteString>
      uartWriteString(gprs.gprsUart, "\"\r\n");
1a000c58:	4625      	mov	r5, r4
1a000c5a:	f815 0b01 	ldrb.w	r0, [r5], #1
1a000c5e:	4919      	ldr	r1, [pc, #100]	; (1a000cc4 <gprsSendSMS+0xb4>)
1a000c60:	f000 fb6c 	bl	1a00133c <uartWriteString>
      /* Reiniciar el buffer de respuesta esperada */
      memset(gprs.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a000c64:	4628      	mov	r0, r5
1a000c66:	2100      	movs	r1, #0
1a000c68:	220f      	movs	r2, #15
1a000c6a:	f002 fd3d 	bl	1a0036e8 <memset>
      /* Copiar al buffer de respuesta esperada el caracter '>' */
      strcpy(gprs.responseToWait, ">");
1a000c6e:	4b16      	ldr	r3, [pc, #88]	; (1a000cc8 <gprsSendSMS+0xb8>)
1a000c70:	881b      	ldrh	r3, [r3, #0]
1a000c72:	f8a4 3001 	strh.w	r3, [r4, #1]
      /* Obtener el estado de funcionamiento del modulo GPRS de acuerdo a si se recibio o no la respuesta esperada */
      error = getResponse();
1a000c76:	f7ff ff7f 	bl	1a000b78 <getResponse>
      /* Si el modulo GPRS funciona correctamente */
      if(GPRS_WORKING == error){
1a000c7a:	2801      	cmp	r0, #1
1a000c7c:	d118      	bne.n	1a000cb0 <gprsSendSMS+0xa0>
         /* Reiniciar el buffer de respuesta esperada */
         memset(gprs.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a000c7e:	4628      	mov	r0, r5
1a000c80:	2100      	movs	r1, #0
1a000c82:	220f      	movs	r2, #15
1a000c84:	f002 fd30 	bl	1a0036e8 <memset>
         /* Copiar al buffer de respuesta esperada la respuesta OK */
         strcpy(gprs.responseToWait, responseOK);
1a000c88:	4b0b      	ldr	r3, [pc, #44]	; (1a000cb8 <gprsSendSMS+0xa8>)
1a000c8a:	881a      	ldrh	r2, [r3, #0]
1a000c8c:	789b      	ldrb	r3, [r3, #2]
1a000c8e:	f8a4 2001 	strh.w	r2, [r4, #1]
1a000c92:	70ab      	strb	r3, [r5, #2]
         /* Enviar por UART el SMS indicado */
         uartWriteString(gprs.gprsUart, sms);
1a000c94:	7820      	ldrb	r0, [r4, #0]
1a000c96:	4639      	mov	r1, r7
1a000c98:	f000 fb50 	bl	1a00133c <uartWriteString>
         /* Enviar por UART el Delimitador de Fin de SMS */
         uartWriteByte(gprs.gprsUart, GPRS_END_OF_SMS);
1a000c9c:	7820      	ldrb	r0, [r4, #0]
1a000c9e:	211a      	movs	r1, #26
1a000ca0:	f000 fb3e 	bl	1a001320 <uartWriteByte>
         delay(200);
1a000ca4:	20c8      	movs	r0, #200	; 0xc8
1a000ca6:	2100      	movs	r1, #0
1a000ca8:	f000 fba4 	bl	1a0013f4 <delay>
         /* Obtener el estado de funcionamiento del modulo GPRS de acuerdo a si se recibio o no la respuesta esperada */
         error = getResponse();
1a000cac:	f7ff ff64 	bl	1a000b78 <getResponse>
      }
   }
   return error;   
}
1a000cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000cb2:	bf00      	nop
1a000cb4:	10000ad0 	.word	0x10000ad0
1a000cb8:	1a0073a8 	.word	0x1a0073a8
1a000cbc:	1a0075a8 	.word	0x1a0075a8
1a000cc0:	1a0075b4 	.word	0x1a0075b4
1a000cc4:	1a0073a4 	.word	0x1a0073a4
1a000cc8:	1a0073ec 	.word	0x1a0073ec

1a000ccc <gprsGetSignal>:

uint8_t gprsGetSignal(){
1a000ccc:	b530      	push	{r4, r5, lr}
1a000cce:	b089      	sub	sp, #36	; 0x24
   delay_t gprsDelay;                  /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS*/
   uint8_t signal = 0;                 /** signal : Valor de señal recibido*/
   uint8_t byteReceived = ' ';         /** byteReceived : Byte recibido*/
1a000cd0:	2320      	movs	r3, #32
1a000cd2:	f88d 3007 	strb.w	r3, [sp, #7]
   uint8_t pow = 10;                   /** pow : Multiplicador del caracter del valor de señal recibido en cada instante */
   gprsError_t error;                  /** error : Estado de funcionamiento del modulo GPRS */

   /* Reiniciar el buffer de respuesta esperada */
   memset(gprs.responseToWait, 0, RESPONSE_TO_WAIT_LENGTH );
1a000cd6:	4c23      	ldr	r4, [pc, #140]	; (1a000d64 <gprsGetSignal+0x98>)
1a000cd8:	1c60      	adds	r0, r4, #1
1a000cda:	2100      	movs	r1, #0
1a000cdc:	220f      	movs	r2, #15
1a000cde:	f002 fd03 	bl	1a0036e8 <memset>
   /* Copar al buffer de respuesta esperada el caracter ':' */
   strcpy(gprs.responseToWait, ":");
1a000ce2:	4b21      	ldr	r3, [pc, #132]	; (1a000d68 <gprsGetSignal+0x9c>)
1a000ce4:	881b      	ldrh	r3, [r3, #0]
1a000ce6:	f8a4 3001 	strh.w	r3, [r4, #1]
   /* Enviar por UART el comando de obtencion de señal del modulo GPRS */
   uartWriteString(gprs.gprsUart, ATCSQ);
1a000cea:	7820      	ldrb	r0, [r4, #0]
1a000cec:	491f      	ldr	r1, [pc, #124]	; (1a000d6c <gprsGetSignal+0xa0>)
1a000cee:	f000 fb25 	bl	1a00133c <uartWriteString>
   /* Obtener el estado de funcionamiento del modulo GPRS de acuerdo a si se recibio o no la respuesta esperada */
   error = getResponse();
1a000cf2:	f7ff ff41 	bl	1a000b78 <getResponse>
   /* Si el modulo GPRS funciona correctamente */
   if(GPRS_WORKING == error){
1a000cf6:	2801      	cmp	r0, #1
1a000cf8:	d125      	bne.n	1a000d46 <gprsGetSignal+0x7a>
      /* Inicializacion del delay */
      delayInit(&gprsDelay, GPRS_DELAY);
1a000cfa:	a802      	add	r0, sp, #8
1a000cfc:	f241 3288 	movw	r2, #5000	; 0x1388
1a000d00:	2300      	movs	r3, #0
1a000d02:	f000 fb93 	bl	1a00142c <delayInit>

uint8_t gprsGetSignal(){
   delay_t gprsDelay;                  /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS*/
   uint8_t signal = 0;                 /** signal : Valor de señal recibido*/
   uint8_t byteReceived = ' ';         /** byteReceived : Byte recibido*/
   uint8_t pow = 10;                   /** pow : Multiplicador del caracter del valor de señal recibido en cada instante */
1a000d06:	250a      	movs	r5, #10
   return error;   
}

uint8_t gprsGetSignal(){
   delay_t gprsDelay;                  /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS*/
   uint8_t signal = 0;                 /** signal : Valor de señal recibido*/
1a000d08:	2400      	movs	r4, #0
   /* Si el modulo GPRS funciona correctamente */
   if(GPRS_WORKING == error){
      /* Inicializacion del delay */
      delayInit(&gprsDelay, GPRS_DELAY);
      /* Mientras el delay no expire y no se reciba el caracter esperado (',') */
      while (!delayRead(&gprsDelay) && byteReceived != ',') {
1a000d0a:	e013      	b.n	1a000d34 <gprsGetSignal+0x68>
         /* Si se recibio un caracter */
         if(uartReadByte(gprs.gprsUart, &byteReceived)) {
1a000d0c:	4b15      	ldr	r3, [pc, #84]	; (1a000d64 <gprsGetSignal+0x98>)
1a000d0e:	7818      	ldrb	r0, [r3, #0]
1a000d10:	f10d 0107 	add.w	r1, sp, #7
1a000d14:	f000 faf6 	bl	1a001304 <uartReadByte>
1a000d18:	b160      	cbz	r0, 1a000d34 <gprsGetSignal+0x68>
            /* Si el caracter recibido es un digito entre 0 y 9 */
            if (byteReceived >= '0' && byteReceived <= '9') {
1a000d1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000d1e:	3b30      	subs	r3, #48	; 0x30
1a000d20:	b2db      	uxtb	r3, r3
1a000d22:	2b09      	cmp	r3, #9
1a000d24:	d806      	bhi.n	1a000d34 <gprsGetSignal+0x68>
               /* Se setea la señal */
               signal += (charToInt(byteReceived)*pow);
1a000d26:	fb05 4403 	mla	r4, r5, r3, r4
1a000d2a:	b2e4      	uxtb	r4, r4
               /* Se divide el multiplicador */
               pow/=10;
1a000d2c:	4b10      	ldr	r3, [pc, #64]	; (1a000d70 <gprsGetSignal+0xa4>)
1a000d2e:	fba3 2305 	umull	r2, r3, r3, r5
1a000d32:	08dd      	lsrs	r5, r3, #3
   /* Si el modulo GPRS funciona correctamente */
   if(GPRS_WORKING == error){
      /* Inicializacion del delay */
      delayInit(&gprsDelay, GPRS_DELAY);
      /* Mientras el delay no expire y no se reciba el caracter esperado (',') */
      while (!delayRead(&gprsDelay) && byteReceived != ',') {
1a000d34:	a802      	add	r0, sp, #8
1a000d36:	f000 fb89 	bl	1a00144c <delayRead>
1a000d3a:	b928      	cbnz	r0, 1a000d48 <gprsGetSignal+0x7c>
1a000d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000d40:	2b2c      	cmp	r3, #44	; 0x2c
1a000d42:	d1e3      	bne.n	1a000d0c <gprsGetSignal+0x40>
1a000d44:	e000      	b.n	1a000d48 <gprsGetSignal+0x7c>
   return error;   
}

uint8_t gprsGetSignal(){
   delay_t gprsDelay;                  /** gprsDelay : Tiempo de espera de la respuesta por parte del modulo GPRS*/
   uint8_t signal = 0;                 /** signal : Valor de señal recibido*/
1a000d46:	2400      	movs	r4, #0
            }
         }
      }
   }
   /* Si se recibio el caracter ',' significa que la señal se recibio correctamente */
   if(byteReceived == ','){
1a000d48:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000d4c:	2b2c      	cmp	r3, #44	; 0x2c
1a000d4e:	d105      	bne.n	1a000d5c <gprsGetSignal+0x90>
      /* Se hace el calculo de la señal a dbm */
      return MIN_SIGNAL_IN_DBM - (signal - 2)*2;  /* Notar que lo devuelve positivo, cuando en realidad es negativo */
1a000d50:	f1c4 0002 	rsb	r0, r4, #2
1a000d54:	0040      	lsls	r0, r0, #1
1a000d56:	306d      	adds	r0, #109	; 0x6d
1a000d58:	b2c0      	uxtb	r0, r0
1a000d5a:	e000      	b.n	1a000d5e <gprsGetSignal+0x92>
   }
   else{
      /* Si no se recibio el caracter ',', hubo un error al obtener la señal y se devuelve que el GPRS no funciona correctamente */
      return GPRS_NOT_WORKING; 
1a000d5c:	2000      	movs	r0, #0
   }

}
1a000d5e:	b009      	add	sp, #36	; 0x24
1a000d60:	bd30      	pop	{r4, r5, pc}
1a000d62:	bf00      	nop
1a000d64:	10000ad0 	.word	0x10000ad0
1a000d68:	1a0075c0 	.word	0x1a0075c0
1a000d6c:	1a0075c4 	.word	0x1a0075c4
1a000d70:	cccccccd 	.word	0xcccccccd

1a000d74 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000d74:	4b04      	ldr	r3, [pc, #16]	; (1a000d88 <cyclesCounterInit+0x14>)
1a000d76:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000d78:	4b04      	ldr	r3, [pc, #16]	; (1a000d8c <cyclesCounterInit+0x18>)
1a000d7a:	681a      	ldr	r2, [r3, #0]
1a000d7c:	6813      	ldr	r3, [r2, #0]
1a000d7e:	f043 0301 	orr.w	r3, r3, #1
1a000d82:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000d84:	2001      	movs	r0, #1
1a000d86:	4770      	bx	lr
1a000d88:	10000004 	.word	0x10000004
1a000d8c:	10000000 	.word	0x10000000

1a000d90 <int64ToString>:
// C++ version 0.4 char* style "itoa":
// Written by Luk�s Chmela
// Released under GPLv3.
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a000d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000d94:	4615      	mov	r5, r2
1a000d96:	4699      	mov	r9, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a000d98:	3b02      	subs	r3, #2
1a000d9a:	b2db      	uxtb	r3, r3
1a000d9c:	2b22      	cmp	r3, #34	; 0x22
1a000d9e:	d903      	bls.n	1a000da8 <int64ToString+0x18>
      *result = '\0';
1a000da0:	2000      	movs	r0, #0
1a000da2:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a000da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000da8:	4606      	mov	r6, r0
1a000daa:	460f      	mov	r7, r1
1a000dac:	4690      	mov	r8, r2
1a000dae:	e002      	b.n	1a000db6 <int64ToString+0x26>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a000db0:	46f0      	mov	r8, lr
   char* ptr = result, *ptr1 = result, tmp_char;
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
1a000db2:	4606      	mov	r6, r0
1a000db4:	460f      	mov	r7, r1
1a000db6:	4630      	mov	r0, r6
1a000db8:	4639      	mov	r1, r7
1a000dba:	464a      	mov	r2, r9
1a000dbc:	2300      	movs	r3, #0
1a000dbe:	f001 fed5 	bl	1a002b6c <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a000dc2:	f108 0e01 	add.w	lr, r8, #1
1a000dc6:	fba9 2300 	umull	r2, r3, r9, r0
1a000dca:	1ab2      	subs	r2, r6, r2
1a000dcc:	4b12      	ldr	r3, [pc, #72]	; (1a000e18 <int64ToString+0x88>)
1a000dce:	441a      	add	r2, r3
1a000dd0:	7813      	ldrb	r3, [r2, #0]
1a000dd2:	f888 3000 	strb.w	r3, [r8]
   } while ( value );
1a000dd6:	ea50 0301 	orrs.w	r3, r0, r1
1a000dda:	d1e9      	bne.n	1a000db0 <int64ToString+0x20>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a000ddc:	2e00      	cmp	r6, #0
1a000dde:	f177 0300 	sbcs.w	r3, r7, #0
1a000de2:	da04      	bge.n	1a000dee <int64ToString+0x5e>
1a000de4:	f108 0e02 	add.w	lr, r8, #2
1a000de8:	232d      	movs	r3, #45	; 0x2d
1a000dea:	f888 3001 	strb.w	r3, [r8, #1]
   *ptr-- = '\0';
1a000dee:	f10e 33ff 	add.w	r3, lr, #4294967295
1a000df2:	2200      	movs	r2, #0
1a000df4:	f88e 2000 	strb.w	r2, [lr]
   while(ptr1 < ptr) {
1a000df8:	e009      	b.n	1a000e0e <int64ToString+0x7e>
      tmp_char = *ptr;
1a000dfa:	461a      	mov	r2, r3
1a000dfc:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a000e00:	4629      	mov	r1, r5
1a000e02:	f811 4b01 	ldrb.w	r4, [r1], #1
1a000e06:	701c      	strb	r4, [r3, #0]
      *ptr1++ = tmp_char;
1a000e08:	7028      	strb	r0, [r5, #0]
1a000e0a:	460d      	mov	r5, r1
   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
      tmp_char = *ptr;
      *ptr--= *ptr1;
1a000e0c:	4613      	mov	r3, r2
   } while ( value );

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
1a000e0e:	429d      	cmp	r5, r3
1a000e10:	d3f3      	bcc.n	1a000dfa <int64ToString+0x6a>
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return TRUE;
1a000e12:	2001      	movs	r0, #1
}
1a000e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000e18:	1a0075f3 	.word	0x1a0075f3

1a000e1c <intToString>:

   return result;
}

char* intToString( int64_t value )
{
1a000e1c:	b510      	push	{r4, lr}
   static char result[20];
   result[0] = 0;
1a000e1e:	4c04      	ldr	r4, [pc, #16]	; (1a000e30 <intToString+0x14>)
1a000e20:	2300      	movs	r3, #0
1a000e22:	7023      	strb	r3, [r4, #0]
   int64ToString( value, result, 10 );
1a000e24:	4622      	mov	r2, r4
1a000e26:	230a      	movs	r3, #10
1a000e28:	f7ff ffb2 	bl	1a000d90 <int64ToString>
   return result;
}
1a000e2c:	4620      	mov	r0, r4
1a000e2e:	bd10      	pop	{r4, pc}
1a000e30:	10000ae0 	.word	0x10000ae0

1a000e34 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a000e34:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a000e36:	4d09      	ldr	r5, [pc, #36]	; (1a000e5c <gpioObtainPinInit+0x28>)
1a000e38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000e3c:	182c      	adds	r4, r5, r0
1a000e3e:	5c28      	ldrb	r0, [r5, r0]
1a000e40:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a000e42:	7861      	ldrb	r1, [r4, #1]
1a000e44:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000e46:	78a2      	ldrb	r2, [r4, #2]
1a000e48:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000e4a:	78e2      	ldrb	r2, [r4, #3]
1a000e4c:	9b02      	ldr	r3, [sp, #8]
1a000e4e:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a000e50:	7922      	ldrb	r2, [r4, #4]
1a000e52:	9b03      	ldr	r3, [sp, #12]
1a000e54:	701a      	strb	r2, [r3, #0]
}
1a000e56:	bc30      	pop	{r4, r5}
1a000e58:	4770      	bx	lr
1a000e5a:	bf00      	nop
1a000e5c:	1a00762c 	.word	0x1a00762c

1a000e60 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000e60:	b570      	push	{r4, r5, r6, lr}
1a000e62:	b084      	sub	sp, #16
1a000e64:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000e66:	2300      	movs	r3, #0
1a000e68:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000e6c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000e70:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000e74:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000e78:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000e7c:	ab03      	add	r3, sp, #12
1a000e7e:	9300      	str	r3, [sp, #0]
1a000e80:	f10d 030b 	add.w	r3, sp, #11
1a000e84:	9301      	str	r3, [sp, #4]
1a000e86:	f10d 010f 	add.w	r1, sp, #15
1a000e8a:	f10d 020e 	add.w	r2, sp, #14
1a000e8e:	f10d 030d 	add.w	r3, sp, #13
1a000e92:	f7ff ffcf 	bl	1a000e34 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000e96:	2c05      	cmp	r4, #5
1a000e98:	f200 80a8 	bhi.w	1a000fec <gpioInit+0x18c>
1a000e9c:	e8df f004 	tbb	[pc, r4]
1a000ea0:	46278408 	.word	0x46278408
1a000ea4:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000ea6:	4853      	ldr	r0, [pc, #332]	; (1a000ff4 <gpioInit+0x194>)
1a000ea8:	f001 fa3c 	bl	1a002324 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a000eac:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a000eae:	e09e      	b.n	1a000fee <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a000eb0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000eb4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000eb8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000ebc:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000ec0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000ec4:	494c      	ldr	r1, [pc, #304]	; (1a000ff8 <gpioInit+0x198>)
1a000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000eca:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000ece:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000ed2:	2001      	movs	r0, #1
1a000ed4:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000ed8:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000ee0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000ee4:	ea22 0204 	bic.w	r2, r2, r4
1a000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000eec:	e07f      	b.n	1a000fee <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a000eee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000ef2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000ef6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000efa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000efe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000f02:	493d      	ldr	r1, [pc, #244]	; (1a000ff8 <gpioInit+0x198>)
1a000f04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000f08:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000f0c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000f10:	2001      	movs	r0, #1
1a000f12:	fa00 f402 	lsl.w	r4, r0, r2
1a000f16:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000f1e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000f22:	ea22 0204 	bic.w	r2, r2, r4
1a000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000f2a:	e060      	b.n	1a000fee <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a000f2c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000f30:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000f34:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000f38:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000f3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000f40:	492d      	ldr	r1, [pc, #180]	; (1a000ff8 <gpioInit+0x198>)
1a000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000f46:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000f4a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000f4e:	2001      	movs	r0, #1
1a000f50:	fa00 f402 	lsl.w	r4, r0, r2
1a000f54:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000f5c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000f60:	ea22 0204 	bic.w	r2, r2, r4
1a000f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000f68:	e041      	b.n	1a000fee <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a000f6a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000f6e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000f72:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000f76:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000f7a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000f7e:	491e      	ldr	r1, [pc, #120]	; (1a000ff8 <gpioInit+0x198>)
1a000f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000f84:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000f88:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000f8c:	2001      	movs	r0, #1
1a000f8e:	fa00 f402 	lsl.w	r4, r0, r2
1a000f92:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000f9a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000f9e:	ea22 0204 	bic.w	r2, r2, r4
1a000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000fa6:	e022      	b.n	1a000fee <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a000fa8:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000fac:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000fb0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000fb4:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000fb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000fbc:	490e      	ldr	r1, [pc, #56]	; (1a000ff8 <gpioInit+0x198>)
1a000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a000fc2:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a000fc6:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000fca:	b25a      	sxtb	r2, r3
1a000fcc:	2001      	movs	r0, #1
1a000fce:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a000fd2:	4a08      	ldr	r2, [pc, #32]	; (1a000ff4 <gpioInit+0x194>)
1a000fd4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000fd8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a000fdc:	4331      	orrs	r1, r6
1a000fde:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a000fe2:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a000fe6:	2100      	movs	r1, #0
1a000fe8:	54d1      	strb	r1, [r2, r3]
1a000fea:	e000      	b.n	1a000fee <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a000fec:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a000fee:	b004      	add	sp, #16
1a000ff0:	bd70      	pop	{r4, r5, r6, pc}
1a000ff2:	bf00      	nop
1a000ff4:	400f4000 	.word	0x400f4000
1a000ff8:	40086000 	.word	0x40086000

1a000ffc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a000ffc:	b510      	push	{r4, lr}
1a000ffe:	b084      	sub	sp, #16
1a001000:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001002:	2300      	movs	r3, #0
1a001004:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001008:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00100c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001010:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001014:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001018:	ab03      	add	r3, sp, #12
1a00101a:	9300      	str	r3, [sp, #0]
1a00101c:	f10d 030b 	add.w	r3, sp, #11
1a001020:	9301      	str	r3, [sp, #4]
1a001022:	f10d 010f 	add.w	r1, sp, #15
1a001026:	f10d 020e 	add.w	r2, sp, #14
1a00102a:	f10d 030d 	add.w	r3, sp, #13
1a00102e:	f7ff ff01 	bl	1a000e34 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001032:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a001036:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a00103a:	3400      	adds	r4, #0
1a00103c:	bf18      	it	ne
1a00103e:	2401      	movne	r4, #1
1a001040:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a001044:	4a02      	ldr	r2, [pc, #8]	; (1a001050 <gpioWrite+0x54>)
1a001046:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a001048:	2001      	movs	r0, #1
1a00104a:	b004      	add	sp, #16
1a00104c:	bd10      	pop	{r4, pc}
1a00104e:	bf00      	nop
1a001050:	400f4000 	.word	0x400f4000

1a001054 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a001054:	b500      	push	{lr}
1a001056:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001058:	2300      	movs	r3, #0
1a00105a:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00105e:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001062:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001066:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00106a:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00106e:	ab03      	add	r3, sp, #12
1a001070:	9300      	str	r3, [sp, #0]
1a001072:	f10d 030b 	add.w	r3, sp, #11
1a001076:	9301      	str	r3, [sp, #4]
1a001078:	f10d 010f 	add.w	r1, sp, #15
1a00107c:	f10d 020e 	add.w	r2, sp, #14
1a001080:	f10d 030d 	add.w	r3, sp, #13
1a001084:	f7ff fed6 	bl	1a000e34 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001088:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a00108c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a001090:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a001094:	4a04      	ldr	r2, [pc, #16]	; (1a0010a8 <gpioRead+0x54>)
1a001096:	5cd3      	ldrb	r3, [r2, r3]
1a001098:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a00109c:	bf14      	ite	ne
1a00109e:	2001      	movne	r0, #1
1a0010a0:	2000      	moveq	r0, #0
1a0010a2:	b005      	add	sp, #20
1a0010a4:	f85d fb04 	ldr.w	pc, [sp], #4
1a0010a8:	400f4000 	.word	0x400f4000

1a0010ac <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0010ac:	4b01      	ldr	r3, [pc, #4]	; (1a0010b4 <tickRead+0x8>)
1a0010ae:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0010b2:	4770      	bx	lr
1a0010b4:	10000b58 	.word	0x10000b58

1a0010b8 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0010b8:	b118      	cbz	r0, 1a0010c2 <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0010ba:	2207      	movs	r2, #7
1a0010bc:	4b03      	ldr	r3, [pc, #12]	; (1a0010cc <tickPowerSet+0x14>)
1a0010be:	601a      	str	r2, [r3, #0]
1a0010c0:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0010c2:	2200      	movs	r2, #0
1a0010c4:	4b01      	ldr	r3, [pc, #4]	; (1a0010cc <tickPowerSet+0x14>)
1a0010c6:	601a      	str	r2, [r3, #0]
1a0010c8:	4770      	bx	lr
1a0010ca:	bf00      	nop
1a0010cc:	e000e010 	.word	0xe000e010

1a0010d0 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0010d0:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0010d2:	ea50 0301 	orrs.w	r3, r0, r1
1a0010d6:	d104      	bne.n	1a0010e2 <tickInit+0x12>
         tickPowerSet( OFF );
1a0010d8:	2000      	movs	r0, #0
1a0010da:	f7ff ffed 	bl	1a0010b8 <tickPowerSet>
         ret_val = 0;
1a0010de:	2000      	movs	r0, #0
1a0010e0:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0010e2:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0010e6:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0010ea:	2b00      	cmp	r3, #0
1a0010ec:	bf08      	it	eq
1a0010ee:	2a32      	cmpeq	r2, #50	; 0x32
1a0010f0:	d222      	bcs.n	1a001138 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0010f2:	4b12      	ldr	r3, [pc, #72]	; (1a00113c <tickInit+0x6c>)
1a0010f4:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0010f8:	4b11      	ldr	r3, [pc, #68]	; (1a001140 <tickInit+0x70>)
1a0010fa:	681c      	ldr	r4, [r3, #0]
1a0010fc:	fba4 2300 	umull	r2, r3, r4, r0
1a001100:	fb04 3301 	mla	r3, r4, r1, r3
1a001104:	4610      	mov	r0, r2
1a001106:	4619      	mov	r1, r3
1a001108:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00110c:	2300      	movs	r3, #0
1a00110e:	f001 fd49 	bl	1a002ba4 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001112:	3801      	subs	r0, #1
1a001114:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001118:	d209      	bcs.n	1a00112e <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00111a:	4b0a      	ldr	r3, [pc, #40]	; (1a001144 <tickInit+0x74>)
1a00111c:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00111e:	21e0      	movs	r1, #224	; 0xe0
1a001120:	4a09      	ldr	r2, [pc, #36]	; (1a001148 <tickInit+0x78>)
1a001122:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001126:	2200      	movs	r2, #0
1a001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00112a:	2207      	movs	r2, #7
1a00112c:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a00112e:	2001      	movs	r0, #1
1a001130:	f7ff ffc2 	bl	1a0010b8 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a001134:	2001      	movs	r0, #1
1a001136:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a001138:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a00113a:	bd10      	pop	{r4, pc}
1a00113c:	10000b60 	.word	0x10000b60
1a001140:	10000b68 	.word	0x10000b68
1a001144:	e000e010 	.word	0xe000e010
1a001148:	e000ed00 	.word	0xe000ed00

1a00114c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00114c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00114e:	4908      	ldr	r1, [pc, #32]	; (1a001170 <SysTick_Handler+0x24>)
1a001150:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001154:	3201      	adds	r2, #1
1a001156:	f143 0300 	adc.w	r3, r3, #0
1a00115a:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00115e:	4b05      	ldr	r3, [pc, #20]	; (1a001174 <SysTick_Handler+0x28>)
1a001160:	681b      	ldr	r3, [r3, #0]
1a001162:	b123      	cbz	r3, 1a00116e <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001164:	4b03      	ldr	r3, [pc, #12]	; (1a001174 <SysTick_Handler+0x28>)
1a001166:	681b      	ldr	r3, [r3, #0]
1a001168:	4a03      	ldr	r2, [pc, #12]	; (1a001178 <SysTick_Handler+0x2c>)
1a00116a:	6810      	ldr	r0, [r2, #0]
1a00116c:	4798      	blx	r3
1a00116e:	bd08      	pop	{r3, pc}
1a001170:	10000b58 	.word	0x10000b58
1a001174:	10000af4 	.word	0x10000af4
1a001178:	10000af8 	.word	0x10000af8

1a00117c <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a00117c:	b538      	push	{r3, r4, r5, lr}
1a00117e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001180:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a001184:	009b      	lsls	r3, r3, #2
1a001186:	4a22      	ldr	r2, [pc, #136]	; (1a001210 <uartProcessIRQ+0x94>)
1a001188:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00118a:	695d      	ldr	r5, [r3, #20]
1a00118c:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a00118e:	f015 0f01 	tst.w	r5, #1
1a001192:	d019      	beq.n	1a0011c8 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001194:	b930      	cbnz	r0, 1a0011a4 <uartProcessIRQ+0x28>
1a001196:	4b1f      	ldr	r3, [pc, #124]	; (1a001214 <uartProcessIRQ+0x98>)
1a001198:	681b      	ldr	r3, [r3, #0]
1a00119a:	b11b      	cbz	r3, 1a0011a4 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a00119c:	4b1d      	ldr	r3, [pc, #116]	; (1a001214 <uartProcessIRQ+0x98>)
1a00119e:	681b      	ldr	r3, [r3, #0]
1a0011a0:	2000      	movs	r0, #0
1a0011a2:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0011a4:	2c03      	cmp	r4, #3
1a0011a6:	d106      	bne.n	1a0011b6 <uartProcessIRQ+0x3a>
1a0011a8:	4b1b      	ldr	r3, [pc, #108]	; (1a001218 <uartProcessIRQ+0x9c>)
1a0011aa:	681b      	ldr	r3, [r3, #0]
1a0011ac:	b11b      	cbz	r3, 1a0011b6 <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0011ae:	4b1a      	ldr	r3, [pc, #104]	; (1a001218 <uartProcessIRQ+0x9c>)
1a0011b0:	681b      	ldr	r3, [r3, #0]
1a0011b2:	2000      	movs	r0, #0
1a0011b4:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0011b6:	2c05      	cmp	r4, #5
1a0011b8:	d106      	bne.n	1a0011c8 <uartProcessIRQ+0x4c>
1a0011ba:	4b18      	ldr	r3, [pc, #96]	; (1a00121c <uartProcessIRQ+0xa0>)
1a0011bc:	681b      	ldr	r3, [r3, #0]
1a0011be:	b11b      	cbz	r3, 1a0011c8 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0011c0:	4b16      	ldr	r3, [pc, #88]	; (1a00121c <uartProcessIRQ+0xa0>)
1a0011c2:	681b      	ldr	r3, [r3, #0]
1a0011c4:	2000      	movs	r0, #0
1a0011c6:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0011c8:	f015 0f20 	tst.w	r5, #32
1a0011cc:	d01e      	beq.n	1a00120c <uartProcessIRQ+0x90>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0011ce:	4b14      	ldr	r3, [pc, #80]	; (1a001220 <uartProcessIRQ+0xa4>)
1a0011d0:	685b      	ldr	r3, [r3, #4]
1a0011d2:	f013 0f02 	tst.w	r3, #2
1a0011d6:	d019      	beq.n	1a00120c <uartProcessIRQ+0x90>
       ( Chip_UART_GetIntsEnabled(LPC_USART3) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0011d8:	b934      	cbnz	r4, 1a0011e8 <uartProcessIRQ+0x6c>
1a0011da:	4b12      	ldr	r3, [pc, #72]	; (1a001224 <uartProcessIRQ+0xa8>)
1a0011dc:	681b      	ldr	r3, [r3, #0]
1a0011de:	b11b      	cbz	r3, 1a0011e8 <uartProcessIRQ+0x6c>
         (*txIsrCallbackUART0)(0);
1a0011e0:	4b10      	ldr	r3, [pc, #64]	; (1a001224 <uartProcessIRQ+0xa8>)
1a0011e2:	681b      	ldr	r3, [r3, #0]
1a0011e4:	2000      	movs	r0, #0
1a0011e6:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0011e8:	2c03      	cmp	r4, #3
1a0011ea:	d106      	bne.n	1a0011fa <uartProcessIRQ+0x7e>
1a0011ec:	4b0e      	ldr	r3, [pc, #56]	; (1a001228 <uartProcessIRQ+0xac>)
1a0011ee:	681b      	ldr	r3, [r3, #0]
1a0011f0:	b11b      	cbz	r3, 1a0011fa <uartProcessIRQ+0x7e>
         (*txIsrCallbackUART2)(0);
1a0011f2:	4b0d      	ldr	r3, [pc, #52]	; (1a001228 <uartProcessIRQ+0xac>)
1a0011f4:	681b      	ldr	r3, [r3, #0]
1a0011f6:	2000      	movs	r0, #0
1a0011f8:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0011fa:	2c05      	cmp	r4, #5
1a0011fc:	d106      	bne.n	1a00120c <uartProcessIRQ+0x90>
1a0011fe:	4b0b      	ldr	r3, [pc, #44]	; (1a00122c <uartProcessIRQ+0xb0>)
1a001200:	681b      	ldr	r3, [r3, #0]
1a001202:	b11b      	cbz	r3, 1a00120c <uartProcessIRQ+0x90>
         (*txIsrCallbackUART3)(0);
1a001204:	4b09      	ldr	r3, [pc, #36]	; (1a00122c <uartProcessIRQ+0xb0>)
1a001206:	681b      	ldr	r3, [r3, #0]
1a001208:	2000      	movs	r0, #0
1a00120a:	4798      	blx	r3
1a00120c:	bd38      	pop	{r3, r4, r5, pc}
1a00120e:	bf00      	nop
1a001210:	1a007764 	.word	0x1a007764
1a001214:	10000afc 	.word	0x10000afc
1a001218:	10000b0c 	.word	0x10000b0c
1a00121c:	10000b10 	.word	0x10000b10
1a001220:	400c2000 	.word	0x400c2000
1a001224:	10000b00 	.word	0x10000b00
1a001228:	10000b04 	.word	0x10000b04
1a00122c:	10000b08 	.word	0x10000b08

1a001230 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001230:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001234:	0080      	lsls	r0, r0, #2
1a001236:	4b03      	ldr	r3, [pc, #12]	; (1a001244 <uartRxReady+0x14>)
1a001238:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00123a:	6958      	ldr	r0, [r3, #20]
}
1a00123c:	f000 0001 	and.w	r0, r0, #1
1a001240:	4770      	bx	lr
1a001242:	bf00      	nop
1a001244:	1a007764 	.word	0x1a007764

1a001248 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001248:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00124c:	0080      	lsls	r0, r0, #2
1a00124e:	4b03      	ldr	r3, [pc, #12]	; (1a00125c <uartTxReady+0x14>)
1a001250:	581b      	ldr	r3, [r3, r0]
1a001252:	6958      	ldr	r0, [r3, #20]
}
1a001254:	f000 0020 	and.w	r0, r0, #32
1a001258:	4770      	bx	lr
1a00125a:	bf00      	nop
1a00125c:	1a007764 	.word	0x1a007764

1a001260 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001260:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001264:	0080      	lsls	r0, r0, #2
1a001266:	4b02      	ldr	r3, [pc, #8]	; (1a001270 <uartRxRead+0x10>)
1a001268:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00126a:	6818      	ldr	r0, [r3, #0]
}
1a00126c:	b2c0      	uxtb	r0, r0
1a00126e:	4770      	bx	lr
1a001270:	1a007764 	.word	0x1a007764

1a001274 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001274:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001278:	0080      	lsls	r0, r0, #2
1a00127a:	4b02      	ldr	r3, [pc, #8]	; (1a001284 <uartTxWrite+0x10>)
1a00127c:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00127e:	6019      	str	r1, [r3, #0]
1a001280:	4770      	bx	lr
1a001282:	bf00      	nop
1a001284:	1a007764 	.word	0x1a007764

1a001288 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00128c:	4607      	mov	r7, r0
1a00128e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001290:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a001300 <uartInit+0x78>
1a001294:	0044      	lsls	r4, r0, #1
1a001296:	1823      	adds	r3, r4, r0
1a001298:	009b      	lsls	r3, r3, #2
1a00129a:	eb08 0503 	add.w	r5, r8, r3
1a00129e:	f858 6003 	ldr.w	r6, [r8, r3]
1a0012a2:	4630      	mov	r0, r6
1a0012a4:	f000 fb98 	bl	1a0019d8 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0012a8:	4630      	mov	r0, r6
1a0012aa:	4649      	mov	r1, r9
1a0012ac:	f000 fbbe 	bl	1a001a2c <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0012b0:	23c7      	movs	r3, #199	; 0xc7
1a0012b2:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0012b4:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0012b6:	2301      	movs	r3, #1
1a0012b8:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0012ba:	7929      	ldrb	r1, [r5, #4]
1a0012bc:	796b      	ldrb	r3, [r5, #5]
1a0012be:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0012c0:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012c4:	480c      	ldr	r0, [pc, #48]	; (1a0012f8 <uartInit+0x70>)
1a0012c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0012ce:	79ee      	ldrb	r6, [r5, #7]
1a0012d0:	7a2a      	ldrb	r2, [r5, #8]
1a0012d2:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0012d4:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012d8:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a0012dc:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0012e0:	2f01      	cmp	r7, #1
1a0012e2:	d107      	bne.n	1a0012f4 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0012e4:	4a05      	ldr	r2, [pc, #20]	; (1a0012fc <uartInit+0x74>)
1a0012e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0012e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0012ee:	221a      	movs	r2, #26
1a0012f0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a0012f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0012f8:	40086000 	.word	0x40086000
1a0012fc:	40081000 	.word	0x40081000
1a001300:	1a007764 	.word	0x1a007764

1a001304 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a001304:	b538      	push	{r3, r4, r5, lr}
1a001306:	4605      	mov	r5, r0
1a001308:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a00130a:	f7ff ff91 	bl	1a001230 <uartRxReady>
1a00130e:	b128      	cbz	r0, 1a00131c <uartReadByte+0x18>
      *receivedByte = uartRxRead(uart);
1a001310:	4628      	mov	r0, r5
1a001312:	f7ff ffa5 	bl	1a001260 <uartRxRead>
1a001316:	7020      	strb	r0, [r4, #0]
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
   bool_t retVal = TRUE;
1a001318:	2001      	movs	r0, #1
1a00131a:	bd38      	pop	{r3, r4, r5, pc}
   if ( uartRxReady(uart) ) {
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
1a00131c:	2000      	movs	r0, #0
   }
   return retVal;
}
1a00131e:	bd38      	pop	{r3, r4, r5, pc}

1a001320 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001320:	b538      	push	{r3, r4, r5, lr}
1a001322:	4604      	mov	r4, r0
1a001324:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001326:	4620      	mov	r0, r4
1a001328:	f7ff ff8e 	bl	1a001248 <uartTxReady>
1a00132c:	2800      	cmp	r0, #0
1a00132e:	d0fa      	beq.n	1a001326 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001330:	4620      	mov	r0, r4
1a001332:	4629      	mov	r1, r5
1a001334:	f7ff ff9e 	bl	1a001274 <uartTxWrite>
1a001338:	bd38      	pop	{r3, r4, r5, pc}
1a00133a:	bf00      	nop

1a00133c <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a00133c:	b538      	push	{r3, r4, r5, lr}
1a00133e:	4605      	mov	r5, r0
1a001340:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001342:	e003      	b.n	1a00134c <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a001344:	4628      	mov	r0, r5
1a001346:	f7ff ffeb 	bl	1a001320 <uartWriteByte>
      str++;
1a00134a:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a00134c:	7821      	ldrb	r1, [r4, #0]
1a00134e:	2900      	cmp	r1, #0
1a001350:	d1f8      	bne.n	1a001344 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a001352:	bd38      	pop	{r3, r4, r5, pc}

1a001354 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001354:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001356:	2003      	movs	r0, #3
1a001358:	f7ff ff10 	bl	1a00117c <uartProcessIRQ>
1a00135c:	bd08      	pop	{r3, pc}
1a00135e:	bf00      	nop

1a001360 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001360:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001362:	2005      	movs	r0, #5
1a001364:	f7ff ff0a 	bl	1a00117c <uartProcessIRQ>
1a001368:	bd08      	pop	{r3, pc}
1a00136a:	bf00      	nop

1a00136c <delayInaccurate>:
/*==================[external functions definition]==========================*/

/* ---- Inaccurate Blocking Delay ---- */

void delayInaccurate(tick_t delay_ms)
{
1a00136c:	b410      	push	{r4}
1a00136e:	b085      	sub	sp, #20
   volatile tick_t i;
   volatile tick_t delay;

   delay = INACCURATE_TO_MS * delay_ms;
1a001370:	f243 64b2 	movw	r4, #14002	; 0x36b2
1a001374:	fba0 2304 	umull	r2, r3, r0, r4
1a001378:	fb04 3301 	mla	r3, r4, r1, r3
1a00137c:	e9cd 2300 	strd	r2, r3, [sp]

   for( i=delay; i>0; i-- );
1a001380:	e9dd 2300 	ldrd	r2, r3, [sp]
1a001384:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a001388:	e007      	b.n	1a00139a <delayInaccurate+0x2e>
1a00138a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00138e:	f112 32ff 	adds.w	r2, r2, #4294967295
1a001392:	f143 33ff 	adc.w	r3, r3, #4294967295
1a001396:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a00139a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00139e:	4313      	orrs	r3, r2
1a0013a0:	d1f3      	bne.n	1a00138a <delayInaccurate+0x1e>
}
1a0013a2:	b005      	add	sp, #20
1a0013a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0013a8:	4770      	bx	lr
1a0013aa:	bf00      	nop

1a0013ac <delayInaccurateUs>:

void delayInaccurateUs(tick_t delay_us)
{
1a0013ac:	b430      	push	{r4, r5}
1a0013ae:	b084      	sub	sp, #16
   volatile tick_t i;
   volatile tick_t delay;

   delay = (INACCURATE_TO_US * delay_us);
1a0013b0:	1804      	adds	r4, r0, r0
1a0013b2:	eb41 0501 	adc.w	r5, r1, r1
1a0013b6:	00ab      	lsls	r3, r5, #2
1a0013b8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
1a0013bc:	00a2      	lsls	r2, r4, #2
1a0013be:	1912      	adds	r2, r2, r4
1a0013c0:	416b      	adcs	r3, r5
1a0013c2:	1812      	adds	r2, r2, r0
1a0013c4:	414b      	adcs	r3, r1
1a0013c6:	e9cd 2300 	strd	r2, r3, [sp]

   for( i=delay; i>0; i-- );
1a0013ca:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0013ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0013d2:	e007      	b.n	1a0013e4 <delayInaccurateUs+0x38>
1a0013d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0013d8:	f112 32ff 	adds.w	r2, r2, #4294967295
1a0013dc:	f143 33ff 	adc.w	r3, r3, #4294967295
1a0013e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
1a0013e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0013e8:	4313      	orrs	r3, r2
1a0013ea:	d1f3      	bne.n	1a0013d4 <delayInaccurateUs+0x28>
}
1a0013ec:	b004      	add	sp, #16
1a0013ee:	bc30      	pop	{r4, r5}
1a0013f0:	4770      	bx	lr
1a0013f2:	bf00      	nop

1a0013f4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a0013f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0013f8:	4680      	mov	r8, r0
1a0013fa:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0013fc:	f7ff fe56 	bl	1a0010ac <tickRead>
1a001400:	4606      	mov	r6, r0
1a001402:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001404:	f7ff fe52 	bl	1a0010ac <tickRead>
1a001408:	1b84      	subs	r4, r0, r6
1a00140a:	eb61 0507 	sbc.w	r5, r1, r7
1a00140e:	4640      	mov	r0, r8
1a001410:	4649      	mov	r1, r9
1a001412:	4b05      	ldr	r3, [pc, #20]	; (1a001428 <delay+0x34>)
1a001414:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001418:	f001 fbc4 	bl	1a002ba4 <__aeabi_uldivmod>
1a00141c:	428d      	cmp	r5, r1
1a00141e:	bf08      	it	eq
1a001420:	4284      	cmpeq	r4, r0
1a001422:	d3ef      	bcc.n	1a001404 <delay+0x10>
}
1a001424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001428:	10000b60 	.word	0x10000b60

1a00142c <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a00142c:	b510      	push	{r4, lr}
1a00142e:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a001430:	4610      	mov	r0, r2
1a001432:	4619      	mov	r1, r3
1a001434:	4b04      	ldr	r3, [pc, #16]	; (1a001448 <delayInit+0x1c>)
1a001436:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00143a:	f001 fbb3 	bl	1a002ba4 <__aeabi_uldivmod>
1a00143e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001442:	2300      	movs	r3, #0
1a001444:	7423      	strb	r3, [r4, #16]
1a001446:	bd10      	pop	{r4, pc}
1a001448:	10000b60 	.word	0x10000b60

1a00144c <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a00144c:	b510      	push	{r4, lr}
1a00144e:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001450:	7c03      	ldrb	r3, [r0, #16]
1a001452:	b93b      	cbnz	r3, 1a001464 <delayRead+0x18>
      delay->startTime = tickRead();
1a001454:	f7ff fe2a 	bl	1a0010ac <tickRead>
1a001458:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a00145c:	2301      	movs	r3, #1
1a00145e:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a001460:	2000      	movs	r0, #0
1a001462:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001464:	f7ff fe22 	bl	1a0010ac <tickRead>
1a001468:	e9d4 2300 	ldrd	r2, r3, [r4]
1a00146c:	1a80      	subs	r0, r0, r2
1a00146e:	eb61 0103 	sbc.w	r1, r1, r3
1a001472:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a001476:	4299      	cmp	r1, r3
1a001478:	bf08      	it	eq
1a00147a:	4290      	cmpeq	r0, r2
1a00147c:	d303      	bcc.n	1a001486 <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a00147e:	2300      	movs	r3, #0
1a001480:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a001482:	2001      	movs	r0, #1
1a001484:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a001486:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001488:	bd10      	pop	{r4, pc}
1a00148a:	bf00      	nop

1a00148c <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a00148c:	b538      	push	{r3, r4, r5, lr}
1a00148e:	4604      	mov	r4, r0
1a001490:	460d      	mov	r5, r1
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001492:	f640 0208 	movw	r2, #2056	; 0x808
1a001496:	4b07      	ldr	r3, [pc, #28]	; (1a0014b4 <i2cHardwareInit+0x28>)
1a001498:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a00149c:	f001 f88e 	bl	1a0025bc <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a0014a0:	4620      	mov	r0, r4
1a0014a2:	4629      	mov	r1, r5
1a0014a4:	f001 f89c 	bl	1a0025e0 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a0014a8:	4620      	mov	r0, r4
1a0014aa:	4903      	ldr	r1, [pc, #12]	; (1a0014b8 <i2cHardwareInit+0x2c>)
1a0014ac:	f001 f8b0 	bl	1a002610 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0014b0:	2001      	movs	r0, #1
1a0014b2:	bd38      	pop	{r3, r4, r5, pc}
1a0014b4:	40086000 	.word	0x40086000
1a0014b8:	1a00268d 	.word	0x1a00268d

1a0014bc <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0014bc:	b9a0      	cbnz	r0, 1a0014e8 <i2cHardwareWrite+0x2c>
static bool_t i2cHardwareWrite( i2cMap_t  i2cNumber,
                                uint8_t  i2cSlaveAddress,
                                uint8_t* transmitDataBuffer,
                                uint16_t transmitDataBufferSize,
                                bool_t   sendWriteStop )
{
1a0014be:	b500      	push	{lr}
1a0014c0:	b085      	sub	sp, #20
   if( i2cNumber != I2C0 ) {
      return FALSE;
   }

   // Prepare the i2cData register
   i2cData.slaveAddr = i2cSlaveAddress;
1a0014c2:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0014c6:	2100      	movs	r1, #0
1a0014c8:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0014cc:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0014d0:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0014d2:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0014d6:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0014d8:	f8ad 1006 	strh.w	r1, [sp, #6]

   /* Send the i2c data */
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0014dc:	4805      	ldr	r0, [pc, #20]	; (1a0014f4 <i2cHardwareWrite+0x38>)
1a0014de:	4669      	mov	r1, sp
1a0014e0:	f000 fee2 	bl	1a0022a8 <Chip_I2CM_XferBlocking>
1a0014e4:	b910      	cbnz	r0, 1a0014ec <i2cHardwareWrite+0x30>
1a0014e6:	e002      	b.n	1a0014ee <i2cHardwareWrite+0x32>
   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a0014e8:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0014ea:	4770      	bx	lr
      }
   }

   *** END - TEST I2C Response *** */

   return TRUE;
1a0014ec:	2001      	movs	r0, #1
}
1a0014ee:	b005      	add	sp, #20
1a0014f0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0014f4:	400a1000 	.word	0x400a1000

1a0014f8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0014f8:	b918      	cbnz	r0, 1a001502 <i2cInit+0xa>


/*==================[external functions definition]==========================*/

bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a0014fa:	b508      	push	{r3, lr}
   }

#if( I2C_SOFTWARE == 1 )
   retVal = i2cSoftwareInit( i2cNumber, clockRateHz );
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0014fc:	f7ff ffc6 	bl	1a00148c <i2cHardwareInit>
#endif

   return retVal;
1a001500:	bd08      	pop	{r3, pc}
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a001502:	2000      	movs	r0, #0
1a001504:	4770      	bx	lr
1a001506:	bf00      	nop

1a001508 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001508:	b938      	cbnz	r0, 1a00151a <i2cWrite+0x12>
bool_t i2cWrite( i2cMap_t  i2cNumber,
                 uint8_t  i2cSlaveAddress,
                 uint8_t* transmitDataBuffer,
                 uint16_t transmitDataBufferSize,
                 bool_t   sendWriteStop )
{
1a00150a:	b510      	push	{r4, lr}
1a00150c:	b082      	sub	sp, #8
                              i2cSlaveAddress,
                              transmitDataBuffer,
                              transmitDataBufferSize,
                              sendWriteStop );
#else
   retVal = i2cHardwareWrite( i2cNumber,
1a00150e:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a001512:	9400      	str	r4, [sp, #0]
1a001514:	f7ff ffd2 	bl	1a0014bc <i2cHardwareWrite>
                              transmitDataBuffer,
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
1a001518:	e001      	b.n	1a00151e <i2cWrite+0x16>
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
      return FALSE;
1a00151a:	2000      	movs	r0, #0
1a00151c:	4770      	bx	lr
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a00151e:	b002      	add	sp, #8
1a001520:	bd10      	pop	{r4, pc}
1a001522:	bf00      	nop

1a001524 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001524:	e7fe      	b.n	1a001524 <errorOcurred>
1a001526:	bf00      	nop

1a001528 <doNothing>:
}

static void doNothing( void* ptr )
{
1a001528:	4770      	bx	lr
1a00152a:	bf00      	nop

1a00152c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00152c:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00152e:	2400      	movs	r4, #0
1a001530:	e013      	b.n	1a00155a <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001532:	4b0b      	ldr	r3, [pc, #44]	; (1a001560 <TIMER0_IRQHandler+0x34>)
1a001534:	681a      	ldr	r2, [r3, #0]
1a001536:	f004 010f 	and.w	r1, r4, #15
1a00153a:	2301      	movs	r3, #1
1a00153c:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00153e:	421a      	tst	r2, r3
1a001540:	d009      	beq.n	1a001556 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001542:	4b08      	ldr	r3, [pc, #32]	; (1a001564 <TIMER0_IRQHandler+0x38>)
1a001544:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001548:	2000      	movs	r0, #0
1a00154a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00154c:	b262      	sxtb	r2, r4
1a00154e:	2301      	movs	r3, #1
1a001550:	4093      	lsls	r3, r2
1a001552:	4a03      	ldr	r2, [pc, #12]	; (1a001560 <TIMER0_IRQHandler+0x34>)
1a001554:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001556:	3401      	adds	r4, #1
1a001558:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00155a:	2c03      	cmp	r4, #3
1a00155c:	d9e9      	bls.n	1a001532 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00155e:	bd10      	pop	{r4, pc}
1a001560:	40084000 	.word	0x40084000
1a001564:	10000008 	.word	0x10000008

1a001568 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001568:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00156a:	2400      	movs	r4, #0
1a00156c:	e014      	b.n	1a001598 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00156e:	4b0c      	ldr	r3, [pc, #48]	; (1a0015a0 <TIMER1_IRQHandler+0x38>)
1a001570:	681a      	ldr	r2, [r3, #0]
1a001572:	f004 010f 	and.w	r1, r4, #15
1a001576:	2301      	movs	r3, #1
1a001578:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00157a:	421a      	tst	r2, r3
1a00157c:	d00a      	beq.n	1a001594 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00157e:	1d23      	adds	r3, r4, #4
1a001580:	4a08      	ldr	r2, [pc, #32]	; (1a0015a4 <TIMER1_IRQHandler+0x3c>)
1a001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001586:	2000      	movs	r0, #0
1a001588:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00158a:	b262      	sxtb	r2, r4
1a00158c:	2301      	movs	r3, #1
1a00158e:	4093      	lsls	r3, r2
1a001590:	4a03      	ldr	r2, [pc, #12]	; (1a0015a0 <TIMER1_IRQHandler+0x38>)
1a001592:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001594:	3401      	adds	r4, #1
1a001596:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001598:	2c03      	cmp	r4, #3
1a00159a:	d9e8      	bls.n	1a00156e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00159c:	bd10      	pop	{r4, pc}
1a00159e:	bf00      	nop
1a0015a0:	40085000 	.word	0x40085000
1a0015a4:	10000008 	.word	0x10000008

1a0015a8 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0015a8:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015aa:	2400      	movs	r4, #0
1a0015ac:	e015      	b.n	1a0015da <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0015ae:	4b0c      	ldr	r3, [pc, #48]	; (1a0015e0 <TIMER2_IRQHandler+0x38>)
1a0015b0:	681a      	ldr	r2, [r3, #0]
1a0015b2:	f004 010f 	and.w	r1, r4, #15
1a0015b6:	2301      	movs	r3, #1
1a0015b8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0015ba:	421a      	tst	r2, r3
1a0015bc:	d00b      	beq.n	1a0015d6 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0015be:	f104 0308 	add.w	r3, r4, #8
1a0015c2:	4a08      	ldr	r2, [pc, #32]	; (1a0015e4 <TIMER2_IRQHandler+0x3c>)
1a0015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0015c8:	2000      	movs	r0, #0
1a0015ca:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0015cc:	b262      	sxtb	r2, r4
1a0015ce:	2301      	movs	r3, #1
1a0015d0:	4093      	lsls	r3, r2
1a0015d2:	4a03      	ldr	r2, [pc, #12]	; (1a0015e0 <TIMER2_IRQHandler+0x38>)
1a0015d4:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0015d6:	3401      	adds	r4, #1
1a0015d8:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015da:	2c03      	cmp	r4, #3
1a0015dc:	d9e7      	bls.n	1a0015ae <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0015de:	bd10      	pop	{r4, pc}
1a0015e0:	400c3000 	.word	0x400c3000
1a0015e4:	10000008 	.word	0x10000008

1a0015e8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0015e8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0015ea:	2400      	movs	r4, #0
1a0015ec:	e015      	b.n	1a00161a <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0015ee:	4b0c      	ldr	r3, [pc, #48]	; (1a001620 <TIMER3_IRQHandler+0x38>)
1a0015f0:	681a      	ldr	r2, [r3, #0]
1a0015f2:	f004 010f 	and.w	r1, r4, #15
1a0015f6:	2301      	movs	r3, #1
1a0015f8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0015fa:	421a      	tst	r2, r3
1a0015fc:	d00b      	beq.n	1a001616 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0015fe:	f104 030c 	add.w	r3, r4, #12
1a001602:	4a08      	ldr	r2, [pc, #32]	; (1a001624 <TIMER3_IRQHandler+0x3c>)
1a001604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001608:	2000      	movs	r0, #0
1a00160a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00160c:	b262      	sxtb	r2, r4
1a00160e:	2301      	movs	r3, #1
1a001610:	4093      	lsls	r3, r2
1a001612:	4a03      	ldr	r2, [pc, #12]	; (1a001620 <TIMER3_IRQHandler+0x38>)
1a001614:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001616:	3401      	adds	r4, #1
1a001618:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00161a:	2c03      	cmp	r4, #3
1a00161c:	d9e7      	bls.n	1a0015ee <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00161e:	bd10      	pop	{r4, pc}
1a001620:	400c4000 	.word	0x400c4000
1a001624:	10000008 	.word	0x10000008

1a001628 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001628:	b508      	push	{r3, lr}

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00162a:	f000 faf3 	bl	1a001c14 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00162e:	4b3b      	ldr	r3, [pc, #236]	; (1a00171c <boardInit+0xf4>)
1a001630:	6818      	ldr	r0, [r3, #0]
1a001632:	f7ff fb9f 	bl	1a000d74 <cyclesCounterInit>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001636:	f000 f927 	bl	1a001888 <Board_Init>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00163a:	2001      	movs	r0, #1
1a00163c:	2100      	movs	r1, #0
1a00163e:	f7ff fd47 	bl	1a0010d0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001642:	2000      	movs	r0, #0
1a001644:	2105      	movs	r1, #5
1a001646:	f7ff fc0b 	bl	1a000e60 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00164a:	2024      	movs	r0, #36	; 0x24
1a00164c:	2100      	movs	r1, #0
1a00164e:	f7ff fc07 	bl	1a000e60 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001652:	2025      	movs	r0, #37	; 0x25
1a001654:	2100      	movs	r1, #0
1a001656:	f7ff fc03 	bl	1a000e60 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00165a:	2026      	movs	r0, #38	; 0x26
1a00165c:	2100      	movs	r1, #0
1a00165e:	f7ff fbff 	bl	1a000e60 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001662:	2027      	movs	r0, #39	; 0x27
1a001664:	2100      	movs	r1, #0
1a001666:	f7ff fbfb 	bl	1a000e60 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00166a:	2028      	movs	r0, #40	; 0x28
1a00166c:	2101      	movs	r1, #1
1a00166e:	f7ff fbf7 	bl	1a000e60 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001672:	2029      	movs	r0, #41	; 0x29
1a001674:	2101      	movs	r1, #1
1a001676:	f7ff fbf3 	bl	1a000e60 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00167a:	202a      	movs	r0, #42	; 0x2a
1a00167c:	2101      	movs	r1, #1
1a00167e:	f7ff fbef 	bl	1a000e60 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001682:	202b      	movs	r0, #43	; 0x2b
1a001684:	2101      	movs	r1, #1
1a001686:	f7ff fbeb 	bl	1a000e60 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00168a:	202c      	movs	r0, #44	; 0x2c
1a00168c:	2101      	movs	r1, #1
1a00168e:	f7ff fbe7 	bl	1a000e60 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001692:	202d      	movs	r0, #45	; 0x2d
1a001694:	2101      	movs	r1, #1
1a001696:	f7ff fbe3 	bl	1a000e60 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00169a:	202e      	movs	r0, #46	; 0x2e
1a00169c:	2100      	movs	r1, #0
1a00169e:	f7ff fbdf 	bl	1a000e60 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0016a2:	202f      	movs	r0, #47	; 0x2f
1a0016a4:	2100      	movs	r1, #0
1a0016a6:	f7ff fbdb 	bl	1a000e60 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0016aa:	2030      	movs	r0, #48	; 0x30
1a0016ac:	2100      	movs	r1, #0
1a0016ae:	f7ff fbd7 	bl	1a000e60 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0016b2:	2031      	movs	r0, #49	; 0x31
1a0016b4:	2100      	movs	r1, #0
1a0016b6:	f7ff fbd3 	bl	1a000e60 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0016ba:	2032      	movs	r0, #50	; 0x32
1a0016bc:	2100      	movs	r1, #0
1a0016be:	f7ff fbcf 	bl	1a000e60 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0016c2:	2033      	movs	r0, #51	; 0x33
1a0016c4:	2100      	movs	r1, #0
1a0016c6:	f7ff fbcb 	bl	1a000e60 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0016ca:	2034      	movs	r0, #52	; 0x34
1a0016cc:	2100      	movs	r1, #0
1a0016ce:	f7ff fbc7 	bl	1a000e60 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0016d2:	2035      	movs	r0, #53	; 0x35
1a0016d4:	2100      	movs	r1, #0
1a0016d6:	f7ff fbc3 	bl	1a000e60 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0016da:	2036      	movs	r0, #54	; 0x36
1a0016dc:	2101      	movs	r1, #1
1a0016de:	f7ff fbbf 	bl	1a000e60 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0016e2:	2037      	movs	r0, #55	; 0x37
1a0016e4:	2101      	movs	r1, #1
1a0016e6:	f7ff fbbb 	bl	1a000e60 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0016ea:	2038      	movs	r0, #56	; 0x38
1a0016ec:	2101      	movs	r1, #1
1a0016ee:	f7ff fbb7 	bl	1a000e60 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0016f2:	2039      	movs	r0, #57	; 0x39
1a0016f4:	2101      	movs	r1, #1
1a0016f6:	f7ff fbb3 	bl	1a000e60 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0016fa:	203a      	movs	r0, #58	; 0x3a
1a0016fc:	2101      	movs	r1, #1
1a0016fe:	f7ff fbaf 	bl	1a000e60 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001702:	203b      	movs	r0, #59	; 0x3b
1a001704:	2101      	movs	r1, #1
1a001706:	f7ff fbab 	bl	1a000e60 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00170a:	203c      	movs	r0, #60	; 0x3c
1a00170c:	2101      	movs	r1, #1
1a00170e:	f7ff fba7 	bl	1a000e60 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001712:	203d      	movs	r0, #61	; 0x3d
1a001714:	2101      	movs	r1, #1
1a001716:	f7ff fba3 	bl	1a000e60 <gpioInit>
1a00171a:	bd08      	pop	{r3, pc}
1a00171c:	10000b68 	.word	0x10000b68

1a001720 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a001720:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001722:	2200      	movs	r2, #0
1a001724:	e014      	b.n	1a001750 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001726:	4b0c      	ldr	r3, [pc, #48]	; (1a001758 <Board_LED_Init+0x38>)
1a001728:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a00172c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a001730:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a001732:	480a      	ldr	r0, [pc, #40]	; (1a00175c <Board_LED_Init+0x3c>)
1a001734:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001738:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a00173c:	2301      	movs	r3, #1
1a00173e:	408b      	lsls	r3, r1
1a001740:	4333      	orrs	r3, r6
1a001742:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a001746:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a00174a:	2300      	movs	r3, #0
1a00174c:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00174e:	3201      	adds	r2, #1
1a001750:	2a05      	cmp	r2, #5
1a001752:	d9e8      	bls.n	1a001726 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001754:	bc70      	pop	{r4, r5, r6}
1a001756:	4770      	bx	lr
1a001758:	1a0077d0 	.word	0x1a0077d0
1a00175c:	400f4000 	.word	0x400f4000

1a001760 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a001760:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001762:	2300      	movs	r3, #0
1a001764:	e011      	b.n	1a00178a <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001766:	490b      	ldr	r1, [pc, #44]	; (1a001794 <Board_TEC_Init+0x34>)
1a001768:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00176c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001770:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001772:	4c09      	ldr	r4, [pc, #36]	; (1a001798 <Board_TEC_Init+0x38>)
1a001774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001778:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a00177c:	2101      	movs	r1, #1
1a00177e:	40a9      	lsls	r1, r5
1a001780:	ea20 0101 	bic.w	r1, r0, r1
1a001784:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001788:	3301      	adds	r3, #1
1a00178a:	2b03      	cmp	r3, #3
1a00178c:	d9eb      	bls.n	1a001766 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00178e:	bc30      	pop	{r4, r5}
1a001790:	4770      	bx	lr
1a001792:	bf00      	nop
1a001794:	1a0077c8 	.word	0x1a0077c8
1a001798:	400f4000 	.word	0x400f4000

1a00179c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a00179c:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00179e:	2300      	movs	r3, #0
1a0017a0:	e011      	b.n	1a0017c6 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0017a2:	490b      	ldr	r1, [pc, #44]	; (1a0017d0 <Board_GPIO_Init+0x34>)
1a0017a4:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0017a8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0017ac:	784d      	ldrb	r5, [r1, #1]
1a0017ae:	4c09      	ldr	r4, [pc, #36]	; (1a0017d4 <Board_GPIO_Init+0x38>)
1a0017b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0017b4:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a0017b8:	2101      	movs	r1, #1
1a0017ba:	40a9      	lsls	r1, r5
1a0017bc:	ea20 0101 	bic.w	r1, r0, r1
1a0017c0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0017c4:	3301      	adds	r3, #1
1a0017c6:	2b08      	cmp	r3, #8
1a0017c8:	d9eb      	bls.n	1a0017a2 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a0017ca:	bc30      	pop	{r4, r5}
1a0017cc:	4770      	bx	lr
1a0017ce:	bf00      	nop
1a0017d0:	1a0077ac 	.word	0x1a0077ac
1a0017d4:	400f4000 	.word	0x400f4000

1a0017d8 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0017d8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0017da:	4c0b      	ldr	r4, [pc, #44]	; (1a001808 <Board_SPI_Init+0x30>)
1a0017dc:	4620      	mov	r0, r4
1a0017de:	f000 ffaf 	bl	1a002740 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0017e2:	6863      	ldr	r3, [r4, #4]
1a0017e4:	f023 0304 	bic.w	r3, r3, #4
1a0017e8:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0017ea:	6823      	ldr	r3, [r4, #0]
1a0017ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0017f0:	f043 0307 	orr.w	r3, r3, #7
1a0017f4:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0017f6:	4620      	mov	r0, r4
1a0017f8:	4904      	ldr	r1, [pc, #16]	; (1a00180c <Board_SPI_Init+0x34>)
1a0017fa:	f000 ff81 	bl	1a002700 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0017fe:	6863      	ldr	r3, [r4, #4]
1a001800:	f043 0302 	orr.w	r3, r3, #2
1a001804:	6063      	str	r3, [r4, #4]
1a001806:	bd10      	pop	{r4, pc}
1a001808:	400c5000 	.word	0x400c5000
1a00180c:	000186a0 	.word	0x000186a0

1a001810 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a001810:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a001812:	2000      	movs	r0, #0
1a001814:	f000 fed2 	bl	1a0025bc <Chip_I2C_Init>
1a001818:	f640 0208 	movw	r2, #2056	; 0x808
1a00181c:	4b03      	ldr	r3, [pc, #12]	; (1a00182c <Board_I2C_Init+0x1c>)
1a00181e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001822:	2000      	movs	r0, #0
1a001824:	4902      	ldr	r1, [pc, #8]	; (1a001830 <Board_I2C_Init+0x20>)
1a001826:	f000 fedb 	bl	1a0025e0 <Chip_I2C_SetClockRate>
1a00182a:	bd08      	pop	{r3, pc}
1a00182c:	40086000 	.word	0x40086000
1a001830:	000f4240 	.word	0x000f4240

1a001834 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001834:	b510      	push	{r4, lr}
1a001836:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001838:	4c08      	ldr	r4, [pc, #32]	; (1a00185c <Board_ADC_Init+0x28>)
1a00183a:	4620      	mov	r0, r4
1a00183c:	4669      	mov	r1, sp
1a00183e:	f000 f9a9 	bl	1a001b94 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a001842:	4620      	mov	r0, r4
1a001844:	4669      	mov	r1, sp
1a001846:	4a06      	ldr	r2, [pc, #24]	; (1a001860 <Board_ADC_Init+0x2c>)
1a001848:	f000 f9c4 	bl	1a001bd4 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a00184c:	4620      	mov	r0, r4
1a00184e:	4669      	mov	r1, sp
1a001850:	2200      	movs	r2, #0
1a001852:	f000 f9d9 	bl	1a001c08 <Chip_ADC_SetResolution>
}
1a001856:	b002      	add	sp, #8
1a001858:	bd10      	pop	{r4, pc}
1a00185a:	bf00      	nop
1a00185c:	400e3000 	.word	0x400e3000
1a001860:	00061a80 	.word	0x00061a80

1a001864 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001864:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a001866:	4c07      	ldr	r4, [pc, #28]	; (1a001884 <Board_Debug_Init+0x20>)
1a001868:	4620      	mov	r0, r4
1a00186a:	f000 f8b5 	bl	1a0019d8 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00186e:	4620      	mov	r0, r4
1a001870:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001874:	f000 f8fa 	bl	1a001a6c <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001878:	2303      	movs	r3, #3
1a00187a:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00187c:	2301      	movs	r3, #1
1a00187e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001880:	bd10      	pop	{r4, pc}
1a001882:	bf00      	nop
1a001884:	400c1000 	.word	0x400c1000

1a001888 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001888:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00188a:	f7ff ffeb 	bl	1a001864 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00188e:	480b      	ldr	r0, [pc, #44]	; (1a0018bc <Board_Init+0x34>)
1a001890:	f000 fd48 	bl	1a002324 <Chip_GPIO_Init>

   Board_LED_Init();
1a001894:	f7ff ff44 	bl	1a001720 <Board_LED_Init>
   Board_TEC_Init();
1a001898:	f7ff ff62 	bl	1a001760 <Board_TEC_Init>
   Board_SPI_Init();
1a00189c:	f7ff ff9c 	bl	1a0017d8 <Board_SPI_Init>
   Board_GPIO_Init();
1a0018a0:	f7ff ff7c 	bl	1a00179c <Board_GPIO_Init>
   Board_I2C_Init();
1a0018a4:	f7ff ffb4 	bl	1a001810 <Board_I2C_Init>
   Board_ADC_Init();
1a0018a8:	f7ff ffc4 	bl	1a001834 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a0018ac:	4a04      	ldr	r2, [pc, #16]	; (1a0018c0 <Board_Init+0x38>)
1a0018ae:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a0018b2:	f043 0304 	orr.w	r3, r3, #4
1a0018b6:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a0018ba:	bd08      	pop	{r3, pc}
1a0018bc:	400f4000 	.word	0x400f4000
1a0018c0:	40043000 	.word	0x40043000

1a0018c4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0018c4:	4b05      	ldr	r3, [pc, #20]	; (1a0018dc <_sbrk_r+0x18>)
1a0018c6:	681b      	ldr	r3, [r3, #0]
1a0018c8:	b913      	cbnz	r3, 1a0018d0 <_sbrk_r+0xc>
       heap_end = &_pvHeapStart;
1a0018ca:	4a05      	ldr	r2, [pc, #20]	; (1a0018e0 <_sbrk_r+0x1c>)
1a0018cc:	4b03      	ldr	r3, [pc, #12]	; (1a0018dc <_sbrk_r+0x18>)
1a0018ce:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a0018d0:	4b02      	ldr	r3, [pc, #8]	; (1a0018dc <_sbrk_r+0x18>)
1a0018d2:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0018d4:	4401      	add	r1, r0
1a0018d6:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0018d8:	4770      	bx	lr
1a0018da:	bf00      	nop
1a0018dc:	10000b14 	.word	0x10000b14
1a0018e0:	10000b6c 	.word	0x10000b6c

1a0018e4 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a0018e4:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a0018e6:	4b04      	ldr	r3, [pc, #16]	; (1a0018f8 <SystemInit+0x14>)
1a0018e8:	4a04      	ldr	r2, [pc, #16]	; (1a0018fc <SystemInit+0x18>)
1a0018ea:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a0018ec:	f000 fcee 	bl	1a0022cc <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a0018f0:	f000 f856 	bl	1a0019a0 <Board_SystemInit>
1a0018f4:	bd08      	pop	{r3, pc}
1a0018f6:	bf00      	nop
1a0018f8:	e000ed08 	.word	0xe000ed08
1a0018fc:	1a000000 	.word	0x1a000000

1a001900 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a001900:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001902:	2300      	movs	r3, #0
1a001904:	e00c      	b.n	1a001920 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001906:	4a09      	ldr	r2, [pc, #36]	; (1a00192c <Board_SetupMuxing+0x2c>)
1a001908:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00190c:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001910:	784a      	ldrb	r2, [r1, #1]
1a001912:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001914:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001918:	4905      	ldr	r1, [pc, #20]	; (1a001930 <Board_SetupMuxing+0x30>)
1a00191a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00191e:	3301      	adds	r3, #1
1a001920:	2b25      	cmp	r3, #37	; 0x25
1a001922:	d9f0      	bls.n	1a001906 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001924:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001928:	4770      	bx	lr
1a00192a:	bf00      	nop
1a00192c:	1a0077e8 	.word	0x1a0077e8
1a001930:	40086000 	.word	0x40086000

1a001934 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001934:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001936:	4a17      	ldr	r2, [pc, #92]	; (1a001994 <Board_SetupClocking+0x60>)
1a001938:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00193c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001940:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001944:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001948:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00194c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001950:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001954:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001958:	2006      	movs	r0, #6
1a00195a:	490f      	ldr	r1, [pc, #60]	; (1a001998 <Board_SetupClocking+0x64>)
1a00195c:	2201      	movs	r2, #1
1a00195e:	f000 fce3 	bl	1a002328 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001962:	2400      	movs	r4, #0
1a001964:	e00a      	b.n	1a00197c <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001966:	4a0d      	ldr	r2, [pc, #52]	; (1a00199c <Board_SetupClocking+0x68>)
1a001968:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a00196c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a001970:	7859      	ldrb	r1, [r3, #1]
1a001972:	789a      	ldrb	r2, [r3, #2]
1a001974:	78db      	ldrb	r3, [r3, #3]
1a001976:	f000 fb75 	bl	1a002064 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00197a:	3401      	adds	r4, #1
1a00197c:	2c02      	cmp	r4, #2
1a00197e:	d9f2      	bls.n	1a001966 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001980:	4b04      	ldr	r3, [pc, #16]	; (1a001994 <Board_SetupClocking+0x60>)
1a001982:	685a      	ldr	r2, [r3, #4]
1a001984:	f022 020c 	bic.w	r2, r2, #12
1a001988:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00198a:	685a      	ldr	r2, [r3, #4]
1a00198c:	f042 0203 	orr.w	r2, r2, #3
1a001990:	605a      	str	r2, [r3, #4]
1a001992:	bd10      	pop	{r4, pc}
1a001994:	40043000 	.word	0x40043000
1a001998:	0c28cb00 	.word	0x0c28cb00
1a00199c:	1a0077dc 	.word	0x1a0077dc

1a0019a0 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0019a0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0019a2:	f7ff ffad 	bl	1a001900 <Board_SetupMuxing>
    Board_SetupClocking();
1a0019a6:	f7ff ffc5 	bl	1a001934 <Board_SetupClocking>
1a0019aa:	bd08      	pop	{r3, pc}

1a0019ac <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0019ac:	4b09      	ldr	r3, [pc, #36]	; (1a0019d4 <Chip_UART_GetIndex+0x28>)
1a0019ae:	4298      	cmp	r0, r3
1a0019b0:	d009      	beq.n	1a0019c6 <Chip_UART_GetIndex+0x1a>
1a0019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0019b6:	4298      	cmp	r0, r3
1a0019b8:	d007      	beq.n	1a0019ca <Chip_UART_GetIndex+0x1e>
1a0019ba:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0019be:	4298      	cmp	r0, r3
1a0019c0:	d005      	beq.n	1a0019ce <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0019c2:	2000      	movs	r0, #0
1a0019c4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0019c6:	2002      	movs	r0, #2
1a0019c8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0019ca:	2003      	movs	r0, #3
1a0019cc:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a0019ce:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0019d0:	4770      	bx	lr
1a0019d2:	bf00      	nop
1a0019d4:	400c1000 	.word	0x400c1000

1a0019d8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0019d8:	b510      	push	{r4, lr}
1a0019da:	b082      	sub	sp, #8
1a0019dc:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0019de:	f7ff ffe5 	bl	1a0019ac <Chip_UART_GetIndex>
1a0019e2:	4b10      	ldr	r3, [pc, #64]	; (1a001a24 <Chip_UART_Init+0x4c>)
1a0019e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0019e8:	2101      	movs	r1, #1
1a0019ea:	460a      	mov	r2, r1
1a0019ec:	460b      	mov	r3, r1
1a0019ee:	f000 fb73 	bl	1a0020d8 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0019f2:	2307      	movs	r3, #7
1a0019f4:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a0019f6:	2300      	movs	r3, #0
1a0019f8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0019fa:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0019fc:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0019fe:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001a00:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001a02:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001a04:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001a06:	4b08      	ldr	r3, [pc, #32]	; (1a001a28 <Chip_UART_Init+0x50>)
1a001a08:	429c      	cmp	r4, r3
1a001a0a:	d103      	bne.n	1a001a14 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a001a0c:	2300      	movs	r3, #0
1a001a0e:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001a10:	69a3      	ldr	r3, [r4, #24]
1a001a12:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001a14:	2303      	movs	r3, #3
1a001a16:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001a18:	2310      	movs	r3, #16
1a001a1a:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001a1c:	9b01      	ldr	r3, [sp, #4]
}
1a001a1e:	b002      	add	sp, #8
1a001a20:	bd10      	pop	{r4, pc}
1a001a22:	bf00      	nop
1a001a24:	1a007888 	.word	0x1a007888
1a001a28:	40082000 	.word	0x40082000

1a001a2c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001a2c:	b538      	push	{r3, r4, r5, lr}
1a001a2e:	4605      	mov	r5, r0
1a001a30:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001a32:	f7ff ffbb 	bl	1a0019ac <Chip_UART_GetIndex>
1a001a36:	4b0c      	ldr	r3, [pc, #48]	; (1a001a68 <Chip_UART_SetBaud+0x3c>)
1a001a38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001a3c:	f000 fb84 	bl	1a002148 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001a40:	0124      	lsls	r4, r4, #4
1a001a42:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001a46:	68ea      	ldr	r2, [r5, #12]
1a001a48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001a4c:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001a4e:	b2da      	uxtb	r2, r3
1a001a50:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001a52:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001a56:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001a58:	68ea      	ldr	r2, [r5, #12]
1a001a5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001a5e:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001a60:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001a64:	0900      	lsrs	r0, r0, #4
1a001a66:	bd38      	pop	{r3, r4, r5, pc}
1a001a68:	1a007880 	.word	0x1a007880

1a001a6c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001a70:	b083      	sub	sp, #12
1a001a72:	4683      	mov	fp, r0
1a001a74:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001a76:	f7ff ff99 	bl	1a0019ac <Chip_UART_GetIndex>
1a001a7a:	4b34      	ldr	r3, [pc, #208]	; (1a001b4c <Chip_UART_SetBaudFDR+0xe0>)
1a001a7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001a80:	f000 fb62 	bl	1a002148 <Chip_Clock_GetRate>
1a001a84:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a001a86:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001a8a:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001a8c:	2300      	movs	r3, #0
1a001a8e:	9301      	str	r3, [sp, #4]
1a001a90:	46a2      	mov	sl, r4
1a001a92:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001a94:	e029      	b.n	1a001aea <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001a96:	2300      	movs	r3, #0
1a001a98:	0932      	lsrs	r2, r6, #4
1a001a9a:	0730      	lsls	r0, r6, #28
1a001a9c:	fba0 0104 	umull	r0, r1, r0, r4
1a001aa0:	fb04 1102 	mla	r1, r4, r2, r1
1a001aa4:	1962      	adds	r2, r4, r5
1a001aa6:	fb08 f202 	mul.w	r2, r8, r2
1a001aaa:	f001 f87b 	bl	1a002ba4 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001aae:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a001ab0:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a001ab2:	2800      	cmp	r0, #0
1a001ab4:	da01      	bge.n	1a001aba <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a001ab6:	4243      	negs	r3, r0
				div ++;
1a001ab8:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001aba:	429f      	cmp	r7, r3
1a001abc:	d30a      	bcc.n	1a001ad4 <Chip_UART_SetBaudFDR+0x68>
1a001abe:	b14a      	cbz	r2, 1a001ad4 <Chip_UART_SetBaudFDR+0x68>
1a001ac0:	0c11      	lsrs	r1, r2, #16
1a001ac2:	d107      	bne.n	1a001ad4 <Chip_UART_SetBaudFDR+0x68>
1a001ac4:	2a02      	cmp	r2, #2
1a001ac6:	d800      	bhi.n	1a001aca <Chip_UART_SetBaudFDR+0x5e>
1a001ac8:	b925      	cbnz	r5, 1a001ad4 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001aca:	b14b      	cbz	r3, 1a001ae0 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001acc:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001ace:	9501      	str	r5, [sp, #4]
			sm = m;
1a001ad0:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001ad2:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001ad4:	3501      	adds	r5, #1
1a001ad6:	e000      	b.n	1a001ada <Chip_UART_SetBaudFDR+0x6e>
1a001ad8:	2500      	movs	r5, #0
1a001ada:	42a5      	cmp	r5, r4
1a001adc:	d3db      	bcc.n	1a001a96 <Chip_UART_SetBaudFDR+0x2a>
1a001ade:	e003      	b.n	1a001ae8 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001ae0:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001ae2:	9501      	str	r5, [sp, #4]
			sm = m;
1a001ae4:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001ae6:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001ae8:	3401      	adds	r4, #1
1a001aea:	b10f      	cbz	r7, 1a001af0 <Chip_UART_SetBaudFDR+0x84>
1a001aec:	2c0f      	cmp	r4, #15
1a001aee:	d9f3      	bls.n	1a001ad8 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001af0:	f1b9 0f00 	cmp.w	r9, #0
1a001af4:	d026      	beq.n	1a001b44 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001af6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001afa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001afe:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001b02:	fa5f f389 	uxtb.w	r3, r9
1a001b06:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a001b0a:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001b0e:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001b12:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001b1a:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001b1e:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001b22:	b2da      	uxtb	r2, r3
1a001b24:	9901      	ldr	r1, [sp, #4]
1a001b26:	f001 030f 	and.w	r3, r1, #15
1a001b2a:	4313      	orrs	r3, r2
1a001b2c:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001b30:	0933      	lsrs	r3, r6, #4
1a001b32:	fb0a f303 	mul.w	r3, sl, r3
1a001b36:	eb0a 0001 	add.w	r0, sl, r1
1a001b3a:	fb09 f000 	mul.w	r0, r9, r0
1a001b3e:	fbb3 f0f0 	udiv	r0, r3, r0
1a001b42:	e000      	b.n	1a001b46 <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a001b44:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a001b46:	b003      	add	sp, #12
1a001b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001b4c:	1a007880 	.word	0x1a007880

1a001b50 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001b50:	4b03      	ldr	r3, [pc, #12]	; (1a001b60 <Chip_ADC_GetClockIndex+0x10>)
1a001b52:	4298      	cmp	r0, r3
1a001b54:	d101      	bne.n	1a001b5a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a001b56:	2004      	movs	r0, #4
1a001b58:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001b5a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001b5c:	4770      	bx	lr
1a001b5e:	bf00      	nop
1a001b60:	400e4000 	.word	0x400e4000

1a001b64 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001b64:	b570      	push	{r4, r5, r6, lr}
1a001b66:	460d      	mov	r5, r1
1a001b68:	4614      	mov	r4, r2
1a001b6a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001b6c:	f7ff fff0 	bl	1a001b50 <Chip_ADC_GetClockIndex>
1a001b70:	f000 faea 	bl	1a002148 <Chip_Clock_GetRate>
	if (burstMode) {
1a001b74:	b115      	cbz	r5, 1a001b7c <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a001b76:	fb04 f406 	mul.w	r4, r4, r6
1a001b7a:	e003      	b.n	1a001b84 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001b7c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001b80:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001b84:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001b88:	0064      	lsls	r4, r4, #1
1a001b8a:	fbb0 f4f4 	udiv	r4, r0, r4
1a001b8e:	1e60      	subs	r0, r4, #1
	return div;
}
1a001b90:	b2c0      	uxtb	r0, r0
1a001b92:	bd70      	pop	{r4, r5, r6, pc}

1a001b94 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001b94:	b538      	push	{r3, r4, r5, lr}
1a001b96:	4605      	mov	r5, r0
1a001b98:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001b9a:	f7ff ffd9 	bl	1a001b50 <Chip_ADC_GetClockIndex>
1a001b9e:	2101      	movs	r1, #1
1a001ba0:	460a      	mov	r2, r1
1a001ba2:	460b      	mov	r3, r1
1a001ba4:	f000 fa98 	bl	1a0020d8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001ba8:	2100      	movs	r1, #0
1a001baa:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001bac:	4a08      	ldr	r2, [pc, #32]	; (1a001bd0 <Chip_ADC_Init+0x3c>)
1a001bae:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001bb0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001bb2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001bb4:	4628      	mov	r0, r5
1a001bb6:	230b      	movs	r3, #11
1a001bb8:	f7ff ffd4 	bl	1a001b64 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001bbc:	0200      	lsls	r0, r0, #8
1a001bbe:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001bc2:	7920      	ldrb	r0, [r4, #4]
1a001bc4:	f000 0007 	and.w	r0, r0, #7
1a001bc8:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a001bcc:	6028      	str	r0, [r5, #0]
1a001bce:	bd38      	pop	{r3, r4, r5, pc}
1a001bd0:	00061a80 	.word	0x00061a80

1a001bd4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001bd4:	b570      	push	{r4, r5, r6, lr}
1a001bd6:	4606      	mov	r6, r0
1a001bd8:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001bda:	6804      	ldr	r4, [r0, #0]
1a001bdc:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001be0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001be4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001be6:	790b      	ldrb	r3, [r1, #4]
1a001be8:	f1c3 030b 	rsb	r3, r3, #11
1a001bec:	7949      	ldrb	r1, [r1, #5]
1a001bee:	b2db      	uxtb	r3, r3
1a001bf0:	f7ff ffb8 	bl	1a001b64 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001bf4:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001bf8:	792c      	ldrb	r4, [r5, #4]
1a001bfa:	f004 0407 	and.w	r4, r4, #7
1a001bfe:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a001c02:	6030      	str	r0, [r6, #0]
1a001c04:	bd70      	pop	{r4, r5, r6, pc}
1a001c06:	bf00      	nop

1a001c08 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001c08:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001c0a:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001c0c:	680a      	ldr	r2, [r1, #0]
1a001c0e:	f7ff ffe1 	bl	1a001bd4 <Chip_ADC_SetSampleRate>
1a001c12:	bd08      	pop	{r3, pc}

1a001c14 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001c14:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001c16:	2069      	movs	r0, #105	; 0x69
1a001c18:	f000 fa96 	bl	1a002148 <Chip_Clock_GetRate>
1a001c1c:	4b01      	ldr	r3, [pc, #4]	; (1a001c24 <SystemCoreClockUpdate+0x10>)
1a001c1e:	6018      	str	r0, [r3, #0]
1a001c20:	bd08      	pop	{r3, pc}
1a001c22:	bf00      	nop
1a001c24:	10000b68 	.word	0x10000b68

1a001c28 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001c28:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001c2a:	680b      	ldr	r3, [r1, #0]
1a001c2c:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001c30:	d002      	beq.n	1a001c38 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001c36:	600b      	str	r3, [r1, #0]
1a001c38:	4686      	mov	lr, r0
1a001c3a:	2601      	movs	r6, #1
1a001c3c:	e041      	b.n	1a001cc2 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a001c3e:	680d      	ldr	r5, [r1, #0]
1a001c40:	f015 0f40 	tst.w	r5, #64	; 0x40
1a001c44:	d008      	beq.n	1a001c58 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001c46:	1c7b      	adds	r3, r7, #1
1a001c48:	fa04 f203 	lsl.w	r2, r4, r3
1a001c4c:	694b      	ldr	r3, [r1, #20]
1a001c4e:	fb03 f302 	mul.w	r3, r3, r2
1a001c52:	fbb3 f3f6 	udiv	r3, r3, r6
1a001c56:	e004      	b.n	1a001c62 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a001c58:	694b      	ldr	r3, [r1, #20]
1a001c5a:	fb04 f303 	mul.w	r3, r4, r3
1a001c5e:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001c62:	4a19      	ldr	r2, [pc, #100]	; (1a001cc8 <pll_calc_divs+0xa0>)
1a001c64:	4293      	cmp	r3, r2
1a001c66:	d920      	bls.n	1a001caa <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001c68:	4a18      	ldr	r2, [pc, #96]	; (1a001ccc <pll_calc_divs+0xa4>)
1a001c6a:	4293      	cmp	r3, r2
1a001c6c:	d823      	bhi.n	1a001cb6 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a001c6e:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001c72:	d103      	bne.n	1a001c7c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001c74:	1c7a      	adds	r2, r7, #1
1a001c76:	fa23 f202 	lsr.w	r2, r3, r2
1a001c7a:	e000      	b.n	1a001c7e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001c7c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001c7e:	1a85      	subs	r5, r0, r2
1a001c80:	d502      	bpl.n	1a001c88 <pll_calc_divs+0x60>
		return -val;
1a001c82:	f1c5 0c00 	rsb	ip, r5, #0
1a001c86:	e000      	b.n	1a001c8a <pll_calc_divs+0x62>
	return val;
1a001c88:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a001c8a:	45e6      	cmp	lr, ip
1a001c8c:	d90d      	bls.n	1a001caa <pll_calc_divs+0x82>
					ppll->nsel = n;
1a001c8e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001c90:	f107 0e01 	add.w	lr, r7, #1
1a001c94:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001c98:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a001c9a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001c9c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001c9e:	2d00      	cmp	r5, #0
1a001ca0:	da02      	bge.n	1a001ca8 <pll_calc_divs+0x80>
		return -val;
1a001ca2:	f1c5 0e00 	rsb	lr, r5, #0
1a001ca6:	e000      	b.n	1a001caa <pll_calc_divs+0x82>
	return val;
1a001ca8:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a001caa:	3401      	adds	r4, #1
1a001cac:	e000      	b.n	1a001cb0 <pll_calc_divs+0x88>
1a001cae:	2401      	movs	r4, #1
1a001cb0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001cb4:	ddc3      	ble.n	1a001c3e <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001cb6:	3701      	adds	r7, #1
1a001cb8:	e000      	b.n	1a001cbc <pll_calc_divs+0x94>
1a001cba:	2700      	movs	r7, #0
1a001cbc:	2f03      	cmp	r7, #3
1a001cbe:	ddf6      	ble.n	1a001cae <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001cc0:	3601      	adds	r6, #1
1a001cc2:	2e04      	cmp	r6, #4
1a001cc4:	ddf9      	ble.n	1a001cba <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001cc8:	094c5eff 	.word	0x094c5eff
1a001ccc:	1312d000 	.word	0x1312d000

1a001cd0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001cd2:	b099      	sub	sp, #100	; 0x64
1a001cd4:	4605      	mov	r5, r0
1a001cd6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001cd8:	4668      	mov	r0, sp
1a001cda:	2100      	movs	r1, #0
1a001cdc:	2260      	movs	r2, #96	; 0x60
1a001cde:	f001 fd03 	bl	1a0036e8 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001ce2:	2380      	movs	r3, #128	; 0x80
1a001ce4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001ce6:	6963      	ldr	r3, [r4, #20]
1a001ce8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001cea:	7923      	ldrb	r3, [r4, #4]
1a001cec:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001cf0:	4628      	mov	r0, r5
1a001cf2:	4669      	mov	r1, sp
1a001cf4:	f7ff ff98 	bl	1a001c28 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001cf8:	9b06      	ldr	r3, [sp, #24]
1a001cfa:	42ab      	cmp	r3, r5
1a001cfc:	d107      	bne.n	1a001d0e <pll_get_frac+0x3e>
		*ppll = pll[0];
1a001cfe:	466d      	mov	r5, sp
1a001d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001d0c:	e05e      	b.n	1a001dcc <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001d0e:	1aeb      	subs	r3, r5, r3
1a001d10:	d500      	bpl.n	1a001d14 <pll_get_frac+0x44>
		return -val;
1a001d12:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001d14:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001d16:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001d1c:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001d1e:	6963      	ldr	r3, [r4, #20]
1a001d20:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001d22:	7923      	ldrb	r3, [r4, #4]
1a001d24:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001d28:	4628      	mov	r0, r5
1a001d2a:	a910      	add	r1, sp, #64	; 0x40
1a001d2c:	f7ff ff7c 	bl	1a001c28 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001d30:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001d32:	42ab      	cmp	r3, r5
1a001d34:	d107      	bne.n	1a001d46 <pll_get_frac+0x76>
		*ppll = pll[2];
1a001d36:	ad10      	add	r5, sp, #64	; 0x40
1a001d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001d44:	e042      	b.n	1a001dcc <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001d46:	1aeb      	subs	r3, r5, r3
1a001d48:	d500      	bpl.n	1a001d4c <pll_get_frac+0x7c>
		return -val;
1a001d4a:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001d4c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001d4e:	4b20      	ldr	r3, [pc, #128]	; (1a001dd0 <pll_get_frac+0x100>)
1a001d50:	429d      	cmp	r5, r3
1a001d52:	d812      	bhi.n	1a001d7a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a001d54:	2340      	movs	r3, #64	; 0x40
1a001d56:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001d58:	6963      	ldr	r3, [r4, #20]
1a001d5a:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001d5c:	4628      	mov	r0, r5
1a001d5e:	a908      	add	r1, sp, #32
1a001d60:	f7ff ff62 	bl	1a001c28 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001d66:	42ab      	cmp	r3, r5
1a001d68:	d107      	bne.n	1a001d7a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a001d6a:	ad08      	add	r5, sp, #32
1a001d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001d78:	e028      	b.n	1a001dcc <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001d7c:	1aed      	subs	r5, r5, r3
1a001d7e:	d500      	bpl.n	1a001d82 <pll_get_frac+0xb2>
		return -val;
1a001d80:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001d82:	42ae      	cmp	r6, r5
1a001d84:	dc11      	bgt.n	1a001daa <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a001d86:	42be      	cmp	r6, r7
1a001d88:	dc07      	bgt.n	1a001d9a <pll_get_frac+0xca>
			*ppll = pll[0];
1a001d8a:	466d      	mov	r5, sp
1a001d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001d90:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001d98:	e018      	b.n	1a001dcc <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001d9a:	ad10      	add	r5, sp, #64	; 0x40
1a001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001da0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001da4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001da8:	e010      	b.n	1a001dcc <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a001daa:	42af      	cmp	r7, r5
1a001dac:	db07      	blt.n	1a001dbe <pll_get_frac+0xee>
			*ppll = pll[1];
1a001dae:	ad08      	add	r5, sp, #32
1a001db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001db4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001dbc:	e006      	b.n	1a001dcc <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001dbe:	ad10      	add	r5, sp, #64	; 0x40
1a001dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001dc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a001dcc:	b019      	add	sp, #100	; 0x64
1a001dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001dd0:	068e7780 	.word	0x068e7780

1a001dd4 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001dd4:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001dd6:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001dd8:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001dda:	e010      	b.n	1a001dfe <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001ddc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001de0:	0052      	lsls	r2, r2, #1
1a001de2:	4d0d      	ldr	r5, [pc, #52]	; (1a001e18 <Chip_Clock_FindBaseClock+0x44>)
1a001de4:	5aaa      	ldrh	r2, [r5, r2]
1a001de6:	4282      	cmp	r2, r0
1a001de8:	d806      	bhi.n	1a001df8 <Chip_Clock_FindBaseClock+0x24>
1a001dea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001dee:	0052      	lsls	r2, r2, #1
1a001df0:	442a      	add	r2, r5
1a001df2:	8852      	ldrh	r2, [r2, #2]
1a001df4:	4282      	cmp	r2, r0
1a001df6:	d201      	bcs.n	1a001dfc <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001df8:	3301      	adds	r3, #1
1a001dfa:	e000      	b.n	1a001dfe <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a001dfc:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001dfe:	291c      	cmp	r1, #28
1a001e00:	d107      	bne.n	1a001e12 <Chip_Clock_FindBaseClock+0x3e>
1a001e02:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001e06:	0052      	lsls	r2, r2, #1
1a001e08:	4c03      	ldr	r4, [pc, #12]	; (1a001e18 <Chip_Clock_FindBaseClock+0x44>)
1a001e0a:	4422      	add	r2, r4
1a001e0c:	7914      	ldrb	r4, [r2, #4]
1a001e0e:	428c      	cmp	r4, r1
1a001e10:	d1e4      	bne.n	1a001ddc <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a001e12:	4608      	mov	r0, r1
1a001e14:	bc30      	pop	{r4, r5}
1a001e16:	4770      	bx	lr
1a001e18:	1a00789c 	.word	0x1a00789c

1a001e1c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001e1c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001e22:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001e24:	4a0d      	ldr	r2, [pc, #52]	; (1a001e5c <Chip_Clock_EnableCrystal+0x40>)
1a001e26:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001e28:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001e2c:	6992      	ldr	r2, [r2, #24]
1a001e2e:	428a      	cmp	r2, r1
1a001e30:	d001      	beq.n	1a001e36 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001e32:	4a0a      	ldr	r2, [pc, #40]	; (1a001e5c <Chip_Clock_EnableCrystal+0x40>)
1a001e34:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001e36:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001e3a:	4a09      	ldr	r2, [pc, #36]	; (1a001e60 <Chip_Clock_EnableCrystal+0x44>)
1a001e3c:	6811      	ldr	r1, [r2, #0]
1a001e3e:	4a09      	ldr	r2, [pc, #36]	; (1a001e64 <Chip_Clock_EnableCrystal+0x48>)
1a001e40:	4291      	cmp	r1, r2
1a001e42:	d901      	bls.n	1a001e48 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001e44:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001e48:	4a04      	ldr	r2, [pc, #16]	; (1a001e5c <Chip_Clock_EnableCrystal+0x40>)
1a001e4a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001e4c:	9b01      	ldr	r3, [sp, #4]
1a001e4e:	1e5a      	subs	r2, r3, #1
1a001e50:	9201      	str	r2, [sp, #4]
1a001e52:	2b00      	cmp	r3, #0
1a001e54:	d1fa      	bne.n	1a001e4c <Chip_Clock_EnableCrystal+0x30>
}
1a001e56:	b002      	add	sp, #8
1a001e58:	4770      	bx	lr
1a001e5a:	bf00      	nop
1a001e5c:	40050000 	.word	0x40050000
1a001e60:	1a0077c0 	.word	0x1a0077c0
1a001e64:	01312cff 	.word	0x01312cff

1a001e68 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001e68:	3012      	adds	r0, #18
1a001e6a:	4b05      	ldr	r3, [pc, #20]	; (1a001e80 <Chip_Clock_GetDividerSource+0x18>)
1a001e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001e70:	f010 0f01 	tst.w	r0, #1
1a001e74:	d102      	bne.n	1a001e7c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001e76:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001e7a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a001e7c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001e7e:	4770      	bx	lr
1a001e80:	40050000 	.word	0x40050000

1a001e84 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001e84:	f100 0212 	add.w	r2, r0, #18
1a001e88:	4b03      	ldr	r3, [pc, #12]	; (1a001e98 <Chip_Clock_GetDividerDivisor+0x14>)
1a001e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001e8e:	4b03      	ldr	r3, [pc, #12]	; (1a001e9c <Chip_Clock_GetDividerDivisor+0x18>)
1a001e90:	5c18      	ldrb	r0, [r3, r0]
}
1a001e92:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001e96:	4770      	bx	lr
1a001e98:	40050000 	.word	0x40050000
1a001e9c:	1a007894 	.word	0x1a007894

1a001ea0 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001ea0:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001ea2:	2810      	cmp	r0, #16
1a001ea4:	d80a      	bhi.n	1a001ebc <Chip_Clock_GetClockInputHz+0x1c>
1a001ea6:	e8df f000 	tbb	[pc, r0]
1a001eaa:	0b42      	.short	0x0b42
1a001eac:	091f160d 	.word	0x091f160d
1a001eb0:	2b282522 	.word	0x2b282522
1a001eb4:	322e0909 	.word	0x322e0909
1a001eb8:	3a36      	.short	0x3a36
1a001eba:	3e          	.byte	0x3e
1a001ebb:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001ebc:	2000      	movs	r0, #0
1a001ebe:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001ec0:	481e      	ldr	r0, [pc, #120]	; (1a001f3c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001ec2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001ec4:	4b1e      	ldr	r3, [pc, #120]	; (1a001f40 <Chip_Clock_GetClockInputHz+0xa0>)
1a001ec6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001eca:	f003 0307 	and.w	r3, r3, #7
1a001ece:	2b04      	cmp	r3, #4
1a001ed0:	d130      	bne.n	1a001f34 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001ed2:	2000      	movs	r0, #0
1a001ed4:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001ed6:	4b1a      	ldr	r3, [pc, #104]	; (1a001f40 <Chip_Clock_GetClockInputHz+0xa0>)
1a001ed8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001edc:	f003 0307 	and.w	r3, r3, #7
1a001ee0:	2b04      	cmp	r3, #4
1a001ee2:	d029      	beq.n	1a001f38 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001ee4:	4817      	ldr	r0, [pc, #92]	; (1a001f44 <Chip_Clock_GetClockInputHz+0xa4>)
1a001ee6:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001ee8:	4b17      	ldr	r3, [pc, #92]	; (1a001f48 <Chip_Clock_GetClockInputHz+0xa8>)
1a001eea:	6818      	ldr	r0, [r3, #0]
		break;
1a001eec:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001eee:	4b17      	ldr	r3, [pc, #92]	; (1a001f4c <Chip_Clock_GetClockInputHz+0xac>)
1a001ef0:	6818      	ldr	r0, [r3, #0]
		break;
1a001ef2:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001ef4:	4b16      	ldr	r3, [pc, #88]	; (1a001f50 <Chip_Clock_GetClockInputHz+0xb0>)
1a001ef6:	6818      	ldr	r0, [r3, #0]
		break;
1a001ef8:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001efa:	4b15      	ldr	r3, [pc, #84]	; (1a001f50 <Chip_Clock_GetClockInputHz+0xb0>)
1a001efc:	6858      	ldr	r0, [r3, #4]
		break;
1a001efe:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001f00:	f000 f86a 	bl	1a001fd8 <Chip_Clock_GetMainPLLHz>
		break;
1a001f04:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001f06:	2100      	movs	r1, #0
1a001f08:	f000 f89a 	bl	1a002040 <Chip_Clock_GetDivRate>
		break;
1a001f0c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001f0e:	2101      	movs	r1, #1
1a001f10:	f000 f896 	bl	1a002040 <Chip_Clock_GetDivRate>
		break;
1a001f14:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001f16:	2102      	movs	r1, #2
1a001f18:	f000 f892 	bl	1a002040 <Chip_Clock_GetDivRate>
		break;
1a001f1c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001f1e:	2103      	movs	r1, #3
1a001f20:	f000 f88e 	bl	1a002040 <Chip_Clock_GetDivRate>
		break;
1a001f24:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001f26:	2104      	movs	r1, #4
1a001f28:	f000 f88a 	bl	1a002040 <Chip_Clock_GetDivRate>
		break;
1a001f2c:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a001f2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a001f32:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a001f34:	4803      	ldr	r0, [pc, #12]	; (1a001f44 <Chip_Clock_GetClockInputHz+0xa4>)
1a001f36:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a001f38:	4806      	ldr	r0, [pc, #24]	; (1a001f54 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a001f3a:	bd08      	pop	{r3, pc}
1a001f3c:	00b71b00 	.word	0x00b71b00
1a001f40:	40043000 	.word	0x40043000
1a001f44:	017d7840 	.word	0x017d7840
1a001f48:	1a0077c4 	.word	0x1a0077c4
1a001f4c:	1a0077c0 	.word	0x1a0077c0
1a001f50:	10000b18 	.word	0x10000b18
1a001f54:	02faf080 	.word	0x02faf080

1a001f58 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001f58:	b538      	push	{r3, r4, r5, lr}
1a001f5a:	4605      	mov	r5, r0
1a001f5c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001f5e:	7908      	ldrb	r0, [r1, #4]
1a001f60:	f7ff ff9e 	bl	1a001ea0 <Chip_Clock_GetClockInputHz>
1a001f64:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001f66:	4b19      	ldr	r3, [pc, #100]	; (1a001fcc <Chip_Clock_CalcMainPLLValue+0x74>)
1a001f68:	442b      	add	r3, r5
1a001f6a:	4a19      	ldr	r2, [pc, #100]	; (1a001fd0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001f6c:	4293      	cmp	r3, r2
1a001f6e:	d821      	bhi.n	1a001fb4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001f70:	b318      	cbz	r0, 1a001fba <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001f72:	2380      	movs	r3, #128	; 0x80
1a001f74:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001f76:	2300      	movs	r3, #0
1a001f78:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001f7a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001f7c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001f80:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001f82:	4a14      	ldr	r2, [pc, #80]	; (1a001fd4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001f84:	4295      	cmp	r5, r2
1a001f86:	d903      	bls.n	1a001f90 <Chip_Clock_CalcMainPLLValue+0x38>
1a001f88:	fb03 f000 	mul.w	r0, r3, r0
1a001f8c:	42a8      	cmp	r0, r5
1a001f8e:	d007      	beq.n	1a001fa0 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001f90:	4628      	mov	r0, r5
1a001f92:	4621      	mov	r1, r4
1a001f94:	f7ff fe9c 	bl	1a001cd0 <pll_get_frac>
		if (!ppll->nsel) {
1a001f98:	68a3      	ldr	r3, [r4, #8]
1a001f9a:	b18b      	cbz	r3, 1a001fc0 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a001f9c:	3b01      	subs	r3, #1
1a001f9e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a001fa0:	6923      	ldr	r3, [r4, #16]
1a001fa2:	b183      	cbz	r3, 1a001fc6 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001fa4:	68e2      	ldr	r2, [r4, #12]
1a001fa6:	b10a      	cbz	r2, 1a001fac <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001fa8:	3a01      	subs	r2, #1
1a001faa:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a001fac:	3b01      	subs	r3, #1
1a001fae:	6123      	str	r3, [r4, #16]

	return 0;
1a001fb0:	2000      	movs	r0, #0
1a001fb2:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a001fb4:	f04f 30ff 	mov.w	r0, #4294967295
1a001fb8:	bd38      	pop	{r3, r4, r5, pc}
1a001fba:	f04f 30ff 	mov.w	r0, #4294967295
1a001fbe:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a001fc0:	f04f 30ff 	mov.w	r0, #4294967295
1a001fc4:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a001fc6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a001fca:	bd38      	pop	{r3, r4, r5, pc}
1a001fcc:	ff6b3a10 	.word	0xff6b3a10
1a001fd0:	0b940510 	.word	0x0b940510
1a001fd4:	094c5eff 	.word	0x094c5eff

1a001fd8 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a001fd8:	b570      	push	{r4, r5, r6, lr}
1a001fda:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001fdc:	4d16      	ldr	r5, [pc, #88]	; (1a002038 <Chip_Clock_GetMainPLLHz+0x60>)
1a001fde:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001fe0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001fe4:	f7ff ff5c 	bl	1a001ea0 <Chip_Clock_GetClockInputHz>
1a001fe8:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001fea:	4b14      	ldr	r3, [pc, #80]	; (1a00203c <Chip_Clock_GetMainPLLHz+0x64>)
1a001fec:	6818      	ldr	r0, [r3, #0]
1a001fee:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001ff0:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a001ff2:	f010 0001 	ands.w	r0, r0, #1
1a001ff6:	d01d      	beq.n	1a002034 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a001ff8:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001ffc:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002000:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a002004:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a002008:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a00200a:	3201      	adds	r2, #1
	p = ptab[psel];
1a00200c:	a802      	add	r0, sp, #8
1a00200e:	4401      	add	r1, r0
1a002010:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a002014:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002018:	d100      	bne.n	1a00201c <Chip_Clock_GetMainPLLHz+0x44>
1a00201a:	b125      	cbz	r5, 1a002026 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a00201c:	fbb6 f0f2 	udiv	r0, r6, r2
1a002020:	fb03 f000 	mul.w	r0, r3, r0
1a002024:	e006      	b.n	1a002034 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a002026:	0040      	lsls	r0, r0, #1
1a002028:	fbb3 f3f0 	udiv	r3, r3, r0
1a00202c:	fbb6 f0f2 	udiv	r0, r6, r2
1a002030:	fb00 f003 	mul.w	r0, r0, r3
}
1a002034:	b002      	add	sp, #8
1a002036:	bd70      	pop	{r4, r5, r6, pc}
1a002038:	40050000 	.word	0x40050000
1a00203c:	1a007890 	.word	0x1a007890

1a002040 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002040:	b538      	push	{r3, r4, r5, lr}
1a002042:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a002044:	4608      	mov	r0, r1
1a002046:	f7ff ff0f 	bl	1a001e68 <Chip_Clock_GetDividerSource>
1a00204a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00204c:	4620      	mov	r0, r4
1a00204e:	f7ff ff19 	bl	1a001e84 <Chip_Clock_GetDividerDivisor>
1a002052:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002054:	4628      	mov	r0, r5
1a002056:	f7ff ff23 	bl	1a001ea0 <Chip_Clock_GetClockInputHz>
1a00205a:	3401      	adds	r4, #1
}
1a00205c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002060:	bd38      	pop	{r3, r4, r5, pc}
1a002062:	bf00      	nop

1a002064 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002064:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002066:	0085      	lsls	r5, r0, #2
1a002068:	4c0d      	ldr	r4, [pc, #52]	; (1a0020a0 <Chip_Clock_SetBaseClock+0x3c>)
1a00206a:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a00206c:	281b      	cmp	r0, #27
1a00206e:	d80f      	bhi.n	1a002090 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a002070:	2911      	cmp	r1, #17
1a002072:	d012      	beq.n	1a00209a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002074:	4c0b      	ldr	r4, [pc, #44]	; (1a0020a4 <Chip_Clock_SetBaseClock+0x40>)
1a002076:	402c      	ands	r4, r5

			if (autoblocken) {
1a002078:	b10a      	cbz	r2, 1a00207e <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a00207a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a00207e:	b10b      	cbz	r3, 1a002084 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a002080:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002084:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002088:	0080      	lsls	r0, r0, #2
1a00208a:	4b05      	ldr	r3, [pc, #20]	; (1a0020a0 <Chip_Clock_SetBaseClock+0x3c>)
1a00208c:	501c      	str	r4, [r3, r0]
1a00208e:	e004      	b.n	1a00209a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002090:	f045 0501 	orr.w	r5, r5, #1
1a002094:	0080      	lsls	r0, r0, #2
1a002096:	4b02      	ldr	r3, [pc, #8]	; (1a0020a0 <Chip_Clock_SetBaseClock+0x3c>)
1a002098:	501d      	str	r5, [r3, r0]
	}
}
1a00209a:	bc30      	pop	{r4, r5}
1a00209c:	4770      	bx	lr
1a00209e:	bf00      	nop
1a0020a0:	4005005c 	.word	0x4005005c
1a0020a4:	e0fff7fe 	.word	0xe0fff7fe

1a0020a8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a0020a8:	281b      	cmp	r0, #27
1a0020aa:	d808      	bhi.n	1a0020be <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a0020ac:	0080      	lsls	r0, r0, #2
1a0020ae:	4b06      	ldr	r3, [pc, #24]	; (1a0020c8 <Chip_Clock_GetBaseClock+0x20>)
1a0020b0:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a0020b2:	f010 0f01 	tst.w	r0, #1
1a0020b6:	d104      	bne.n	1a0020c2 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0020b8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0020bc:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a0020be:	2011      	movs	r0, #17
1a0020c0:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a0020c2:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0020c4:	4770      	bx	lr
1a0020c6:	bf00      	nop
1a0020c8:	4005005c 	.word	0x4005005c

1a0020cc <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a0020cc:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0020ce:	f7ff ffeb 	bl	1a0020a8 <Chip_Clock_GetBaseClock>
1a0020d2:	f7ff fee5 	bl	1a001ea0 <Chip_Clock_GetClockInputHz>
}
1a0020d6:	bd08      	pop	{r3, pc}

1a0020d8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0020d8:	b909      	cbnz	r1, 1a0020de <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a0020da:	2101      	movs	r1, #1
1a0020dc:	e000      	b.n	1a0020e0 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a0020de:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a0020e0:	b10a      	cbz	r2, 1a0020e6 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a0020e2:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0020e6:	2b02      	cmp	r3, #2
1a0020e8:	d101      	bne.n	1a0020ee <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a0020ea:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0020ee:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0020f2:	d305      	bcc.n	1a002100 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0020f4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0020f8:	4b04      	ldr	r3, [pc, #16]	; (1a00210c <Chip_Clock_EnableOpts+0x34>)
1a0020fa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0020fe:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002100:	3020      	adds	r0, #32
1a002102:	4b03      	ldr	r3, [pc, #12]	; (1a002110 <Chip_Clock_EnableOpts+0x38>)
1a002104:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002108:	4770      	bx	lr
1a00210a:	bf00      	nop
1a00210c:	40052000 	.word	0x40052000
1a002110:	40051000 	.word	0x40051000

1a002114 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002114:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002118:	d309      	bcc.n	1a00212e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00211a:	4a09      	ldr	r2, [pc, #36]	; (1a002140 <Chip_Clock_Enable+0x2c>)
1a00211c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002120:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002124:	f043 0301 	orr.w	r3, r3, #1
1a002128:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00212c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00212e:	4a05      	ldr	r2, [pc, #20]	; (1a002144 <Chip_Clock_Enable+0x30>)
1a002130:	3020      	adds	r0, #32
1a002132:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002136:	f043 0301 	orr.w	r3, r3, #1
1a00213a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00213e:	4770      	bx	lr
1a002140:	40052000 	.word	0x40052000
1a002144:	40051000 	.word	0x40051000

1a002148 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002148:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00214a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00214e:	d305      	bcc.n	1a00215c <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002150:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002154:	4a0d      	ldr	r2, [pc, #52]	; (1a00218c <Chip_Clock_GetRate+0x44>)
1a002156:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00215a:	e004      	b.n	1a002166 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00215c:	f100 0320 	add.w	r3, r0, #32
1a002160:	4a0b      	ldr	r2, [pc, #44]	; (1a002190 <Chip_Clock_GetRate+0x48>)
1a002162:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002166:	f014 0f01 	tst.w	r4, #1
1a00216a:	d00c      	beq.n	1a002186 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00216c:	f7ff fe32 	bl	1a001dd4 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002170:	f7ff ffac 	bl	1a0020cc <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a002174:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002178:	d101      	bne.n	1a00217e <Chip_Clock_GetRate+0x36>
			div = 1;
1a00217a:	2301      	movs	r3, #1
1a00217c:	e000      	b.n	1a002180 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a00217e:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a002180:	fbb0 f0f3 	udiv	r0, r0, r3
1a002184:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a002186:	2000      	movs	r0, #0
	}

	return rate;
}
1a002188:	bd10      	pop	{r4, pc}
1a00218a:	bf00      	nop
1a00218c:	40052000 	.word	0x40052000
1a002190:	40051000 	.word	0x40051000

1a002194 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a002194:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a002196:	6843      	ldr	r3, [r0, #4]
1a002198:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00219c:	2b30      	cmp	r3, #48	; 0x30
1a00219e:	d028      	beq.n	1a0021f2 <Chip_I2CM_XferHandler+0x5e>
1a0021a0:	d80e      	bhi.n	1a0021c0 <Chip_I2CM_XferHandler+0x2c>
1a0021a2:	2b10      	cmp	r3, #16
1a0021a4:	d01b      	beq.n	1a0021de <Chip_I2CM_XferHandler+0x4a>
1a0021a6:	d804      	bhi.n	1a0021b2 <Chip_I2CM_XferHandler+0x1e>
1a0021a8:	2b00      	cmp	r3, #0
1a0021aa:	d05d      	beq.n	1a002268 <Chip_I2CM_XferHandler+0xd4>
1a0021ac:	2b08      	cmp	r3, #8
1a0021ae:	d016      	beq.n	1a0021de <Chip_I2CM_XferHandler+0x4a>
1a0021b0:	e05e      	b.n	1a002270 <Chip_I2CM_XferHandler+0xdc>
1a0021b2:	2b20      	cmp	r3, #32
1a0021b4:	d01d      	beq.n	1a0021f2 <Chip_I2CM_XferHandler+0x5e>
1a0021b6:	2b28      	cmp	r3, #40	; 0x28
1a0021b8:	d023      	beq.n	1a002202 <Chip_I2CM_XferHandler+0x6e>
1a0021ba:	2b18      	cmp	r3, #24
1a0021bc:	d158      	bne.n	1a002270 <Chip_I2CM_XferHandler+0xdc>
1a0021be:	e020      	b.n	1a002202 <Chip_I2CM_XferHandler+0x6e>
1a0021c0:	2b48      	cmp	r3, #72	; 0x48
1a0021c2:	d049      	beq.n	1a002258 <Chip_I2CM_XferHandler+0xc4>
1a0021c4:	d804      	bhi.n	1a0021d0 <Chip_I2CM_XferHandler+0x3c>
1a0021c6:	2b38      	cmp	r3, #56	; 0x38
1a0021c8:	d04a      	beq.n	1a002260 <Chip_I2CM_XferHandler+0xcc>
1a0021ca:	2b40      	cmp	r3, #64	; 0x40
1a0021cc:	d033      	beq.n	1a002236 <Chip_I2CM_XferHandler+0xa2>
1a0021ce:	e04f      	b.n	1a002270 <Chip_I2CM_XferHandler+0xdc>
1a0021d0:	2b58      	cmp	r3, #88	; 0x58
1a0021d2:	d028      	beq.n	1a002226 <Chip_I2CM_XferHandler+0x92>
1a0021d4:	2bf8      	cmp	r3, #248	; 0xf8
1a0021d6:	d05b      	beq.n	1a002290 <Chip_I2CM_XferHandler+0xfc>
1a0021d8:	2b50      	cmp	r3, #80	; 0x50
1a0021da:	d149      	bne.n	1a002270 <Chip_I2CM_XferHandler+0xdc>
1a0021dc:	e023      	b.n	1a002226 <Chip_I2CM_XferHandler+0x92>
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0021de:	780c      	ldrb	r4, [r1, #0]
1a0021e0:	888a      	ldrh	r2, [r1, #4]
1a0021e2:	fab2 f382 	clz	r3, r2
1a0021e6:	095b      	lsrs	r3, r3, #5
1a0021e8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
1a0021ec:	6083      	str	r3, [r0, #8]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a0021ee:	233c      	movs	r3, #60	; 0x3c

	switch (Chip_I2CM_GetCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
		break;
1a0021f0:	e043      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>

	/* Tx handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x30:		/* DATA sent NAK received */
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0021f2:	784b      	ldrb	r3, [r1, #1]
1a0021f4:	f013 0f01 	tst.w	r3, #1
1a0021f8:	d103      	bne.n	1a002202 <Chip_I2CM_XferHandler+0x6e>
			xfer->status = I2CM_STATUS_NAK;
1a0021fa:	2302      	movs	r3, #2
1a0021fc:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0021fe:	232c      	movs	r3, #44	; 0x2c
			break;
1a002200:	e03b      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>
		}

	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a002202:	888b      	ldrh	r3, [r1, #4]
1a002204:	b92b      	cbnz	r3, 1a002212 <Chip_I2CM_XferHandler+0x7e>
			if (xfer->rxSz) {
1a002206:	88cb      	ldrh	r3, [r1, #6]
1a002208:	2b00      	cmp	r3, #0
1a00220a:	d135      	bne.n	1a002278 <Chip_I2CM_XferHandler+0xe4>
				cclr &= ~I2C_CON_STA;
			}
			else {
				xfer->status = I2CM_STATUS_OK;
1a00220c:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a00220e:	232c      	movs	r3, #44	; 0x2c
1a002210:	e033      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>
			}

		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a002212:	688b      	ldr	r3, [r1, #8]
1a002214:	1c5a      	adds	r2, r3, #1
1a002216:	608a      	str	r2, [r1, #8]
1a002218:	781b      	ldrb	r3, [r3, #0]
1a00221a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a00221c:	888b      	ldrh	r3, [r1, #4]
1a00221e:	3b01      	subs	r3, #1
1a002220:	808b      	strh	r3, [r1, #4]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002222:	233c      	movs	r3, #60	; 0x3c
1a002224:	e029      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a002226:	68cb      	ldr	r3, [r1, #12]
1a002228:	1c5a      	adds	r2, r3, #1
1a00222a:	60ca      	str	r2, [r1, #12]
1a00222c:	6882      	ldr	r2, [r0, #8]
1a00222e:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a002230:	88cb      	ldrh	r3, [r1, #6]
1a002232:	3b01      	subs	r3, #1
1a002234:	80cb      	strh	r3, [r1, #6]

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a002236:	88ca      	ldrh	r2, [r1, #6]
1a002238:	2a01      	cmp	r2, #1
1a00223a:	d805      	bhi.n	1a002248 <Chip_I2CM_XferHandler+0xb4>
1a00223c:	784b      	ldrb	r3, [r1, #1]
1a00223e:	f013 0f02 	tst.w	r3, #2
1a002242:	d103      	bne.n	1a00224c <Chip_I2CM_XferHandler+0xb8>
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002244:	233c      	movs	r3, #60	; 0x3c
1a002246:	e002      	b.n	1a00224e <Chip_I2CM_XferHandler+0xba>
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
			cclr &= ~I2C_CON_AA;
1a002248:	2338      	movs	r3, #56	; 0x38
1a00224a:	e000      	b.n	1a00224e <Chip_I2CM_XferHandler+0xba>
1a00224c:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a00224e:	b9a2      	cbnz	r2, 1a00227a <Chip_I2CM_XferHandler+0xe6>
			xfer->status = I2CM_STATUS_OK;
1a002250:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a002252:	f023 0310 	bic.w	r3, r3, #16
1a002256:	e010      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>
		}
		break;

	/* NAK Handling */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a002258:	2304      	movs	r3, #4
1a00225a:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a00225c:	232c      	movs	r3, #44	; 0x2c
		break;
1a00225e:	e00c      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
1a002260:	2305      	movs	r3, #5
1a002262:	804b      	strh	r3, [r1, #2]
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002264:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;
1a002266:	e008      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a002268:	2303      	movs	r3, #3
1a00226a:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a00226c:	232c      	movs	r3, #44	; 0x2c
        break;
1a00226e:	e004      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>
    case 0xF8:
      return 0;
      
    default:
		xfer->status = I2CM_STATUS_ERROR;
1a002270:	2301      	movs	r3, #1
1a002272:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a002274:	232c      	movs	r3, #44	; 0x2c
        break;
1a002276:	e000      	b.n	1a00227a <Chip_I2CM_XferHandler+0xe6>

	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
			if (xfer->rxSz) {
				cclr &= ~I2C_CON_STA;
1a002278:	231c      	movs	r3, #28
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00227a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00227e:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a002280:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a002284:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a002286:	8848      	ldrh	r0, [r1, #2]
1a002288:	38ff      	subs	r0, #255	; 0xff
1a00228a:	bf18      	it	ne
1a00228c:	2001      	movne	r0, #1
1a00228e:	e000      	b.n	1a002292 <Chip_I2CM_XferHandler+0xfe>
	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
		cclr &= ~I2C_CON_STO;
        break;
    case 0xF8:
      return 0;
1a002290:	2000      	movs	r0, #0
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);

	return xfer->status != I2CM_STATUS_BUSY;
}
1a002292:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002296:	4770      	bx	lr

1a002298 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a002298:	23ff      	movs	r3, #255	; 0xff
1a00229a:	804b      	strh	r3, [r1, #2]
 * @note	This function clears all control/status flags.
 */
static INLINE void Chip_I2CM_ResetControl(LPC_I2C_T *pI2C)
{
	/* Reset STA, AA and SI. Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a00229c:	232c      	movs	r3, #44	; 0x2c
1a00229e:	6183      	str	r3, [r0, #24]
 * @note	This function sets the controller to transmit START condition when
 *          the bus becomes free.
 */
static INLINE void Chip_I2CM_SendStart(LPC_I2C_T *pI2C)
{
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a0022a0:	2360      	movs	r3, #96	; 0x60
1a0022a2:	6003      	str	r3, [r0, #0]
1a0022a4:	4770      	bx	lr
1a0022a6:	bf00      	nop

1a0022a8 <Chip_I2CM_XferBlocking>:
	Chip_I2CM_SendStart(pI2C);
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0022a8:	b538      	push	{r3, r4, r5, lr}
1a0022aa:	4604      	mov	r4, r0
1a0022ac:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a0022ae:	f7ff fff3 	bl	1a002298 <Chip_I2CM_Xfer>
}

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	uint32_t ret = 0;
1a0022b2:	2000      	movs	r0, #0
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);

	while (ret == 0) {
1a0022b4:	e007      	b.n	1a0022c6 <Chip_I2CM_XferBlocking+0x1e>
 * @return	Returns 0 if state didn't change
 * @note
 */
static INLINE uint32_t Chip_I2CM_StateChanged(LPC_I2C_T *pI2C)
{
	return pI2C->CONSET & I2C_CON_SI;
1a0022b6:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a0022b8:	f013 0f08 	tst.w	r3, #8
1a0022bc:	d0fb      	beq.n	1a0022b6 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a0022be:	4620      	mov	r0, r4
1a0022c0:	4629      	mov	r1, r5
1a0022c2:	f7ff ff67 	bl	1a002194 <Chip_I2CM_XferHandler>
{
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);

	while (ret == 0) {
1a0022c6:	2800      	cmp	r0, #0
1a0022c8:	d0f5      	beq.n	1a0022b6 <Chip_I2CM_XferBlocking+0xe>
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
	}
	return ret;
}
1a0022ca:	bd38      	pop	{r3, r4, r5, pc}

1a0022cc <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0022cc:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0022ce:	4b10      	ldr	r3, [pc, #64]	; (1a002310 <fpuInit+0x44>)
1a0022d0:	681b      	ldr	r3, [r3, #0]
1a0022d2:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0022d4:	4b0f      	ldr	r3, [pc, #60]	; (1a002314 <fpuInit+0x48>)
1a0022d6:	681b      	ldr	r3, [r3, #0]
1a0022d8:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a0022da:	9a02      	ldr	r2, [sp, #8]
1a0022dc:	4b0e      	ldr	r3, [pc, #56]	; (1a002318 <fpuInit+0x4c>)
1a0022de:	429a      	cmp	r2, r3
1a0022e0:	d105      	bne.n	1a0022ee <fpuInit+0x22>
1a0022e2:	9a01      	ldr	r2, [sp, #4]
1a0022e4:	4b0d      	ldr	r3, [pc, #52]	; (1a00231c <fpuInit+0x50>)
1a0022e6:	429a      	cmp	r2, r3
1a0022e8:	d003      	beq.n	1a0022f2 <fpuInit+0x26>
1a0022ea:	2300      	movs	r3, #0
1a0022ec:	e002      	b.n	1a0022f4 <fpuInit+0x28>
1a0022ee:	2300      	movs	r3, #0
1a0022f0:	e000      	b.n	1a0022f4 <fpuInit+0x28>
1a0022f2:	2301      	movs	r3, #1

	if (vfpPresent) {
1a0022f4:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0022f8:	d008      	beq.n	1a00230c <fpuInit+0x40>
		Cpacr = *regCpacr;
1a0022fa:	4a09      	ldr	r2, [pc, #36]	; (1a002320 <fpuInit+0x54>)
1a0022fc:	6813      	ldr	r3, [r2, #0]
1a0022fe:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002300:	9b03      	ldr	r3, [sp, #12]
1a002302:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002306:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a002308:	9b03      	ldr	r3, [sp, #12]
1a00230a:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a00230c:	b004      	add	sp, #16
1a00230e:	4770      	bx	lr
1a002310:	e000ef40 	.word	0xe000ef40
1a002314:	e000ef44 	.word	0xe000ef44
1a002318:	10110021 	.word	0x10110021
1a00231c:	11000011 	.word	0x11000011
1a002320:	e000ed88 	.word	0xe000ed88

1a002324 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a002324:	4770      	bx	lr
1a002326:	bf00      	nop

1a002328 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002328:	b570      	push	{r4, r5, r6, lr}
1a00232a:	b08a      	sub	sp, #40	; 0x28
1a00232c:	4605      	mov	r5, r0
1a00232e:	460e      	mov	r6, r1
1a002330:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002332:	f242 7310 	movw	r3, #10000	; 0x2710
1a002336:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002338:	2806      	cmp	r0, #6
1a00233a:	d101      	bne.n	1a002340 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a00233c:	f7ff fd6e 	bl	1a001e1c <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002340:	2004      	movs	r0, #4
1a002342:	4629      	mov	r1, r5
1a002344:	2201      	movs	r2, #1
1a002346:	2300      	movs	r3, #0
1a002348:	f7ff fe8c 	bl	1a002064 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00234c:	4a47      	ldr	r2, [pc, #284]	; (1a00246c <Chip_SetupCoreClock+0x144>)
1a00234e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002350:	f043 0301 	orr.w	r3, r3, #1
1a002354:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002356:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00235a:	4630      	mov	r0, r6
1a00235c:	a901      	add	r1, sp, #4
1a00235e:	f7ff fdfb 	bl	1a001f58 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002362:	4b43      	ldr	r3, [pc, #268]	; (1a002470 <Chip_SetupCoreClock+0x148>)
1a002364:	429e      	cmp	r6, r3
1a002366:	d913      	bls.n	1a002390 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a002368:	9b01      	ldr	r3, [sp, #4]
1a00236a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00236e:	d000      	beq.n	1a002372 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002370:	e7fe      	b.n	1a002370 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a002372:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002376:	d005      	beq.n	1a002384 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00237c:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00237e:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a002380:	2601      	movs	r6, #1
1a002382:	e007      	b.n	1a002394 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a002384:	9b04      	ldr	r3, [sp, #16]
1a002386:	3301      	adds	r3, #1
1a002388:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a00238a:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00238c:	2600      	movs	r6, #0
1a00238e:	e001      	b.n	1a002394 <Chip_SetupCoreClock+0x6c>
1a002390:	2500      	movs	r5, #0
1a002392:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002394:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002398:	9b01      	ldr	r3, [sp, #4]
1a00239a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00239e:	9a05      	ldr	r2, [sp, #20]
1a0023a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0023a4:	9a03      	ldr	r2, [sp, #12]
1a0023a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0023aa:	9a04      	ldr	r2, [sp, #16]
1a0023ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0023b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0023b4:	4a2d      	ldr	r2, [pc, #180]	; (1a00246c <Chip_SetupCoreClock+0x144>)
1a0023b6:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0023b8:	4b2c      	ldr	r3, [pc, #176]	; (1a00246c <Chip_SetupCoreClock+0x144>)
1a0023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0023bc:	f013 0f01 	tst.w	r3, #1
1a0023c0:	d0fa      	beq.n	1a0023b8 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0023c2:	2004      	movs	r0, #4
1a0023c4:	2109      	movs	r1, #9
1a0023c6:	2201      	movs	r2, #1
1a0023c8:	2300      	movs	r3, #0
1a0023ca:	f7ff fe4b 	bl	1a002064 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0023ce:	b1ee      	cbz	r6, 1a00240c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0023d0:	f242 7310 	movw	r3, #10000	; 0x2710
1a0023d4:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0023d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0023d8:	1e5a      	subs	r2, r3, #1
1a0023da:	9209      	str	r2, [sp, #36]	; 0x24
1a0023dc:	2b00      	cmp	r3, #0
1a0023de:	d1fa      	bne.n	1a0023d6 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a0023e0:	9b01      	ldr	r3, [sp, #4]
1a0023e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0023e6:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0023e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0023ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0023f0:	9a05      	ldr	r2, [sp, #20]
1a0023f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0023f6:	9a03      	ldr	r2, [sp, #12]
1a0023f8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0023fc:	9a04      	ldr	r2, [sp, #16]
1a0023fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002402:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002406:	4a19      	ldr	r2, [pc, #100]	; (1a00246c <Chip_SetupCoreClock+0x144>)
1a002408:	6453      	str	r3, [r2, #68]	; 0x44
1a00240a:	e01c      	b.n	1a002446 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a00240c:	b1dd      	cbz	r5, 1a002446 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00240e:	f242 7310 	movw	r3, #10000	; 0x2710
1a002412:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002414:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002416:	1e5a      	subs	r2, r3, #1
1a002418:	9209      	str	r2, [sp, #36]	; 0x24
1a00241a:	2b00      	cmp	r3, #0
1a00241c:	d1fa      	bne.n	1a002414 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a00241e:	9b04      	ldr	r3, [sp, #16]
1a002420:	1e59      	subs	r1, r3, #1
1a002422:	9104      	str	r1, [sp, #16]
1a002424:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002428:	9b01      	ldr	r3, [sp, #4]
1a00242a:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a00242e:	9b05      	ldr	r3, [sp, #20]
1a002430:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a002434:	9b03      	ldr	r3, [sp, #12]
1a002436:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a00243a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a00243e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002442:	4a0a      	ldr	r2, [pc, #40]	; (1a00246c <Chip_SetupCoreClock+0x144>)
1a002444:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002446:	b964      	cbnz	r4, 1a002462 <Chip_SetupCoreClock+0x13a>
1a002448:	e00e      	b.n	1a002468 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00244a:	4a0a      	ldr	r2, [pc, #40]	; (1a002474 <Chip_SetupCoreClock+0x14c>)
1a00244c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002450:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002454:	7859      	ldrb	r1, [r3, #1]
1a002456:	789a      	ldrb	r2, [r3, #2]
1a002458:	78db      	ldrb	r3, [r3, #3]
1a00245a:	f7ff fe03 	bl	1a002064 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00245e:	3401      	adds	r4, #1
1a002460:	e000      	b.n	1a002464 <Chip_SetupCoreClock+0x13c>
1a002462:	2400      	movs	r4, #0
1a002464:	2c11      	cmp	r4, #17
1a002466:	d9f0      	bls.n	1a00244a <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002468:	b00a      	add	sp, #40	; 0x28
1a00246a:	bd70      	pop	{r4, r5, r6, pc}
1a00246c:	40050000 	.word	0x40050000
1a002470:	068e7780 	.word	0x068e7780
1a002474:	1a007908 	.word	0x1a007908

1a002478 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a002478:	2901      	cmp	r1, #1
1a00247a:	d109      	bne.n	1a002490 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a00247c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002480:	0080      	lsls	r0, r0, #2
1a002482:	4b04      	ldr	r3, [pc, #16]	; (1a002494 <Chip_I2C_EventHandler+0x1c>)
1a002484:	4418      	add	r0, r3
1a002486:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a002488:	7d13      	ldrb	r3, [r2, #20]
1a00248a:	b2db      	uxtb	r3, r3
1a00248c:	2b04      	cmp	r3, #4
1a00248e:	d0fb      	beq.n	1a002488 <Chip_I2C_EventHandler+0x10>
1a002490:	4770      	bx	lr
1a002492:	bf00      	nop
1a002494:	10000048 	.word	0x10000048

1a002498 <handleMasterXferState>:
	return I2C_SLAVE_GENERAL;
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
1a002498:	b410      	push	{r4}
}

/* Get current state of the I2C peripheral */
STATIC INLINE int getCurState(LPC_I2C_T *pI2C)
{
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a00249a:	6843      	ldr	r3, [r0, #4]
1a00249c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;

	switch (getCurState(pI2C)) {
1a0024a0:	2b58      	cmp	r3, #88	; 0x58
1a0024a2:	d871      	bhi.n	1a002588 <handleMasterXferState+0xf0>
1a0024a4:	e8df f003 	tbb	[pc, r3]
1a0024a8:	7070706c 	.word	0x7070706c
1a0024ac:	70707070 	.word	0x70707070
1a0024b0:	7070702f 	.word	0x7070702f
1a0024b4:	70707070 	.word	0x70707070
1a0024b8:	7070702f 	.word	0x7070702f
1a0024bc:	70707070 	.word	0x70707070
1a0024c0:	70707039 	.word	0x70707039
1a0024c4:	70707070 	.word	0x70707070
1a0024c8:	70707060 	.word	0x70707060
1a0024cc:	70707070 	.word	0x70707070
1a0024d0:	70707039 	.word	0x70707039
1a0024d4:	70707070 	.word	0x70707070
1a0024d8:	70707064 	.word	0x70707064
1a0024dc:	70707070 	.word	0x70707070
1a0024e0:	70707068 	.word	0x70707068
1a0024e4:	70707070 	.word	0x70707070
1a0024e8:	70707059 	.word	0x70707059
1a0024ec:	70707070 	.word	0x70707070
1a0024f0:	70707060 	.word	0x70707060
1a0024f4:	70707070 	.word	0x70707070
1a0024f8:	7070702d 	.word	0x7070702d
1a0024fc:	70707070 	.word	0x70707070
1a002500:	4f          	.byte	0x4f
1a002501:	00          	.byte	0x00
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002502:	233c      	movs	r3, #60	; 0x3c
1a002504:	e020      	b.n	1a002548 <handleMasterXferState+0xb0>

	switch (getCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a002506:	780a      	ldrb	r2, [r1, #0]
1a002508:	688b      	ldr	r3, [r1, #8]
1a00250a:	fab3 f383 	clz	r3, r3
1a00250e:	095b      	lsrs	r3, r3, #5
1a002510:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a002514:	6083      	str	r3, [r0, #8]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002516:	233c      	movs	r3, #60	; 0x3c

	switch (getCurState(pI2C)) {
	case 0x08:		/* Start condition on bus */
	case 0x10:		/* Repeated start condition */
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
		break;
1a002518:	e037      	b.n	1a00258a <handleMasterXferState+0xf2>

	/* Tx handling */
	case 0x18:		/* SLA+W sent and ACK received */
	case 0x28:		/* DATA sent and ACK received */
		if (!xfer->txSz) {
1a00251a:	688b      	ldr	r3, [r1, #8]
1a00251c:	b94b      	cbnz	r3, 1a002532 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a00251e:	690b      	ldr	r3, [r1, #16]
1a002520:	b113      	cbz	r3, 1a002528 <handleMasterXferState+0x90>
1a002522:	f06f 0320 	mvn.w	r3, #32
1a002526:	e001      	b.n	1a00252c <handleMasterXferState+0x94>
1a002528:	f06f 0310 	mvn.w	r3, #16
1a00252c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a002530:	e02b      	b.n	1a00258a <handleMasterXferState+0xf2>
		}
		else {
			pI2C->DAT = *xfer->txBuff++;
1a002532:	684b      	ldr	r3, [r1, #4]
1a002534:	1c5a      	adds	r2, r3, #1
1a002536:	604a      	str	r2, [r1, #4]
1a002538:	781b      	ldrb	r3, [r3, #0]
1a00253a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a00253c:	688b      	ldr	r3, [r1, #8]
1a00253e:	3b01      	subs	r3, #1
1a002540:	608b      	str	r3, [r1, #8]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002542:	233c      	movs	r3, #60	; 0x3c
1a002544:	e021      	b.n	1a00258a <handleMasterXferState+0xf2>
		}
		break;

	/* Rx handling */
	case 0x58:		/* Data Received and NACK sent */
		cclr &= ~I2C_CON_STO;
1a002546:	232c      	movs	r3, #44	; 0x2c

	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
1a002548:	68ca      	ldr	r2, [r1, #12]
1a00254a:	1c54      	adds	r4, r2, #1
1a00254c:	60cc      	str	r4, [r1, #12]
1a00254e:	6884      	ldr	r4, [r0, #8]
1a002550:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a002552:	690a      	ldr	r2, [r1, #16]
1a002554:	3a01      	subs	r2, #1
1a002556:	610a      	str	r2, [r1, #16]
1a002558:	e000      	b.n	1a00255c <handleMasterXferState+0xc4>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a00255a:	233c      	movs	r3, #60	; 0x3c
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if (xfer->rxSz > 1) {
1a00255c:	690a      	ldr	r2, [r1, #16]
1a00255e:	2a01      	cmp	r2, #1
1a002560:	dd13      	ble.n	1a00258a <handleMasterXferState+0xf2>
			cclr &= ~I2C_CON_AA;
1a002562:	f023 0304 	bic.w	r3, r3, #4
1a002566:	e010      	b.n	1a00258a <handleMasterXferState+0xf2>
		break;

	/* NAK Handling */
	case 0x20:		/* SLA+W sent NAK received */
	case 0x48:		/* SLA+R sent NAK received */
		xfer->status = I2C_STATUS_SLAVENAK;
1a002568:	2305      	movs	r3, #5
1a00256a:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a00256c:	232c      	movs	r3, #44	; 0x2c
		break;
1a00256e:	e00c      	b.n	1a00258a <handleMasterXferState+0xf2>

	case 0x30:		/* DATA sent NAK received */
		xfer->status = I2C_STATUS_NAK;
1a002570:	2301      	movs	r3, #1
1a002572:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002574:	232c      	movs	r3, #44	; 0x2c
		break;
1a002576:	e008      	b.n	1a00258a <handleMasterXferState+0xf2>

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
1a002578:	2302      	movs	r3, #2
1a00257a:	750b      	strb	r3, [r1, #20]
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a00257c:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
		break;

	case 0x38:		/* Arbitration lost */
		xfer->status = I2C_STATUS_ARBLOST;
		break;
1a00257e:	e004      	b.n	1a00258a <handleMasterXferState+0xf2>

	/* Bus Error */
	case 0x00:
		xfer->status = I2C_STATUS_BUSERR;
1a002580:	2303      	movs	r3, #3
1a002582:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a002584:	232c      	movs	r3, #44	; 0x2c
1a002586:	e000      	b.n	1a00258a <handleMasterXferState+0xf2>
}

/* Master transfer state change handler handler */
int handleMasterXferState(LPC_I2C_T *pI2C, I2C_XFER_T  *xfer)
{
	uint32_t cclr = I2C_CON_FLAGS;
1a002588:	233c      	movs	r3, #60	; 0x3c
		xfer->status = I2C_STATUS_BUSERR;
		cclr &= ~I2C_CON_STO;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00258a:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a00258e:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a002590:	f023 0210 	bic.w	r2, r3, #16
1a002594:	6182      	str	r2, [r0, #24]

	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a002596:	f013 0f10 	tst.w	r3, #16
1a00259a:	d002      	beq.n	1a0025a2 <handleMasterXferState+0x10a>
1a00259c:	7d0b      	ldrb	r3, [r1, #20]
1a00259e:	2b02      	cmp	r3, #2
1a0025a0:	d105      	bne.n	1a0025ae <handleMasterXferState+0x116>
		if (xfer->status == I2C_STATUS_BUSY) {
1a0025a2:	7d0b      	ldrb	r3, [r1, #20]
1a0025a4:	2b04      	cmp	r3, #4
1a0025a6:	d104      	bne.n	1a0025b2 <handleMasterXferState+0x11a>
			xfer->status = I2C_STATUS_DONE;
1a0025a8:	2000      	movs	r0, #0
1a0025aa:	7508      	strb	r0, [r1, #20]
1a0025ac:	e002      	b.n	1a0025b4 <handleMasterXferState+0x11c>
		}
		return 0;
	}
	return 1;
1a0025ae:	2001      	movs	r0, #1
1a0025b0:	e000      	b.n	1a0025b4 <handleMasterXferState+0x11c>
	/* If stopped return 0 */
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
		if (xfer->status == I2C_STATUS_BUSY) {
			xfer->status = I2C_STATUS_DONE;
		}
		return 0;
1a0025b2:	2000      	movs	r0, #0
	}
	return 1;
}
1a0025b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025b8:	4770      	bx	lr
1a0025ba:	bf00      	nop

1a0025bc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0025bc:	b570      	push	{r4, r5, r6, lr}
1a0025be:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a0025c0:	4e06      	ldr	r6, [pc, #24]	; (1a0025dc <Chip_I2C_Init+0x20>)
1a0025c2:	00c4      	lsls	r4, r0, #3
1a0025c4:	1a23      	subs	r3, r4, r0
1a0025c6:	009b      	lsls	r3, r3, #2
1a0025c8:	4433      	add	r3, r6
1a0025ca:	8898      	ldrh	r0, [r3, #4]
1a0025cc:	f7ff fda2 	bl	1a002114 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0025d0:	1b60      	subs	r0, r4, r5
1a0025d2:	0080      	lsls	r0, r0, #2
1a0025d4:	5833      	ldr	r3, [r6, r0]
1a0025d6:	226c      	movs	r2, #108	; 0x6c
1a0025d8:	619a      	str	r2, [r3, #24]
1a0025da:	bd70      	pop	{r4, r5, r6, pc}
1a0025dc:	10000048 	.word	0x10000048

1a0025e0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0025e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0025e4:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a0025e6:	4f09      	ldr	r7, [pc, #36]	; (1a00260c <Chip_I2C_SetClockRate+0x2c>)
1a0025e8:	00c5      	lsls	r5, r0, #3
1a0025ea:	1a2e      	subs	r6, r5, r0
1a0025ec:	00b6      	lsls	r6, r6, #2
1a0025ee:	19bb      	adds	r3, r7, r6
1a0025f0:	8898      	ldrh	r0, [r3, #4]
1a0025f2:	f7ff fda9 	bl	1a002148 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0025f6:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0025fa:	59bb      	ldr	r3, [r7, r6]
1a0025fc:	0842      	lsrs	r2, r0, #1
1a0025fe:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a002600:	59bb      	ldr	r3, [r7, r6]
1a002602:	691a      	ldr	r2, [r3, #16]
1a002604:	1a80      	subs	r0, r0, r2
1a002606:	6158      	str	r0, [r3, #20]
1a002608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00260c:	10000048 	.word	0x10000048

1a002610 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a002610:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002614:	009b      	lsls	r3, r3, #2
1a002616:	4a0a      	ldr	r2, [pc, #40]	; (1a002640 <Chip_I2C_SetMasterEventHandler+0x30>)
1a002618:	4413      	add	r3, r2
1a00261a:	691b      	ldr	r3, [r3, #16]
1a00261c:	b923      	cbnz	r3, 1a002628 <Chip_I2C_SetMasterEventHandler+0x18>
		iic->mEvent = event;
1a00261e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002622:	009b      	lsls	r3, r3, #2
1a002624:	4413      	add	r3, r2
1a002626:	6099      	str	r1, [r3, #8]
	}
	return iic->mEvent == event;
1a002628:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00262c:	0080      	lsls	r0, r0, #2
1a00262e:	4b04      	ldr	r3, [pc, #16]	; (1a002640 <Chip_I2C_SetMasterEventHandler+0x30>)
1a002630:	4418      	add	r0, r3
1a002632:	6880      	ldr	r0, [r0, #8]
}
1a002634:	4288      	cmp	r0, r1
1a002636:	bf14      	ite	ne
1a002638:	2000      	movne	r0, #0
1a00263a:	2001      	moveq	r0, #1
1a00263c:	4770      	bx	lr
1a00263e:	bf00      	nop
1a002640:	10000048 	.word	0x10000048

1a002644 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a002644:	b510      	push	{r4, lr}
1a002646:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a002648:	4a09      	ldr	r2, [pc, #36]	; (1a002670 <Chip_I2C_MasterStateHandler+0x2c>)
1a00264a:	00c3      	lsls	r3, r0, #3
1a00264c:	1a1b      	subs	r3, r3, r0
1a00264e:	009b      	lsls	r3, r3, #2
1a002650:	18d1      	adds	r1, r2, r3
1a002652:	58d0      	ldr	r0, [r2, r3]
1a002654:	6909      	ldr	r1, [r1, #16]
1a002656:	f7ff ff1f 	bl	1a002498 <handleMasterXferState>
1a00265a:	b940      	cbnz	r0, 1a00266e <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a00265c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a002660:	009b      	lsls	r3, r3, #2
1a002662:	4a03      	ldr	r2, [pc, #12]	; (1a002670 <Chip_I2C_MasterStateHandler+0x2c>)
1a002664:	4413      	add	r3, r2
1a002666:	689b      	ldr	r3, [r3, #8]
1a002668:	4620      	mov	r0, r4
1a00266a:	2102      	movs	r1, #2
1a00266c:	4798      	blx	r3
1a00266e:	bd10      	pop	{r4, pc}
1a002670:	10000048 	.word	0x10000048

1a002674 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a002674:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002678:	0080      	lsls	r0, r0, #2
1a00267a:	4b03      	ldr	r3, [pc, #12]	; (1a002688 <Chip_I2C_IsStateChanged+0x14>)
1a00267c:	581b      	ldr	r3, [r3, r0]
1a00267e:	6818      	ldr	r0, [r3, #0]
}
1a002680:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a002684:	4770      	bx	lr
1a002686:	bf00      	nop
1a002688:	10000048 	.word	0x10000048

1a00268c <Chip_I2C_EventHandlerPolling>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00268c:	2901      	cmp	r1, #1
1a00268e:	d114      	bne.n	1a0026ba <Chip_I2C_EventHandlerPolling+0x2e>
	while (*stat == I2C_STATUS_BUSY) {}
}

/* Chip polling event handler */
void Chip_I2C_EventHandlerPolling(I2C_ID_T id, I2C_EVENT_T event)
{
1a002690:	b538      	push	{r3, r4, r5, lr}
1a002692:	4604      	mov	r4, r0
	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
		return;
	}

	stat = &iic->mXfer->status;
1a002694:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002698:	009b      	lsls	r3, r3, #2
1a00269a:	4a08      	ldr	r2, [pc, #32]	; (1a0026bc <Chip_I2C_EventHandlerPolling+0x30>)
1a00269c:	4413      	add	r3, r2
1a00269e:	691d      	ldr	r5, [r3, #16]
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a0026a0:	e006      	b.n	1a0026b0 <Chip_I2C_EventHandlerPolling+0x24>
		if (Chip_I2C_IsStateChanged(id)) {
1a0026a2:	4620      	mov	r0, r4
1a0026a4:	f7ff ffe6 	bl	1a002674 <Chip_I2C_IsStateChanged>
1a0026a8:	b110      	cbz	r0, 1a0026b0 <Chip_I2C_EventHandlerPolling+0x24>
			Chip_I2C_MasterStateHandler(id);
1a0026aa:	4620      	mov	r0, r4
1a0026ac:	f7ff ffca 	bl	1a002644 <Chip_I2C_MasterStateHandler>
		return;
	}

	stat = &iic->mXfer->status;
	/* Call the state change handler till xfer is done */
	while (*stat == I2C_STATUS_BUSY) {
1a0026b0:	7d2b      	ldrb	r3, [r5, #20]
1a0026b2:	b2db      	uxtb	r3, r3
1a0026b4:	2b04      	cmp	r3, #4
1a0026b6:	d0f4      	beq.n	1a0026a2 <Chip_I2C_EventHandlerPolling+0x16>
1a0026b8:	bd38      	pop	{r3, r4, r5, pc}
1a0026ba:	4770      	bx	lr
1a0026bc:	10000048 	.word	0x10000048

1a0026c0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0026c0:	4b03      	ldr	r3, [pc, #12]	; (1a0026d0 <Chip_SSP_GetClockIndex+0x10>)
1a0026c2:	4298      	cmp	r0, r3
1a0026c4:	d101      	bne.n	1a0026ca <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a0026c6:	20a5      	movs	r0, #165	; 0xa5
1a0026c8:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0026ca:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0026cc:	4770      	bx	lr
1a0026ce:	bf00      	nop
1a0026d0:	400c5000 	.word	0x400c5000

1a0026d4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0026d4:	4b04      	ldr	r3, [pc, #16]	; (1a0026e8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0026d6:	4298      	cmp	r0, r3
1a0026d8:	d102      	bne.n	1a0026e0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0026da:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0026de:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0026e0:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0026e4:	4770      	bx	lr
1a0026e6:	bf00      	nop
1a0026e8:	400c5000 	.word	0x400c5000

1a0026ec <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0026ec:	6803      	ldr	r3, [r0, #0]
1a0026ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0026f2:	0209      	lsls	r1, r1, #8
1a0026f4:	b289      	uxth	r1, r1
1a0026f6:	430b      	orrs	r3, r1
1a0026f8:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0026fa:	6102      	str	r2, [r0, #16]
1a0026fc:	4770      	bx	lr
1a0026fe:	bf00      	nop

1a002700 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002700:	b570      	push	{r4, r5, r6, lr}
1a002702:	4606      	mov	r6, r0
1a002704:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002706:	f7ff ffe5 	bl	1a0026d4 <Chip_SSP_GetPeriphClockIndex>
1a00270a:	f7ff fd1d 	bl	1a002148 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00270e:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a002710:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a002714:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a002716:	e00c      	b.n	1a002732 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002718:	1c4c      	adds	r4, r1, #1
1a00271a:	fb02 f304 	mul.w	r3, r2, r4
1a00271e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002722:	42ab      	cmp	r3, r5
1a002724:	d905      	bls.n	1a002732 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a002726:	2cff      	cmp	r4, #255	; 0xff
1a002728:	d902      	bls.n	1a002730 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a00272a:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a00272c:	2100      	movs	r1, #0
1a00272e:	e000      	b.n	1a002732 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002730:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a002732:	42ab      	cmp	r3, r5
1a002734:	d8f0      	bhi.n	1a002718 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a002736:	4630      	mov	r0, r6
1a002738:	f7ff ffd8 	bl	1a0026ec <Chip_SSP_SetClockRate>
1a00273c:	bd70      	pop	{r4, r5, r6, pc}
1a00273e:	bf00      	nop

1a002740 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002740:	b510      	push	{r4, lr}
1a002742:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002744:	f7ff ffbc 	bl	1a0026c0 <Chip_SSP_GetClockIndex>
1a002748:	f7ff fce4 	bl	1a002114 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00274c:	4620      	mov	r0, r4
1a00274e:	f7ff ffc1 	bl	1a0026d4 <Chip_SSP_GetPeriphClockIndex>
1a002752:	f7ff fcdf 	bl	1a002114 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002756:	6863      	ldr	r3, [r4, #4]
1a002758:	f023 0304 	bic.w	r3, r3, #4
1a00275c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00275e:	6823      	ldr	r3, [r4, #0]
1a002760:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002764:	f043 0307 	orr.w	r3, r3, #7
1a002768:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00276a:	4620      	mov	r0, r4
1a00276c:	4901      	ldr	r1, [pc, #4]	; (1a002774 <Chip_SSP_Init+0x34>)
1a00276e:	f7ff ffc7 	bl	1a002700 <Chip_SSP_SetBitRate>
1a002772:	bd10      	pop	{r4, pc}
1a002774:	000186a0 	.word	0x000186a0

1a002778 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a002778:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00277a:	4a18      	ldr	r2, [pc, #96]	; (1a0027dc <ResetISR+0x64>)
1a00277c:	4b18      	ldr	r3, [pc, #96]	; (1a0027e0 <ResetISR+0x68>)
1a00277e:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a002780:	4a18      	ldr	r2, [pc, #96]	; (1a0027e4 <ResetISR+0x6c>)
1a002782:	3304      	adds	r3, #4
1a002784:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002786:	2300      	movs	r3, #0
1a002788:	e005      	b.n	1a002796 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00278a:	f04f 31ff 	mov.w	r1, #4294967295
1a00278e:	4a16      	ldr	r2, [pc, #88]	; (1a0027e8 <ResetISR+0x70>)
1a002790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a002794:	3301      	adds	r3, #1
1a002796:	2b07      	cmp	r3, #7
1a002798:	d9f7      	bls.n	1a00278a <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a00279a:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a00279c:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a00279e:	f7ff f8a1 	bl	1a0018e4 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0027a2:	4b12      	ldr	r3, [pc, #72]	; (1a0027ec <ResetISR+0x74>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0027a4:	e007      	b.n	1a0027b6 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0027a6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0027aa:	6818      	ldr	r0, [r3, #0]
1a0027ac:	6859      	ldr	r1, [r3, #4]
1a0027ae:	689a      	ldr	r2, [r3, #8]
1a0027b0:	f7fd fcfc 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0027b4:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0027b6:	4a0e      	ldr	r2, [pc, #56]	; (1a0027f0 <ResetISR+0x78>)
1a0027b8:	4293      	cmp	r3, r2
1a0027ba:	d3f4      	bcc.n	1a0027a6 <ResetISR+0x2e>
1a0027bc:	e006      	b.n	1a0027cc <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a0027be:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0027c0:	f854 0b08 	ldr.w	r0, [r4], #8
1a0027c4:	6859      	ldr	r1, [r3, #4]
1a0027c6:	f7fd fcff 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0027ca:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0027cc:	4a09      	ldr	r2, [pc, #36]	; (1a0027f4 <ResetISR+0x7c>)
1a0027ce:	4293      	cmp	r3, r2
1a0027d0:	d3f5      	bcc.n	1a0027be <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a0027d2:	f000 fec7 	bl	1a003564 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a0027d6:	f7fd ffed 	bl	1a0007b4 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a0027da:	e7fe      	b.n	1a0027da <ResetISR+0x62>
1a0027dc:	10df1000 	.word	0x10df1000
1a0027e0:	40053100 	.word	0x40053100
1a0027e4:	01dff7ff 	.word	0x01dff7ff
1a0027e8:	e000e280 	.word	0xe000e280
1a0027ec:	1a000114 	.word	0x1a000114
1a0027f0:	1a000150 	.word	0x1a000150
1a0027f4:	1a000178 	.word	0x1a000178

1a0027f8 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a0027f8:	4770      	bx	lr
1a0027fa:	bf00      	nop

1a0027fc <__aeabi_drsub>:
1a0027fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002800:	e002      	b.n	1a002808 <__adddf3>
1a002802:	bf00      	nop

1a002804 <__aeabi_dsub>:
1a002804:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002808 <__adddf3>:
1a002808:	b530      	push	{r4, r5, lr}
1a00280a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a00280e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a002812:	ea94 0f05 	teq	r4, r5
1a002816:	bf08      	it	eq
1a002818:	ea90 0f02 	teqeq	r0, r2
1a00281c:	bf1f      	itttt	ne
1a00281e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a002822:	ea55 0c02 	orrsne.w	ip, r5, r2
1a002826:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00282a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00282e:	f000 80e2 	beq.w	1a0029f6 <__adddf3+0x1ee>
1a002832:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a002836:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00283a:	bfb8      	it	lt
1a00283c:	426d      	neglt	r5, r5
1a00283e:	dd0c      	ble.n	1a00285a <__adddf3+0x52>
1a002840:	442c      	add	r4, r5
1a002842:	ea80 0202 	eor.w	r2, r0, r2
1a002846:	ea81 0303 	eor.w	r3, r1, r3
1a00284a:	ea82 0000 	eor.w	r0, r2, r0
1a00284e:	ea83 0101 	eor.w	r1, r3, r1
1a002852:	ea80 0202 	eor.w	r2, r0, r2
1a002856:	ea81 0303 	eor.w	r3, r1, r3
1a00285a:	2d36      	cmp	r5, #54	; 0x36
1a00285c:	bf88      	it	hi
1a00285e:	bd30      	pophi	{r4, r5, pc}
1a002860:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a002864:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002868:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a00286c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a002870:	d002      	beq.n	1a002878 <__adddf3+0x70>
1a002872:	4240      	negs	r0, r0
1a002874:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002878:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a00287c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002880:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a002884:	d002      	beq.n	1a00288c <__adddf3+0x84>
1a002886:	4252      	negs	r2, r2
1a002888:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00288c:	ea94 0f05 	teq	r4, r5
1a002890:	f000 80a7 	beq.w	1a0029e2 <__adddf3+0x1da>
1a002894:	f1a4 0401 	sub.w	r4, r4, #1
1a002898:	f1d5 0e20 	rsbs	lr, r5, #32
1a00289c:	db0d      	blt.n	1a0028ba <__adddf3+0xb2>
1a00289e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0028a2:	fa22 f205 	lsr.w	r2, r2, r5
1a0028a6:	1880      	adds	r0, r0, r2
1a0028a8:	f141 0100 	adc.w	r1, r1, #0
1a0028ac:	fa03 f20e 	lsl.w	r2, r3, lr
1a0028b0:	1880      	adds	r0, r0, r2
1a0028b2:	fa43 f305 	asr.w	r3, r3, r5
1a0028b6:	4159      	adcs	r1, r3
1a0028b8:	e00e      	b.n	1a0028d8 <__adddf3+0xd0>
1a0028ba:	f1a5 0520 	sub.w	r5, r5, #32
1a0028be:	f10e 0e20 	add.w	lr, lr, #32
1a0028c2:	2a01      	cmp	r2, #1
1a0028c4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0028c8:	bf28      	it	cs
1a0028ca:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0028ce:	fa43 f305 	asr.w	r3, r3, r5
1a0028d2:	18c0      	adds	r0, r0, r3
1a0028d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0028d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0028dc:	d507      	bpl.n	1a0028ee <__adddf3+0xe6>
1a0028de:	f04f 0e00 	mov.w	lr, #0
1a0028e2:	f1dc 0c00 	rsbs	ip, ip, #0
1a0028e6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0028ea:	eb6e 0101 	sbc.w	r1, lr, r1
1a0028ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0028f2:	d31b      	bcc.n	1a00292c <__adddf3+0x124>
1a0028f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a0028f8:	d30c      	bcc.n	1a002914 <__adddf3+0x10c>
1a0028fa:	0849      	lsrs	r1, r1, #1
1a0028fc:	ea5f 0030 	movs.w	r0, r0, rrx
1a002900:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a002904:	f104 0401 	add.w	r4, r4, #1
1a002908:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a00290c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002910:	f080 809a 	bcs.w	1a002a48 <__adddf3+0x240>
1a002914:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002918:	bf08      	it	eq
1a00291a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00291e:	f150 0000 	adcs.w	r0, r0, #0
1a002922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002926:	ea41 0105 	orr.w	r1, r1, r5
1a00292a:	bd30      	pop	{r4, r5, pc}
1a00292c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002930:	4140      	adcs	r0, r0
1a002932:	eb41 0101 	adc.w	r1, r1, r1
1a002936:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00293a:	f1a4 0401 	sub.w	r4, r4, #1
1a00293e:	d1e9      	bne.n	1a002914 <__adddf3+0x10c>
1a002940:	f091 0f00 	teq	r1, #0
1a002944:	bf04      	itt	eq
1a002946:	4601      	moveq	r1, r0
1a002948:	2000      	moveq	r0, #0
1a00294a:	fab1 f381 	clz	r3, r1
1a00294e:	bf08      	it	eq
1a002950:	3320      	addeq	r3, #32
1a002952:	f1a3 030b 	sub.w	r3, r3, #11
1a002956:	f1b3 0220 	subs.w	r2, r3, #32
1a00295a:	da0c      	bge.n	1a002976 <__adddf3+0x16e>
1a00295c:	320c      	adds	r2, #12
1a00295e:	dd08      	ble.n	1a002972 <__adddf3+0x16a>
1a002960:	f102 0c14 	add.w	ip, r2, #20
1a002964:	f1c2 020c 	rsb	r2, r2, #12
1a002968:	fa01 f00c 	lsl.w	r0, r1, ip
1a00296c:	fa21 f102 	lsr.w	r1, r1, r2
1a002970:	e00c      	b.n	1a00298c <__adddf3+0x184>
1a002972:	f102 0214 	add.w	r2, r2, #20
1a002976:	bfd8      	it	le
1a002978:	f1c2 0c20 	rsble	ip, r2, #32
1a00297c:	fa01 f102 	lsl.w	r1, r1, r2
1a002980:	fa20 fc0c 	lsr.w	ip, r0, ip
1a002984:	bfdc      	itt	le
1a002986:	ea41 010c 	orrle.w	r1, r1, ip
1a00298a:	4090      	lslle	r0, r2
1a00298c:	1ae4      	subs	r4, r4, r3
1a00298e:	bfa2      	ittt	ge
1a002990:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a002994:	4329      	orrge	r1, r5
1a002996:	bd30      	popge	{r4, r5, pc}
1a002998:	ea6f 0404 	mvn.w	r4, r4
1a00299c:	3c1f      	subs	r4, #31
1a00299e:	da1c      	bge.n	1a0029da <__adddf3+0x1d2>
1a0029a0:	340c      	adds	r4, #12
1a0029a2:	dc0e      	bgt.n	1a0029c2 <__adddf3+0x1ba>
1a0029a4:	f104 0414 	add.w	r4, r4, #20
1a0029a8:	f1c4 0220 	rsb	r2, r4, #32
1a0029ac:	fa20 f004 	lsr.w	r0, r0, r4
1a0029b0:	fa01 f302 	lsl.w	r3, r1, r2
1a0029b4:	ea40 0003 	orr.w	r0, r0, r3
1a0029b8:	fa21 f304 	lsr.w	r3, r1, r4
1a0029bc:	ea45 0103 	orr.w	r1, r5, r3
1a0029c0:	bd30      	pop	{r4, r5, pc}
1a0029c2:	f1c4 040c 	rsb	r4, r4, #12
1a0029c6:	f1c4 0220 	rsb	r2, r4, #32
1a0029ca:	fa20 f002 	lsr.w	r0, r0, r2
1a0029ce:	fa01 f304 	lsl.w	r3, r1, r4
1a0029d2:	ea40 0003 	orr.w	r0, r0, r3
1a0029d6:	4629      	mov	r1, r5
1a0029d8:	bd30      	pop	{r4, r5, pc}
1a0029da:	fa21 f004 	lsr.w	r0, r1, r4
1a0029de:	4629      	mov	r1, r5
1a0029e0:	bd30      	pop	{r4, r5, pc}
1a0029e2:	f094 0f00 	teq	r4, #0
1a0029e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0029ea:	bf06      	itte	eq
1a0029ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a0029f0:	3401      	addeq	r4, #1
1a0029f2:	3d01      	subne	r5, #1
1a0029f4:	e74e      	b.n	1a002894 <__adddf3+0x8c>
1a0029f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0029fa:	bf18      	it	ne
1a0029fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002a00:	d029      	beq.n	1a002a56 <__adddf3+0x24e>
1a002a02:	ea94 0f05 	teq	r4, r5
1a002a06:	bf08      	it	eq
1a002a08:	ea90 0f02 	teqeq	r0, r2
1a002a0c:	d005      	beq.n	1a002a1a <__adddf3+0x212>
1a002a0e:	ea54 0c00 	orrs.w	ip, r4, r0
1a002a12:	bf04      	itt	eq
1a002a14:	4619      	moveq	r1, r3
1a002a16:	4610      	moveq	r0, r2
1a002a18:	bd30      	pop	{r4, r5, pc}
1a002a1a:	ea91 0f03 	teq	r1, r3
1a002a1e:	bf1e      	ittt	ne
1a002a20:	2100      	movne	r1, #0
1a002a22:	2000      	movne	r0, #0
1a002a24:	bd30      	popne	{r4, r5, pc}
1a002a26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002a2a:	d105      	bne.n	1a002a38 <__adddf3+0x230>
1a002a2c:	0040      	lsls	r0, r0, #1
1a002a2e:	4149      	adcs	r1, r1
1a002a30:	bf28      	it	cs
1a002a32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a002a36:	bd30      	pop	{r4, r5, pc}
1a002a38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a002a3c:	bf3c      	itt	cc
1a002a3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a002a42:	bd30      	popcc	{r4, r5, pc}
1a002a44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002a48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a002a4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002a50:	f04f 0000 	mov.w	r0, #0
1a002a54:	bd30      	pop	{r4, r5, pc}
1a002a56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002a5a:	bf1a      	itte	ne
1a002a5c:	4619      	movne	r1, r3
1a002a5e:	4610      	movne	r0, r2
1a002a60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a002a64:	bf1c      	itt	ne
1a002a66:	460b      	movne	r3, r1
1a002a68:	4602      	movne	r2, r0
1a002a6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002a6e:	bf06      	itte	eq
1a002a70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a002a74:	ea91 0f03 	teqeq	r1, r3
1a002a78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a002a7c:	bd30      	pop	{r4, r5, pc}
1a002a7e:	bf00      	nop

1a002a80 <__aeabi_ui2d>:
1a002a80:	f090 0f00 	teq	r0, #0
1a002a84:	bf04      	itt	eq
1a002a86:	2100      	moveq	r1, #0
1a002a88:	4770      	bxeq	lr
1a002a8a:	b530      	push	{r4, r5, lr}
1a002a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002a94:	f04f 0500 	mov.w	r5, #0
1a002a98:	f04f 0100 	mov.w	r1, #0
1a002a9c:	e750      	b.n	1a002940 <__adddf3+0x138>
1a002a9e:	bf00      	nop

1a002aa0 <__aeabi_i2d>:
1a002aa0:	f090 0f00 	teq	r0, #0
1a002aa4:	bf04      	itt	eq
1a002aa6:	2100      	moveq	r1, #0
1a002aa8:	4770      	bxeq	lr
1a002aaa:	b530      	push	{r4, r5, lr}
1a002aac:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002ab0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002ab4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002ab8:	bf48      	it	mi
1a002aba:	4240      	negmi	r0, r0
1a002abc:	f04f 0100 	mov.w	r1, #0
1a002ac0:	e73e      	b.n	1a002940 <__adddf3+0x138>
1a002ac2:	bf00      	nop

1a002ac4 <__aeabi_f2d>:
1a002ac4:	0042      	lsls	r2, r0, #1
1a002ac6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002aca:	ea4f 0131 	mov.w	r1, r1, rrx
1a002ace:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a002ad2:	bf1f      	itttt	ne
1a002ad4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002ad8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002adc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002ae0:	4770      	bxne	lr
1a002ae2:	f092 0f00 	teq	r2, #0
1a002ae6:	bf14      	ite	ne
1a002ae8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002aec:	4770      	bxeq	lr
1a002aee:	b530      	push	{r4, r5, lr}
1a002af0:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002af4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002af8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002afc:	e720      	b.n	1a002940 <__adddf3+0x138>
1a002afe:	bf00      	nop

1a002b00 <__aeabi_ul2d>:
1a002b00:	ea50 0201 	orrs.w	r2, r0, r1
1a002b04:	bf08      	it	eq
1a002b06:	4770      	bxeq	lr
1a002b08:	b530      	push	{r4, r5, lr}
1a002b0a:	f04f 0500 	mov.w	r5, #0
1a002b0e:	e00a      	b.n	1a002b26 <__aeabi_l2d+0x16>

1a002b10 <__aeabi_l2d>:
1a002b10:	ea50 0201 	orrs.w	r2, r0, r1
1a002b14:	bf08      	it	eq
1a002b16:	4770      	bxeq	lr
1a002b18:	b530      	push	{r4, r5, lr}
1a002b1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a002b1e:	d502      	bpl.n	1a002b26 <__aeabi_l2d+0x16>
1a002b20:	4240      	negs	r0, r0
1a002b22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002b26:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002b2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a002b2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a002b32:	f43f aedc 	beq.w	1a0028ee <__adddf3+0xe6>
1a002b36:	f04f 0203 	mov.w	r2, #3
1a002b3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002b3e:	bf18      	it	ne
1a002b40:	3203      	addne	r2, #3
1a002b42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a002b46:	bf18      	it	ne
1a002b48:	3203      	addne	r2, #3
1a002b4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a002b4e:	f1c2 0320 	rsb	r3, r2, #32
1a002b52:	fa00 fc03 	lsl.w	ip, r0, r3
1a002b56:	fa20 f002 	lsr.w	r0, r0, r2
1a002b5a:	fa01 fe03 	lsl.w	lr, r1, r3
1a002b5e:	ea40 000e 	orr.w	r0, r0, lr
1a002b62:	fa21 f102 	lsr.w	r1, r1, r2
1a002b66:	4414      	add	r4, r2
1a002b68:	e6c1      	b.n	1a0028ee <__adddf3+0xe6>
1a002b6a:	bf00      	nop

1a002b6c <__aeabi_ldivmod>:
1a002b6c:	b97b      	cbnz	r3, 1a002b8e <__aeabi_ldivmod+0x22>
1a002b6e:	b972      	cbnz	r2, 1a002b8e <__aeabi_ldivmod+0x22>
1a002b70:	2900      	cmp	r1, #0
1a002b72:	bfbe      	ittt	lt
1a002b74:	2000      	movlt	r0, #0
1a002b76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a002b7a:	e006      	blt.n	1a002b8a <__aeabi_ldivmod+0x1e>
1a002b7c:	bf08      	it	eq
1a002b7e:	2800      	cmpeq	r0, #0
1a002b80:	bf1c      	itt	ne
1a002b82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a002b86:	f04f 30ff 	movne.w	r0, #4294967295
1a002b8a:	f000 b853 	b.w	1a002c34 <__aeabi_idiv0>
1a002b8e:	b082      	sub	sp, #8
1a002b90:	46ec      	mov	ip, sp
1a002b92:	e92d 5000 	stmdb	sp!, {ip, lr}
1a002b96:	f000 f81d 	bl	1a002bd4 <__gnu_ldivmod_helper>
1a002b9a:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002b9e:	b002      	add	sp, #8
1a002ba0:	bc0c      	pop	{r2, r3}
1a002ba2:	4770      	bx	lr

1a002ba4 <__aeabi_uldivmod>:
1a002ba4:	b953      	cbnz	r3, 1a002bbc <__aeabi_uldivmod+0x18>
1a002ba6:	b94a      	cbnz	r2, 1a002bbc <__aeabi_uldivmod+0x18>
1a002ba8:	2900      	cmp	r1, #0
1a002baa:	bf08      	it	eq
1a002bac:	2800      	cmpeq	r0, #0
1a002bae:	bf1c      	itt	ne
1a002bb0:	f04f 31ff 	movne.w	r1, #4294967295
1a002bb4:	f04f 30ff 	movne.w	r0, #4294967295
1a002bb8:	f000 b83c 	b.w	1a002c34 <__aeabi_idiv0>
1a002bbc:	b082      	sub	sp, #8
1a002bbe:	46ec      	mov	ip, sp
1a002bc0:	e92d 5000 	stmdb	sp!, {ip, lr}
1a002bc4:	f000 f81e 	bl	1a002c04 <__gnu_uldivmod_helper>
1a002bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002bcc:	b002      	add	sp, #8
1a002bce:	bc0c      	pop	{r2, r3}
1a002bd0:	4770      	bx	lr
1a002bd2:	bf00      	nop

1a002bd4 <__gnu_ldivmod_helper>:
1a002bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002bd8:	9c06      	ldr	r4, [sp, #24]
1a002bda:	4615      	mov	r5, r2
1a002bdc:	4606      	mov	r6, r0
1a002bde:	460f      	mov	r7, r1
1a002be0:	4698      	mov	r8, r3
1a002be2:	f000 fa3b 	bl	1a00305c <__divdi3>
1a002be6:	fb05 f301 	mul.w	r3, r5, r1
1a002bea:	fb00 3808 	mla	r8, r0, r8, r3
1a002bee:	fba5 2300 	umull	r2, r3, r5, r0
1a002bf2:	1ab2      	subs	r2, r6, r2
1a002bf4:	4443      	add	r3, r8
1a002bf6:	eb67 0303 	sbc.w	r3, r7, r3
1a002bfa:	e9c4 2300 	strd	r2, r3, [r4]
1a002bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002c02:	bf00      	nop

1a002c04 <__gnu_uldivmod_helper>:
1a002c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002c08:	9c06      	ldr	r4, [sp, #24]
1a002c0a:	4690      	mov	r8, r2
1a002c0c:	4606      	mov	r6, r0
1a002c0e:	460f      	mov	r7, r1
1a002c10:	461d      	mov	r5, r3
1a002c12:	f000 fb71 	bl	1a0032f8 <__udivdi3>
1a002c16:	fb00 f505 	mul.w	r5, r0, r5
1a002c1a:	fba0 2308 	umull	r2, r3, r0, r8
1a002c1e:	fb08 5501 	mla	r5, r8, r1, r5
1a002c22:	1ab2      	subs	r2, r6, r2
1a002c24:	442b      	add	r3, r5
1a002c26:	eb67 0303 	sbc.w	r3, r7, r3
1a002c2a:	e9c4 2300 	strd	r2, r3, [r4]
1a002c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002c32:	bf00      	nop

1a002c34 <__aeabi_idiv0>:
1a002c34:	4770      	bx	lr
1a002c36:	bf00      	nop

1a002c38 <__aeabi_dmul>:
1a002c38:	b570      	push	{r4, r5, r6, lr}
1a002c3a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002c3e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002c42:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002c46:	bf1d      	ittte	ne
1a002c48:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002c4c:	ea94 0f0c 	teqne	r4, ip
1a002c50:	ea95 0f0c 	teqne	r5, ip
1a002c54:	f000 f8de 	bleq	1a002e14 <__aeabi_dmul+0x1dc>
1a002c58:	442c      	add	r4, r5
1a002c5a:	ea81 0603 	eor.w	r6, r1, r3
1a002c5e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002c62:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002c66:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002c6a:	bf18      	it	ne
1a002c6c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002c78:	d038      	beq.n	1a002cec <__aeabi_dmul+0xb4>
1a002c7a:	fba0 ce02 	umull	ip, lr, r0, r2
1a002c7e:	f04f 0500 	mov.w	r5, #0
1a002c82:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002c86:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002c8a:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002c8e:	f04f 0600 	mov.w	r6, #0
1a002c92:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002c96:	f09c 0f00 	teq	ip, #0
1a002c9a:	bf18      	it	ne
1a002c9c:	f04e 0e01 	orrne.w	lr, lr, #1
1a002ca0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002ca4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002ca8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002cac:	d204      	bcs.n	1a002cb8 <__aeabi_dmul+0x80>
1a002cae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002cb2:	416d      	adcs	r5, r5
1a002cb4:	eb46 0606 	adc.w	r6, r6, r6
1a002cb8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002cbc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002cc0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002cc4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002cc8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002ccc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002cd0:	bf88      	it	hi
1a002cd2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002cd6:	d81e      	bhi.n	1a002d16 <__aeabi_dmul+0xde>
1a002cd8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002cdc:	bf08      	it	eq
1a002cde:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002ce2:	f150 0000 	adcs.w	r0, r0, #0
1a002ce6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002cea:	bd70      	pop	{r4, r5, r6, pc}
1a002cec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002cf0:	ea46 0101 	orr.w	r1, r6, r1
1a002cf4:	ea40 0002 	orr.w	r0, r0, r2
1a002cf8:	ea81 0103 	eor.w	r1, r1, r3
1a002cfc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002d00:	bfc2      	ittt	gt
1a002d02:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002d06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002d0a:	bd70      	popgt	{r4, r5, r6, pc}
1a002d0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002d10:	f04f 0e00 	mov.w	lr, #0
1a002d14:	3c01      	subs	r4, #1
1a002d16:	f300 80ab 	bgt.w	1a002e70 <__aeabi_dmul+0x238>
1a002d1a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002d1e:	bfde      	ittt	le
1a002d20:	2000      	movle	r0, #0
1a002d22:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002d26:	bd70      	pople	{r4, r5, r6, pc}
1a002d28:	f1c4 0400 	rsb	r4, r4, #0
1a002d2c:	3c20      	subs	r4, #32
1a002d2e:	da35      	bge.n	1a002d9c <__aeabi_dmul+0x164>
1a002d30:	340c      	adds	r4, #12
1a002d32:	dc1b      	bgt.n	1a002d6c <__aeabi_dmul+0x134>
1a002d34:	f104 0414 	add.w	r4, r4, #20
1a002d38:	f1c4 0520 	rsb	r5, r4, #32
1a002d3c:	fa00 f305 	lsl.w	r3, r0, r5
1a002d40:	fa20 f004 	lsr.w	r0, r0, r4
1a002d44:	fa01 f205 	lsl.w	r2, r1, r5
1a002d48:	ea40 0002 	orr.w	r0, r0, r2
1a002d4c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002d54:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002d58:	fa21 f604 	lsr.w	r6, r1, r4
1a002d5c:	eb42 0106 	adc.w	r1, r2, r6
1a002d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002d64:	bf08      	it	eq
1a002d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002d6a:	bd70      	pop	{r4, r5, r6, pc}
1a002d6c:	f1c4 040c 	rsb	r4, r4, #12
1a002d70:	f1c4 0520 	rsb	r5, r4, #32
1a002d74:	fa00 f304 	lsl.w	r3, r0, r4
1a002d78:	fa20 f005 	lsr.w	r0, r0, r5
1a002d7c:	fa01 f204 	lsl.w	r2, r1, r4
1a002d80:	ea40 0002 	orr.w	r0, r0, r2
1a002d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002d88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002d8c:	f141 0100 	adc.w	r1, r1, #0
1a002d90:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002d94:	bf08      	it	eq
1a002d96:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002d9a:	bd70      	pop	{r4, r5, r6, pc}
1a002d9c:	f1c4 0520 	rsb	r5, r4, #32
1a002da0:	fa00 f205 	lsl.w	r2, r0, r5
1a002da4:	ea4e 0e02 	orr.w	lr, lr, r2
1a002da8:	fa20 f304 	lsr.w	r3, r0, r4
1a002dac:	fa01 f205 	lsl.w	r2, r1, r5
1a002db0:	ea43 0302 	orr.w	r3, r3, r2
1a002db4:	fa21 f004 	lsr.w	r0, r1, r4
1a002db8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002dbc:	fa21 f204 	lsr.w	r2, r1, r4
1a002dc0:	ea20 0002 	bic.w	r0, r0, r2
1a002dc4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002dcc:	bf08      	it	eq
1a002dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002dd2:	bd70      	pop	{r4, r5, r6, pc}
1a002dd4:	f094 0f00 	teq	r4, #0
1a002dd8:	d10f      	bne.n	1a002dfa <__aeabi_dmul+0x1c2>
1a002dda:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002dde:	0040      	lsls	r0, r0, #1
1a002de0:	eb41 0101 	adc.w	r1, r1, r1
1a002de4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002de8:	bf08      	it	eq
1a002dea:	3c01      	subeq	r4, #1
1a002dec:	d0f7      	beq.n	1a002dde <__aeabi_dmul+0x1a6>
1a002dee:	ea41 0106 	orr.w	r1, r1, r6
1a002df2:	f095 0f00 	teq	r5, #0
1a002df6:	bf18      	it	ne
1a002df8:	4770      	bxne	lr
1a002dfa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002dfe:	0052      	lsls	r2, r2, #1
1a002e00:	eb43 0303 	adc.w	r3, r3, r3
1a002e04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002e08:	bf08      	it	eq
1a002e0a:	3d01      	subeq	r5, #1
1a002e0c:	d0f7      	beq.n	1a002dfe <__aeabi_dmul+0x1c6>
1a002e0e:	ea43 0306 	orr.w	r3, r3, r6
1a002e12:	4770      	bx	lr
1a002e14:	ea94 0f0c 	teq	r4, ip
1a002e18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002e1c:	bf18      	it	ne
1a002e1e:	ea95 0f0c 	teqne	r5, ip
1a002e22:	d00c      	beq.n	1a002e3e <__aeabi_dmul+0x206>
1a002e24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002e28:	bf18      	it	ne
1a002e2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002e2e:	d1d1      	bne.n	1a002dd4 <__aeabi_dmul+0x19c>
1a002e30:	ea81 0103 	eor.w	r1, r1, r3
1a002e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e38:	f04f 0000 	mov.w	r0, #0
1a002e3c:	bd70      	pop	{r4, r5, r6, pc}
1a002e3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002e42:	bf06      	itte	eq
1a002e44:	4610      	moveq	r0, r2
1a002e46:	4619      	moveq	r1, r3
1a002e48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002e4c:	d019      	beq.n	1a002e82 <__aeabi_dmul+0x24a>
1a002e4e:	ea94 0f0c 	teq	r4, ip
1a002e52:	d102      	bne.n	1a002e5a <__aeabi_dmul+0x222>
1a002e54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002e58:	d113      	bne.n	1a002e82 <__aeabi_dmul+0x24a>
1a002e5a:	ea95 0f0c 	teq	r5, ip
1a002e5e:	d105      	bne.n	1a002e6c <__aeabi_dmul+0x234>
1a002e60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002e64:	bf1c      	itt	ne
1a002e66:	4610      	movne	r0, r2
1a002e68:	4619      	movne	r1, r3
1a002e6a:	d10a      	bne.n	1a002e82 <__aeabi_dmul+0x24a>
1a002e6c:	ea81 0103 	eor.w	r1, r1, r3
1a002e70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002e7c:	f04f 0000 	mov.w	r0, #0
1a002e80:	bd70      	pop	{r4, r5, r6, pc}
1a002e82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002e86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002e8a:	bd70      	pop	{r4, r5, r6, pc}

1a002e8c <__aeabi_ddiv>:
1a002e8c:	b570      	push	{r4, r5, r6, lr}
1a002e8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002e92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002e96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002e9a:	bf1d      	ittte	ne
1a002e9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002ea0:	ea94 0f0c 	teqne	r4, ip
1a002ea4:	ea95 0f0c 	teqne	r5, ip
1a002ea8:	f000 f8a7 	bleq	1a002ffa <__aeabi_ddiv+0x16e>
1a002eac:	eba4 0405 	sub.w	r4, r4, r5
1a002eb0:	ea81 0e03 	eor.w	lr, r1, r3
1a002eb4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002eb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002ebc:	f000 8088 	beq.w	1a002fd0 <__aeabi_ddiv+0x144>
1a002ec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002ec4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002ec8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002ecc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002ed0:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002ed4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002ed8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002edc:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002ee0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002ee4:	429d      	cmp	r5, r3
1a002ee6:	bf08      	it	eq
1a002ee8:	4296      	cmpeq	r6, r2
1a002eea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002eee:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002ef2:	d202      	bcs.n	1a002efa <__aeabi_ddiv+0x6e>
1a002ef4:	085b      	lsrs	r3, r3, #1
1a002ef6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002efa:	1ab6      	subs	r6, r6, r2
1a002efc:	eb65 0503 	sbc.w	r5, r5, r3
1a002f00:	085b      	lsrs	r3, r3, #1
1a002f02:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002f0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002f0e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f12:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f16:	bf22      	ittt	cs
1a002f18:	1ab6      	subcs	r6, r6, r2
1a002f1a:	4675      	movcs	r5, lr
1a002f1c:	ea40 000c 	orrcs.w	r0, r0, ip
1a002f20:	085b      	lsrs	r3, r3, #1
1a002f22:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f26:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f2e:	bf22      	ittt	cs
1a002f30:	1ab6      	subcs	r6, r6, r2
1a002f32:	4675      	movcs	r5, lr
1a002f34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002f38:	085b      	lsrs	r3, r3, #1
1a002f3a:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f3e:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f42:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f46:	bf22      	ittt	cs
1a002f48:	1ab6      	subcs	r6, r6, r2
1a002f4a:	4675      	movcs	r5, lr
1a002f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002f50:	085b      	lsrs	r3, r3, #1
1a002f52:	ea4f 0232 	mov.w	r2, r2, rrx
1a002f56:	ebb6 0e02 	subs.w	lr, r6, r2
1a002f5a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f5e:	bf22      	ittt	cs
1a002f60:	1ab6      	subcs	r6, r6, r2
1a002f62:	4675      	movcs	r5, lr
1a002f64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002f68:	ea55 0e06 	orrs.w	lr, r5, r6
1a002f6c:	d018      	beq.n	1a002fa0 <__aeabi_ddiv+0x114>
1a002f6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002f72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002f76:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002f7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002f7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002f82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002f86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002f8a:	d1c0      	bne.n	1a002f0e <__aeabi_ddiv+0x82>
1a002f8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002f90:	d10b      	bne.n	1a002faa <__aeabi_ddiv+0x11e>
1a002f92:	ea41 0100 	orr.w	r1, r1, r0
1a002f96:	f04f 0000 	mov.w	r0, #0
1a002f9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002f9e:	e7b6      	b.n	1a002f0e <__aeabi_ddiv+0x82>
1a002fa0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002fa4:	bf04      	itt	eq
1a002fa6:	4301      	orreq	r1, r0
1a002fa8:	2000      	moveq	r0, #0
1a002faa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002fae:	bf88      	it	hi
1a002fb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002fb4:	f63f aeaf 	bhi.w	1a002d16 <__aeabi_dmul+0xde>
1a002fb8:	ebb5 0c03 	subs.w	ip, r5, r3
1a002fbc:	bf04      	itt	eq
1a002fbe:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002fc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002fc6:	f150 0000 	adcs.w	r0, r0, #0
1a002fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002fce:	bd70      	pop	{r4, r5, r6, pc}
1a002fd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002fd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002fd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002fdc:	bfc2      	ittt	gt
1a002fde:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002fe2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002fe6:	bd70      	popgt	{r4, r5, r6, pc}
1a002fe8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002fec:	f04f 0e00 	mov.w	lr, #0
1a002ff0:	3c01      	subs	r4, #1
1a002ff2:	e690      	b.n	1a002d16 <__aeabi_dmul+0xde>
1a002ff4:	ea45 0e06 	orr.w	lr, r5, r6
1a002ff8:	e68d      	b.n	1a002d16 <__aeabi_dmul+0xde>
1a002ffa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002ffe:	ea94 0f0c 	teq	r4, ip
1a003002:	bf08      	it	eq
1a003004:	ea95 0f0c 	teqeq	r5, ip
1a003008:	f43f af3b 	beq.w	1a002e82 <__aeabi_dmul+0x24a>
1a00300c:	ea94 0f0c 	teq	r4, ip
1a003010:	d10a      	bne.n	1a003028 <__aeabi_ddiv+0x19c>
1a003012:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a003016:	f47f af34 	bne.w	1a002e82 <__aeabi_dmul+0x24a>
1a00301a:	ea95 0f0c 	teq	r5, ip
1a00301e:	f47f af25 	bne.w	1a002e6c <__aeabi_dmul+0x234>
1a003022:	4610      	mov	r0, r2
1a003024:	4619      	mov	r1, r3
1a003026:	e72c      	b.n	1a002e82 <__aeabi_dmul+0x24a>
1a003028:	ea95 0f0c 	teq	r5, ip
1a00302c:	d106      	bne.n	1a00303c <__aeabi_ddiv+0x1b0>
1a00302e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a003032:	f43f aefd 	beq.w	1a002e30 <__aeabi_dmul+0x1f8>
1a003036:	4610      	mov	r0, r2
1a003038:	4619      	mov	r1, r3
1a00303a:	e722      	b.n	1a002e82 <__aeabi_dmul+0x24a>
1a00303c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a003040:	bf18      	it	ne
1a003042:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a003046:	f47f aec5 	bne.w	1a002dd4 <__aeabi_dmul+0x19c>
1a00304a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00304e:	f47f af0d 	bne.w	1a002e6c <__aeabi_dmul+0x234>
1a003052:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a003056:	f47f aeeb 	bne.w	1a002e30 <__aeabi_dmul+0x1f8>
1a00305a:	e712      	b.n	1a002e82 <__aeabi_dmul+0x24a>

1a00305c <__divdi3>:
1a00305c:	2900      	cmp	r1, #0
1a00305e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003062:	f2c0 80a6 	blt.w	1a0031b2 <__divdi3+0x156>
1a003066:	2600      	movs	r6, #0
1a003068:	2b00      	cmp	r3, #0
1a00306a:	f2c0 809c 	blt.w	1a0031a6 <__divdi3+0x14a>
1a00306e:	4688      	mov	r8, r1
1a003070:	4694      	mov	ip, r2
1a003072:	469e      	mov	lr, r3
1a003074:	4615      	mov	r5, r2
1a003076:	4604      	mov	r4, r0
1a003078:	460f      	mov	r7, r1
1a00307a:	2b00      	cmp	r3, #0
1a00307c:	d13d      	bne.n	1a0030fa <__divdi3+0x9e>
1a00307e:	428a      	cmp	r2, r1
1a003080:	d959      	bls.n	1a003136 <__divdi3+0xda>
1a003082:	fab2 f382 	clz	r3, r2
1a003086:	b13b      	cbz	r3, 1a003098 <__divdi3+0x3c>
1a003088:	f1c3 0220 	rsb	r2, r3, #32
1a00308c:	409f      	lsls	r7, r3
1a00308e:	fa20 f202 	lsr.w	r2, r0, r2
1a003092:	409d      	lsls	r5, r3
1a003094:	4317      	orrs	r7, r2
1a003096:	409c      	lsls	r4, r3
1a003098:	0c29      	lsrs	r1, r5, #16
1a00309a:	0c22      	lsrs	r2, r4, #16
1a00309c:	fbb7 fef1 	udiv	lr, r7, r1
1a0030a0:	b2a8      	uxth	r0, r5
1a0030a2:	fb01 771e 	mls	r7, r1, lr, r7
1a0030a6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a0030aa:	fb00 f30e 	mul.w	r3, r0, lr
1a0030ae:	42bb      	cmp	r3, r7
1a0030b0:	d90a      	bls.n	1a0030c8 <__divdi3+0x6c>
1a0030b2:	197f      	adds	r7, r7, r5
1a0030b4:	f10e 32ff 	add.w	r2, lr, #4294967295
1a0030b8:	f080 8105 	bcs.w	1a0032c6 <__divdi3+0x26a>
1a0030bc:	42bb      	cmp	r3, r7
1a0030be:	f240 8102 	bls.w	1a0032c6 <__divdi3+0x26a>
1a0030c2:	f1ae 0e02 	sub.w	lr, lr, #2
1a0030c6:	442f      	add	r7, r5
1a0030c8:	1aff      	subs	r7, r7, r3
1a0030ca:	b2a4      	uxth	r4, r4
1a0030cc:	fbb7 f3f1 	udiv	r3, r7, r1
1a0030d0:	fb01 7713 	mls	r7, r1, r3, r7
1a0030d4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0030d8:	fb00 f003 	mul.w	r0, r0, r3
1a0030dc:	42b8      	cmp	r0, r7
1a0030de:	d908      	bls.n	1a0030f2 <__divdi3+0x96>
1a0030e0:	197f      	adds	r7, r7, r5
1a0030e2:	f103 32ff 	add.w	r2, r3, #4294967295
1a0030e6:	f080 80f0 	bcs.w	1a0032ca <__divdi3+0x26e>
1a0030ea:	42b8      	cmp	r0, r7
1a0030ec:	f240 80ed 	bls.w	1a0032ca <__divdi3+0x26e>
1a0030f0:	3b02      	subs	r3, #2
1a0030f2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0030f6:	2200      	movs	r2, #0
1a0030f8:	e003      	b.n	1a003102 <__divdi3+0xa6>
1a0030fa:	428b      	cmp	r3, r1
1a0030fc:	d90f      	bls.n	1a00311e <__divdi3+0xc2>
1a0030fe:	2200      	movs	r2, #0
1a003100:	4613      	mov	r3, r2
1a003102:	1c34      	adds	r4, r6, #0
1a003104:	bf18      	it	ne
1a003106:	2401      	movne	r4, #1
1a003108:	4260      	negs	r0, r4
1a00310a:	f04f 0500 	mov.w	r5, #0
1a00310e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a003112:	4058      	eors	r0, r3
1a003114:	4051      	eors	r1, r2
1a003116:	1900      	adds	r0, r0, r4
1a003118:	4169      	adcs	r1, r5
1a00311a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00311e:	fab3 f283 	clz	r2, r3
1a003122:	2a00      	cmp	r2, #0
1a003124:	f040 8086 	bne.w	1a003234 <__divdi3+0x1d8>
1a003128:	428b      	cmp	r3, r1
1a00312a:	d302      	bcc.n	1a003132 <__divdi3+0xd6>
1a00312c:	4584      	cmp	ip, r0
1a00312e:	f200 80db 	bhi.w	1a0032e8 <__divdi3+0x28c>
1a003132:	2301      	movs	r3, #1
1a003134:	e7e5      	b.n	1a003102 <__divdi3+0xa6>
1a003136:	b912      	cbnz	r2, 1a00313e <__divdi3+0xe2>
1a003138:	2301      	movs	r3, #1
1a00313a:	fbb3 f5f2 	udiv	r5, r3, r2
1a00313e:	fab5 f085 	clz	r0, r5
1a003142:	2800      	cmp	r0, #0
1a003144:	d13b      	bne.n	1a0031be <__divdi3+0x162>
1a003146:	1b78      	subs	r0, r7, r5
1a003148:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00314c:	fa1f fc85 	uxth.w	ip, r5
1a003150:	2201      	movs	r2, #1
1a003152:	fbb0 f8fe 	udiv	r8, r0, lr
1a003156:	0c21      	lsrs	r1, r4, #16
1a003158:	fb0e 0718 	mls	r7, lr, r8, r0
1a00315c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003160:	fb0c f308 	mul.w	r3, ip, r8
1a003164:	42bb      	cmp	r3, r7
1a003166:	d907      	bls.n	1a003178 <__divdi3+0x11c>
1a003168:	197f      	adds	r7, r7, r5
1a00316a:	f108 31ff 	add.w	r1, r8, #4294967295
1a00316e:	d202      	bcs.n	1a003176 <__divdi3+0x11a>
1a003170:	42bb      	cmp	r3, r7
1a003172:	f200 80bd 	bhi.w	1a0032f0 <__divdi3+0x294>
1a003176:	4688      	mov	r8, r1
1a003178:	1aff      	subs	r7, r7, r3
1a00317a:	b2a4      	uxth	r4, r4
1a00317c:	fbb7 f3fe 	udiv	r3, r7, lr
1a003180:	fb0e 7713 	mls	r7, lr, r3, r7
1a003184:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003188:	fb0c fc03 	mul.w	ip, ip, r3
1a00318c:	45bc      	cmp	ip, r7
1a00318e:	d907      	bls.n	1a0031a0 <__divdi3+0x144>
1a003190:	197f      	adds	r7, r7, r5
1a003192:	f103 31ff 	add.w	r1, r3, #4294967295
1a003196:	d202      	bcs.n	1a00319e <__divdi3+0x142>
1a003198:	45bc      	cmp	ip, r7
1a00319a:	f200 80a7 	bhi.w	1a0032ec <__divdi3+0x290>
1a00319e:	460b      	mov	r3, r1
1a0031a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0031a4:	e7ad      	b.n	1a003102 <__divdi3+0xa6>
1a0031a6:	4252      	negs	r2, r2
1a0031a8:	ea6f 0606 	mvn.w	r6, r6
1a0031ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0031b0:	e75d      	b.n	1a00306e <__divdi3+0x12>
1a0031b2:	4240      	negs	r0, r0
1a0031b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0031b8:	f04f 36ff 	mov.w	r6, #4294967295
1a0031bc:	e754      	b.n	1a003068 <__divdi3+0xc>
1a0031be:	f1c0 0220 	rsb	r2, r0, #32
1a0031c2:	fa24 f102 	lsr.w	r1, r4, r2
1a0031c6:	fa07 f300 	lsl.w	r3, r7, r0
1a0031ca:	4085      	lsls	r5, r0
1a0031cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0031d0:	40d7      	lsrs	r7, r2
1a0031d2:	4319      	orrs	r1, r3
1a0031d4:	fbb7 f2fe 	udiv	r2, r7, lr
1a0031d8:	0c0b      	lsrs	r3, r1, #16
1a0031da:	fb0e 7712 	mls	r7, lr, r2, r7
1a0031de:	fa1f fc85 	uxth.w	ip, r5
1a0031e2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a0031e6:	fb0c f702 	mul.w	r7, ip, r2
1a0031ea:	429f      	cmp	r7, r3
1a0031ec:	fa04 f400 	lsl.w	r4, r4, r0
1a0031f0:	d907      	bls.n	1a003202 <__divdi3+0x1a6>
1a0031f2:	195b      	adds	r3, r3, r5
1a0031f4:	f102 30ff 	add.w	r0, r2, #4294967295
1a0031f8:	d274      	bcs.n	1a0032e4 <__divdi3+0x288>
1a0031fa:	429f      	cmp	r7, r3
1a0031fc:	d972      	bls.n	1a0032e4 <__divdi3+0x288>
1a0031fe:	3a02      	subs	r2, #2
1a003200:	442b      	add	r3, r5
1a003202:	1bdf      	subs	r7, r3, r7
1a003204:	b289      	uxth	r1, r1
1a003206:	fbb7 f8fe 	udiv	r8, r7, lr
1a00320a:	fb0e 7318 	mls	r3, lr, r8, r7
1a00320e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003212:	fb0c f708 	mul.w	r7, ip, r8
1a003216:	429f      	cmp	r7, r3
1a003218:	d908      	bls.n	1a00322c <__divdi3+0x1d0>
1a00321a:	195b      	adds	r3, r3, r5
1a00321c:	f108 31ff 	add.w	r1, r8, #4294967295
1a003220:	d25c      	bcs.n	1a0032dc <__divdi3+0x280>
1a003222:	429f      	cmp	r7, r3
1a003224:	d95a      	bls.n	1a0032dc <__divdi3+0x280>
1a003226:	f1a8 0802 	sub.w	r8, r8, #2
1a00322a:	442b      	add	r3, r5
1a00322c:	1bd8      	subs	r0, r3, r7
1a00322e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a003232:	e78e      	b.n	1a003152 <__divdi3+0xf6>
1a003234:	f1c2 0320 	rsb	r3, r2, #32
1a003238:	fa2c f103 	lsr.w	r1, ip, r3
1a00323c:	fa0e fe02 	lsl.w	lr, lr, r2
1a003240:	fa20 f703 	lsr.w	r7, r0, r3
1a003244:	ea41 0e0e 	orr.w	lr, r1, lr
1a003248:	fa08 f002 	lsl.w	r0, r8, r2
1a00324c:	fa28 f103 	lsr.w	r1, r8, r3
1a003250:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003254:	4338      	orrs	r0, r7
1a003256:	fbb1 f8f5 	udiv	r8, r1, r5
1a00325a:	0c03      	lsrs	r3, r0, #16
1a00325c:	fb05 1118 	mls	r1, r5, r8, r1
1a003260:	fa1f f78e 	uxth.w	r7, lr
1a003264:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003268:	fb07 f308 	mul.w	r3, r7, r8
1a00326c:	428b      	cmp	r3, r1
1a00326e:	fa0c fc02 	lsl.w	ip, ip, r2
1a003272:	d909      	bls.n	1a003288 <__divdi3+0x22c>
1a003274:	eb11 010e 	adds.w	r1, r1, lr
1a003278:	f108 39ff 	add.w	r9, r8, #4294967295
1a00327c:	d230      	bcs.n	1a0032e0 <__divdi3+0x284>
1a00327e:	428b      	cmp	r3, r1
1a003280:	d92e      	bls.n	1a0032e0 <__divdi3+0x284>
1a003282:	f1a8 0802 	sub.w	r8, r8, #2
1a003286:	4471      	add	r1, lr
1a003288:	1ac9      	subs	r1, r1, r3
1a00328a:	b280      	uxth	r0, r0
1a00328c:	fbb1 f3f5 	udiv	r3, r1, r5
1a003290:	fb05 1113 	mls	r1, r5, r3, r1
1a003294:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003298:	fb07 f703 	mul.w	r7, r7, r3
1a00329c:	428f      	cmp	r7, r1
1a00329e:	d908      	bls.n	1a0032b2 <__divdi3+0x256>
1a0032a0:	eb11 010e 	adds.w	r1, r1, lr
1a0032a4:	f103 30ff 	add.w	r0, r3, #4294967295
1a0032a8:	d216      	bcs.n	1a0032d8 <__divdi3+0x27c>
1a0032aa:	428f      	cmp	r7, r1
1a0032ac:	d914      	bls.n	1a0032d8 <__divdi3+0x27c>
1a0032ae:	3b02      	subs	r3, #2
1a0032b0:	4471      	add	r1, lr
1a0032b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0032b6:	1bc9      	subs	r1, r1, r7
1a0032b8:	fba3 890c 	umull	r8, r9, r3, ip
1a0032bc:	4549      	cmp	r1, r9
1a0032be:	d309      	bcc.n	1a0032d4 <__divdi3+0x278>
1a0032c0:	d005      	beq.n	1a0032ce <__divdi3+0x272>
1a0032c2:	2200      	movs	r2, #0
1a0032c4:	e71d      	b.n	1a003102 <__divdi3+0xa6>
1a0032c6:	4696      	mov	lr, r2
1a0032c8:	e6fe      	b.n	1a0030c8 <__divdi3+0x6c>
1a0032ca:	4613      	mov	r3, r2
1a0032cc:	e711      	b.n	1a0030f2 <__divdi3+0x96>
1a0032ce:	4094      	lsls	r4, r2
1a0032d0:	4544      	cmp	r4, r8
1a0032d2:	d2f6      	bcs.n	1a0032c2 <__divdi3+0x266>
1a0032d4:	3b01      	subs	r3, #1
1a0032d6:	e7f4      	b.n	1a0032c2 <__divdi3+0x266>
1a0032d8:	4603      	mov	r3, r0
1a0032da:	e7ea      	b.n	1a0032b2 <__divdi3+0x256>
1a0032dc:	4688      	mov	r8, r1
1a0032de:	e7a5      	b.n	1a00322c <__divdi3+0x1d0>
1a0032e0:	46c8      	mov	r8, r9
1a0032e2:	e7d1      	b.n	1a003288 <__divdi3+0x22c>
1a0032e4:	4602      	mov	r2, r0
1a0032e6:	e78c      	b.n	1a003202 <__divdi3+0x1a6>
1a0032e8:	4613      	mov	r3, r2
1a0032ea:	e70a      	b.n	1a003102 <__divdi3+0xa6>
1a0032ec:	3b02      	subs	r3, #2
1a0032ee:	e757      	b.n	1a0031a0 <__divdi3+0x144>
1a0032f0:	f1a8 0802 	sub.w	r8, r8, #2
1a0032f4:	442f      	add	r7, r5
1a0032f6:	e73f      	b.n	1a003178 <__divdi3+0x11c>

1a0032f8 <__udivdi3>:
1a0032f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0032fc:	2b00      	cmp	r3, #0
1a0032fe:	d144      	bne.n	1a00338a <__udivdi3+0x92>
1a003300:	428a      	cmp	r2, r1
1a003302:	4615      	mov	r5, r2
1a003304:	4604      	mov	r4, r0
1a003306:	d94f      	bls.n	1a0033a8 <__udivdi3+0xb0>
1a003308:	fab2 f782 	clz	r7, r2
1a00330c:	460e      	mov	r6, r1
1a00330e:	b14f      	cbz	r7, 1a003324 <__udivdi3+0x2c>
1a003310:	f1c7 0320 	rsb	r3, r7, #32
1a003314:	40b9      	lsls	r1, r7
1a003316:	fa20 f603 	lsr.w	r6, r0, r3
1a00331a:	fa02 f507 	lsl.w	r5, r2, r7
1a00331e:	430e      	orrs	r6, r1
1a003320:	fa00 f407 	lsl.w	r4, r0, r7
1a003324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003328:	0c23      	lsrs	r3, r4, #16
1a00332a:	fbb6 f0fe 	udiv	r0, r6, lr
1a00332e:	b2af      	uxth	r7, r5
1a003330:	fb0e 6110 	mls	r1, lr, r0, r6
1a003334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003338:	fb07 f100 	mul.w	r1, r7, r0
1a00333c:	4299      	cmp	r1, r3
1a00333e:	d909      	bls.n	1a003354 <__udivdi3+0x5c>
1a003340:	195b      	adds	r3, r3, r5
1a003342:	f100 32ff 	add.w	r2, r0, #4294967295
1a003346:	f080 80ec 	bcs.w	1a003522 <__udivdi3+0x22a>
1a00334a:	4299      	cmp	r1, r3
1a00334c:	f240 80e9 	bls.w	1a003522 <__udivdi3+0x22a>
1a003350:	3802      	subs	r0, #2
1a003352:	442b      	add	r3, r5
1a003354:	1a5a      	subs	r2, r3, r1
1a003356:	b2a4      	uxth	r4, r4
1a003358:	fbb2 f3fe 	udiv	r3, r2, lr
1a00335c:	fb0e 2213 	mls	r2, lr, r3, r2
1a003360:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003364:	fb07 f703 	mul.w	r7, r7, r3
1a003368:	4297      	cmp	r7, r2
1a00336a:	d908      	bls.n	1a00337e <__udivdi3+0x86>
1a00336c:	1952      	adds	r2, r2, r5
1a00336e:	f103 31ff 	add.w	r1, r3, #4294967295
1a003372:	f080 80d8 	bcs.w	1a003526 <__udivdi3+0x22e>
1a003376:	4297      	cmp	r7, r2
1a003378:	f240 80d5 	bls.w	1a003526 <__udivdi3+0x22e>
1a00337c:	3b02      	subs	r3, #2
1a00337e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003382:	2600      	movs	r6, #0
1a003384:	4631      	mov	r1, r6
1a003386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00338a:	428b      	cmp	r3, r1
1a00338c:	d847      	bhi.n	1a00341e <__udivdi3+0x126>
1a00338e:	fab3 f683 	clz	r6, r3
1a003392:	2e00      	cmp	r6, #0
1a003394:	d148      	bne.n	1a003428 <__udivdi3+0x130>
1a003396:	428b      	cmp	r3, r1
1a003398:	d302      	bcc.n	1a0033a0 <__udivdi3+0xa8>
1a00339a:	4282      	cmp	r2, r0
1a00339c:	f200 80cd 	bhi.w	1a00353a <__udivdi3+0x242>
1a0033a0:	2001      	movs	r0, #1
1a0033a2:	4631      	mov	r1, r6
1a0033a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0033a8:	b912      	cbnz	r2, 1a0033b0 <__udivdi3+0xb8>
1a0033aa:	2501      	movs	r5, #1
1a0033ac:	fbb5 f5f2 	udiv	r5, r5, r2
1a0033b0:	fab5 f885 	clz	r8, r5
1a0033b4:	f1b8 0f00 	cmp.w	r8, #0
1a0033b8:	d177      	bne.n	1a0034aa <__udivdi3+0x1b2>
1a0033ba:	1b4a      	subs	r2, r1, r5
1a0033bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0033c0:	b2af      	uxth	r7, r5
1a0033c2:	2601      	movs	r6, #1
1a0033c4:	fbb2 f0fe 	udiv	r0, r2, lr
1a0033c8:	0c23      	lsrs	r3, r4, #16
1a0033ca:	fb0e 2110 	mls	r1, lr, r0, r2
1a0033ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0033d2:	fb07 f300 	mul.w	r3, r7, r0
1a0033d6:	428b      	cmp	r3, r1
1a0033d8:	d907      	bls.n	1a0033ea <__udivdi3+0xf2>
1a0033da:	1949      	adds	r1, r1, r5
1a0033dc:	f100 32ff 	add.w	r2, r0, #4294967295
1a0033e0:	d202      	bcs.n	1a0033e8 <__udivdi3+0xf0>
1a0033e2:	428b      	cmp	r3, r1
1a0033e4:	f200 80ba 	bhi.w	1a00355c <__udivdi3+0x264>
1a0033e8:	4610      	mov	r0, r2
1a0033ea:	1ac9      	subs	r1, r1, r3
1a0033ec:	b2a4      	uxth	r4, r4
1a0033ee:	fbb1 f3fe 	udiv	r3, r1, lr
1a0033f2:	fb0e 1113 	mls	r1, lr, r3, r1
1a0033f6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0033fa:	fb07 f703 	mul.w	r7, r7, r3
1a0033fe:	42a7      	cmp	r7, r4
1a003400:	d908      	bls.n	1a003414 <__udivdi3+0x11c>
1a003402:	1964      	adds	r4, r4, r5
1a003404:	f103 32ff 	add.w	r2, r3, #4294967295
1a003408:	f080 808f 	bcs.w	1a00352a <__udivdi3+0x232>
1a00340c:	42a7      	cmp	r7, r4
1a00340e:	f240 808c 	bls.w	1a00352a <__udivdi3+0x232>
1a003412:	3b02      	subs	r3, #2
1a003414:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003418:	4631      	mov	r1, r6
1a00341a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00341e:	2600      	movs	r6, #0
1a003420:	4630      	mov	r0, r6
1a003422:	4631      	mov	r1, r6
1a003424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003428:	f1c6 0420 	rsb	r4, r6, #32
1a00342c:	fa22 f504 	lsr.w	r5, r2, r4
1a003430:	40b3      	lsls	r3, r6
1a003432:	432b      	orrs	r3, r5
1a003434:	fa20 fc04 	lsr.w	ip, r0, r4
1a003438:	fa01 f706 	lsl.w	r7, r1, r6
1a00343c:	fa21 f504 	lsr.w	r5, r1, r4
1a003440:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003444:	ea4c 0707 	orr.w	r7, ip, r7
1a003448:	fbb5 f8fe 	udiv	r8, r5, lr
1a00344c:	0c39      	lsrs	r1, r7, #16
1a00344e:	fb0e 5518 	mls	r5, lr, r8, r5
1a003452:	fa1f fc83 	uxth.w	ip, r3
1a003456:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a00345a:	fb0c f108 	mul.w	r1, ip, r8
1a00345e:	42a9      	cmp	r1, r5
1a003460:	fa02 f206 	lsl.w	r2, r2, r6
1a003464:	d904      	bls.n	1a003470 <__udivdi3+0x178>
1a003466:	18ed      	adds	r5, r5, r3
1a003468:	f108 34ff 	add.w	r4, r8, #4294967295
1a00346c:	d367      	bcc.n	1a00353e <__udivdi3+0x246>
1a00346e:	46a0      	mov	r8, r4
1a003470:	1a6d      	subs	r5, r5, r1
1a003472:	b2bf      	uxth	r7, r7
1a003474:	fbb5 f4fe 	udiv	r4, r5, lr
1a003478:	fb0e 5514 	mls	r5, lr, r4, r5
1a00347c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003480:	fb0c fc04 	mul.w	ip, ip, r4
1a003484:	458c      	cmp	ip, r1
1a003486:	d904      	bls.n	1a003492 <__udivdi3+0x19a>
1a003488:	18c9      	adds	r1, r1, r3
1a00348a:	f104 35ff 	add.w	r5, r4, #4294967295
1a00348e:	d35c      	bcc.n	1a00354a <__udivdi3+0x252>
1a003490:	462c      	mov	r4, r5
1a003492:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003496:	ebcc 0101 	rsb	r1, ip, r1
1a00349a:	fba4 2302 	umull	r2, r3, r4, r2
1a00349e:	4299      	cmp	r1, r3
1a0034a0:	d348      	bcc.n	1a003534 <__udivdi3+0x23c>
1a0034a2:	d044      	beq.n	1a00352e <__udivdi3+0x236>
1a0034a4:	4620      	mov	r0, r4
1a0034a6:	2600      	movs	r6, #0
1a0034a8:	e76c      	b.n	1a003384 <__udivdi3+0x8c>
1a0034aa:	f1c8 0420 	rsb	r4, r8, #32
1a0034ae:	fa01 f308 	lsl.w	r3, r1, r8
1a0034b2:	fa05 f508 	lsl.w	r5, r5, r8
1a0034b6:	fa20 f704 	lsr.w	r7, r0, r4
1a0034ba:	40e1      	lsrs	r1, r4
1a0034bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0034c0:	431f      	orrs	r7, r3
1a0034c2:	fbb1 f6fe 	udiv	r6, r1, lr
1a0034c6:	0c3a      	lsrs	r2, r7, #16
1a0034c8:	fb0e 1116 	mls	r1, lr, r6, r1
1a0034cc:	fa1f fc85 	uxth.w	ip, r5
1a0034d0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0034d4:	fb0c f206 	mul.w	r2, ip, r6
1a0034d8:	429a      	cmp	r2, r3
1a0034da:	fa00 f408 	lsl.w	r4, r0, r8
1a0034de:	d907      	bls.n	1a0034f0 <__udivdi3+0x1f8>
1a0034e0:	195b      	adds	r3, r3, r5
1a0034e2:	f106 31ff 	add.w	r1, r6, #4294967295
1a0034e6:	d237      	bcs.n	1a003558 <__udivdi3+0x260>
1a0034e8:	429a      	cmp	r2, r3
1a0034ea:	d935      	bls.n	1a003558 <__udivdi3+0x260>
1a0034ec:	3e02      	subs	r6, #2
1a0034ee:	442b      	add	r3, r5
1a0034f0:	1a9b      	subs	r3, r3, r2
1a0034f2:	b2bf      	uxth	r7, r7
1a0034f4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0034f8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0034fc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a003500:	fb0c f100 	mul.w	r1, ip, r0
1a003504:	4299      	cmp	r1, r3
1a003506:	d907      	bls.n	1a003518 <__udivdi3+0x220>
1a003508:	195b      	adds	r3, r3, r5
1a00350a:	f100 32ff 	add.w	r2, r0, #4294967295
1a00350e:	d221      	bcs.n	1a003554 <__udivdi3+0x25c>
1a003510:	4299      	cmp	r1, r3
1a003512:	d91f      	bls.n	1a003554 <__udivdi3+0x25c>
1a003514:	3802      	subs	r0, #2
1a003516:	442b      	add	r3, r5
1a003518:	1a5a      	subs	r2, r3, r1
1a00351a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00351e:	4667      	mov	r7, ip
1a003520:	e750      	b.n	1a0033c4 <__udivdi3+0xcc>
1a003522:	4610      	mov	r0, r2
1a003524:	e716      	b.n	1a003354 <__udivdi3+0x5c>
1a003526:	460b      	mov	r3, r1
1a003528:	e729      	b.n	1a00337e <__udivdi3+0x86>
1a00352a:	4613      	mov	r3, r2
1a00352c:	e772      	b.n	1a003414 <__udivdi3+0x11c>
1a00352e:	40b0      	lsls	r0, r6
1a003530:	4290      	cmp	r0, r2
1a003532:	d2b7      	bcs.n	1a0034a4 <__udivdi3+0x1ac>
1a003534:	1e60      	subs	r0, r4, #1
1a003536:	2600      	movs	r6, #0
1a003538:	e724      	b.n	1a003384 <__udivdi3+0x8c>
1a00353a:	4630      	mov	r0, r6
1a00353c:	e722      	b.n	1a003384 <__udivdi3+0x8c>
1a00353e:	42a9      	cmp	r1, r5
1a003540:	d995      	bls.n	1a00346e <__udivdi3+0x176>
1a003542:	f1a8 0802 	sub.w	r8, r8, #2
1a003546:	441d      	add	r5, r3
1a003548:	e792      	b.n	1a003470 <__udivdi3+0x178>
1a00354a:	458c      	cmp	ip, r1
1a00354c:	d9a0      	bls.n	1a003490 <__udivdi3+0x198>
1a00354e:	3c02      	subs	r4, #2
1a003550:	4419      	add	r1, r3
1a003552:	e79e      	b.n	1a003492 <__udivdi3+0x19a>
1a003554:	4610      	mov	r0, r2
1a003556:	e7df      	b.n	1a003518 <__udivdi3+0x220>
1a003558:	460e      	mov	r6, r1
1a00355a:	e7c9      	b.n	1a0034f0 <__udivdi3+0x1f8>
1a00355c:	3802      	subs	r0, #2
1a00355e:	4429      	add	r1, r5
1a003560:	e743      	b.n	1a0033ea <__udivdi3+0xf2>
1a003562:	bf00      	nop

1a003564 <__libc_init_array>:
1a003564:	b570      	push	{r4, r5, r6, lr}
1a003566:	4e0f      	ldr	r6, [pc, #60]	; (1a0035a4 <__libc_init_array+0x40>)
1a003568:	4d0f      	ldr	r5, [pc, #60]	; (1a0035a8 <__libc_init_array+0x44>)
1a00356a:	1b76      	subs	r6, r6, r5
1a00356c:	10b6      	asrs	r6, r6, #2
1a00356e:	bf18      	it	ne
1a003570:	2400      	movne	r4, #0
1a003572:	d005      	beq.n	1a003580 <__libc_init_array+0x1c>
1a003574:	3401      	adds	r4, #1
1a003576:	f855 3b04 	ldr.w	r3, [r5], #4
1a00357a:	4798      	blx	r3
1a00357c:	42a6      	cmp	r6, r4
1a00357e:	d1f9      	bne.n	1a003574 <__libc_init_array+0x10>
1a003580:	4e0a      	ldr	r6, [pc, #40]	; (1a0035ac <__libc_init_array+0x48>)
1a003582:	4d0b      	ldr	r5, [pc, #44]	; (1a0035b0 <__libc_init_array+0x4c>)
1a003584:	1b76      	subs	r6, r6, r5
1a003586:	f7ff f937 	bl	1a0027f8 <_init>
1a00358a:	10b6      	asrs	r6, r6, #2
1a00358c:	bf18      	it	ne
1a00358e:	2400      	movne	r4, #0
1a003590:	d006      	beq.n	1a0035a0 <__libc_init_array+0x3c>
1a003592:	3401      	adds	r4, #1
1a003594:	f855 3b04 	ldr.w	r3, [r5], #4
1a003598:	4798      	blx	r3
1a00359a:	42a6      	cmp	r6, r4
1a00359c:	d1f9      	bne.n	1a003592 <__libc_init_array+0x2e>
1a00359e:	bd70      	pop	{r4, r5, r6, pc}
1a0035a0:	bd70      	pop	{r4, r5, r6, pc}
1a0035a2:	bf00      	nop
1a0035a4:	1a007ac0 	.word	0x1a007ac0
1a0035a8:	1a007ac0 	.word	0x1a007ac0
1a0035ac:	1a007ac0 	.word	0x1a007ac0
1a0035b0:	1a007ac0 	.word	0x1a007ac0

1a0035b4 <memcpy>:
1a0035b4:	4684      	mov	ip, r0
1a0035b6:	ea41 0300 	orr.w	r3, r1, r0
1a0035ba:	f013 0303 	ands.w	r3, r3, #3
1a0035be:	d16d      	bne.n	1a00369c <memcpy+0xe8>
1a0035c0:	3a40      	subs	r2, #64	; 0x40
1a0035c2:	d341      	bcc.n	1a003648 <memcpy+0x94>
1a0035c4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035c8:	f840 3b04 	str.w	r3, [r0], #4
1a0035cc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035d0:	f840 3b04 	str.w	r3, [r0], #4
1a0035d4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035d8:	f840 3b04 	str.w	r3, [r0], #4
1a0035dc:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035e0:	f840 3b04 	str.w	r3, [r0], #4
1a0035e4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035e8:	f840 3b04 	str.w	r3, [r0], #4
1a0035ec:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035f0:	f840 3b04 	str.w	r3, [r0], #4
1a0035f4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0035f8:	f840 3b04 	str.w	r3, [r0], #4
1a0035fc:	f851 3b04 	ldr.w	r3, [r1], #4
1a003600:	f840 3b04 	str.w	r3, [r0], #4
1a003604:	f851 3b04 	ldr.w	r3, [r1], #4
1a003608:	f840 3b04 	str.w	r3, [r0], #4
1a00360c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003610:	f840 3b04 	str.w	r3, [r0], #4
1a003614:	f851 3b04 	ldr.w	r3, [r1], #4
1a003618:	f840 3b04 	str.w	r3, [r0], #4
1a00361c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003620:	f840 3b04 	str.w	r3, [r0], #4
1a003624:	f851 3b04 	ldr.w	r3, [r1], #4
1a003628:	f840 3b04 	str.w	r3, [r0], #4
1a00362c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003630:	f840 3b04 	str.w	r3, [r0], #4
1a003634:	f851 3b04 	ldr.w	r3, [r1], #4
1a003638:	f840 3b04 	str.w	r3, [r0], #4
1a00363c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003640:	f840 3b04 	str.w	r3, [r0], #4
1a003644:	3a40      	subs	r2, #64	; 0x40
1a003646:	d2bd      	bcs.n	1a0035c4 <memcpy+0x10>
1a003648:	3230      	adds	r2, #48	; 0x30
1a00364a:	d311      	bcc.n	1a003670 <memcpy+0xbc>
1a00364c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003650:	f840 3b04 	str.w	r3, [r0], #4
1a003654:	f851 3b04 	ldr.w	r3, [r1], #4
1a003658:	f840 3b04 	str.w	r3, [r0], #4
1a00365c:	f851 3b04 	ldr.w	r3, [r1], #4
1a003660:	f840 3b04 	str.w	r3, [r0], #4
1a003664:	f851 3b04 	ldr.w	r3, [r1], #4
1a003668:	f840 3b04 	str.w	r3, [r0], #4
1a00366c:	3a10      	subs	r2, #16
1a00366e:	d2ed      	bcs.n	1a00364c <memcpy+0x98>
1a003670:	320c      	adds	r2, #12
1a003672:	d305      	bcc.n	1a003680 <memcpy+0xcc>
1a003674:	f851 3b04 	ldr.w	r3, [r1], #4
1a003678:	f840 3b04 	str.w	r3, [r0], #4
1a00367c:	3a04      	subs	r2, #4
1a00367e:	d2f9      	bcs.n	1a003674 <memcpy+0xc0>
1a003680:	3204      	adds	r2, #4
1a003682:	d008      	beq.n	1a003696 <memcpy+0xe2>
1a003684:	07d2      	lsls	r2, r2, #31
1a003686:	bf1c      	itt	ne
1a003688:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00368c:	f800 3b01 	strbne.w	r3, [r0], #1
1a003690:	d301      	bcc.n	1a003696 <memcpy+0xe2>
1a003692:	880b      	ldrh	r3, [r1, #0]
1a003694:	8003      	strh	r3, [r0, #0]
1a003696:	4660      	mov	r0, ip
1a003698:	4770      	bx	lr
1a00369a:	bf00      	nop
1a00369c:	2a08      	cmp	r2, #8
1a00369e:	d313      	bcc.n	1a0036c8 <memcpy+0x114>
1a0036a0:	078b      	lsls	r3, r1, #30
1a0036a2:	d08d      	beq.n	1a0035c0 <memcpy+0xc>
1a0036a4:	f010 0303 	ands.w	r3, r0, #3
1a0036a8:	d08a      	beq.n	1a0035c0 <memcpy+0xc>
1a0036aa:	f1c3 0304 	rsb	r3, r3, #4
1a0036ae:	1ad2      	subs	r2, r2, r3
1a0036b0:	07db      	lsls	r3, r3, #31
1a0036b2:	bf1c      	itt	ne
1a0036b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0036b8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0036bc:	d380      	bcc.n	1a0035c0 <memcpy+0xc>
1a0036be:	f831 3b02 	ldrh.w	r3, [r1], #2
1a0036c2:	f820 3b02 	strh.w	r3, [r0], #2
1a0036c6:	e77b      	b.n	1a0035c0 <memcpy+0xc>
1a0036c8:	3a04      	subs	r2, #4
1a0036ca:	d3d9      	bcc.n	1a003680 <memcpy+0xcc>
1a0036cc:	3a01      	subs	r2, #1
1a0036ce:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0036d2:	f800 3b01 	strb.w	r3, [r0], #1
1a0036d6:	d2f9      	bcs.n	1a0036cc <memcpy+0x118>
1a0036d8:	780b      	ldrb	r3, [r1, #0]
1a0036da:	7003      	strb	r3, [r0, #0]
1a0036dc:	784b      	ldrb	r3, [r1, #1]
1a0036de:	7043      	strb	r3, [r0, #1]
1a0036e0:	788b      	ldrb	r3, [r1, #2]
1a0036e2:	7083      	strb	r3, [r0, #2]
1a0036e4:	4660      	mov	r0, ip
1a0036e6:	4770      	bx	lr

1a0036e8 <memset>:
1a0036e8:	b470      	push	{r4, r5, r6}
1a0036ea:	0784      	lsls	r4, r0, #30
1a0036ec:	d046      	beq.n	1a00377c <memset+0x94>
1a0036ee:	1e54      	subs	r4, r2, #1
1a0036f0:	2a00      	cmp	r2, #0
1a0036f2:	d041      	beq.n	1a003778 <memset+0x90>
1a0036f4:	b2cd      	uxtb	r5, r1
1a0036f6:	4603      	mov	r3, r0
1a0036f8:	e002      	b.n	1a003700 <memset+0x18>
1a0036fa:	1e62      	subs	r2, r4, #1
1a0036fc:	b3e4      	cbz	r4, 1a003778 <memset+0x90>
1a0036fe:	4614      	mov	r4, r2
1a003700:	f803 5b01 	strb.w	r5, [r3], #1
1a003704:	079a      	lsls	r2, r3, #30
1a003706:	d1f8      	bne.n	1a0036fa <memset+0x12>
1a003708:	2c03      	cmp	r4, #3
1a00370a:	d92e      	bls.n	1a00376a <memset+0x82>
1a00370c:	b2cd      	uxtb	r5, r1
1a00370e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003712:	2c0f      	cmp	r4, #15
1a003714:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003718:	d919      	bls.n	1a00374e <memset+0x66>
1a00371a:	f103 0210 	add.w	r2, r3, #16
1a00371e:	4626      	mov	r6, r4
1a003720:	3e10      	subs	r6, #16
1a003722:	2e0f      	cmp	r6, #15
1a003724:	f842 5c10 	str.w	r5, [r2, #-16]
1a003728:	f842 5c0c 	str.w	r5, [r2, #-12]
1a00372c:	f842 5c08 	str.w	r5, [r2, #-8]
1a003730:	f842 5c04 	str.w	r5, [r2, #-4]
1a003734:	f102 0210 	add.w	r2, r2, #16
1a003738:	d8f2      	bhi.n	1a003720 <memset+0x38>
1a00373a:	f1a4 0210 	sub.w	r2, r4, #16
1a00373e:	f022 020f 	bic.w	r2, r2, #15
1a003742:	f004 040f 	and.w	r4, r4, #15
1a003746:	3210      	adds	r2, #16
1a003748:	2c03      	cmp	r4, #3
1a00374a:	4413      	add	r3, r2
1a00374c:	d90d      	bls.n	1a00376a <memset+0x82>
1a00374e:	461e      	mov	r6, r3
1a003750:	4622      	mov	r2, r4
1a003752:	3a04      	subs	r2, #4
1a003754:	2a03      	cmp	r2, #3
1a003756:	f846 5b04 	str.w	r5, [r6], #4
1a00375a:	d8fa      	bhi.n	1a003752 <memset+0x6a>
1a00375c:	1f22      	subs	r2, r4, #4
1a00375e:	f022 0203 	bic.w	r2, r2, #3
1a003762:	3204      	adds	r2, #4
1a003764:	4413      	add	r3, r2
1a003766:	f004 0403 	and.w	r4, r4, #3
1a00376a:	b12c      	cbz	r4, 1a003778 <memset+0x90>
1a00376c:	b2c9      	uxtb	r1, r1
1a00376e:	441c      	add	r4, r3
1a003770:	f803 1b01 	strb.w	r1, [r3], #1
1a003774:	42a3      	cmp	r3, r4
1a003776:	d1fb      	bne.n	1a003770 <memset+0x88>
1a003778:	bc70      	pop	{r4, r5, r6}
1a00377a:	4770      	bx	lr
1a00377c:	4614      	mov	r4, r2
1a00377e:	4603      	mov	r3, r0
1a003780:	e7c2      	b.n	1a003708 <memset+0x20>
1a003782:	bf00      	nop

1a003784 <sprintf>:
1a003784:	b40e      	push	{r1, r2, r3}
1a003786:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003788:	b09c      	sub	sp, #112	; 0x70
1a00378a:	ab21      	add	r3, sp, #132	; 0x84
1a00378c:	490f      	ldr	r1, [pc, #60]	; (1a0037cc <sprintf+0x48>)
1a00378e:	f853 2b04 	ldr.w	r2, [r3], #4
1a003792:	9301      	str	r3, [sp, #4]
1a003794:	4605      	mov	r5, r0
1a003796:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
1a00379a:	6808      	ldr	r0, [r1, #0]
1a00379c:	9502      	str	r5, [sp, #8]
1a00379e:	f44f 7702 	mov.w	r7, #520	; 0x208
1a0037a2:	f64f 76ff 	movw	r6, #65535	; 0xffff
1a0037a6:	a902      	add	r1, sp, #8
1a0037a8:	9506      	str	r5, [sp, #24]
1a0037aa:	f8ad 7014 	strh.w	r7, [sp, #20]
1a0037ae:	9404      	str	r4, [sp, #16]
1a0037b0:	9407      	str	r4, [sp, #28]
1a0037b2:	f8ad 6016 	strh.w	r6, [sp, #22]
1a0037b6:	f000 f897 	bl	1a0038e8 <_svfprintf_r>
1a0037ba:	9b02      	ldr	r3, [sp, #8]
1a0037bc:	2200      	movs	r2, #0
1a0037be:	701a      	strb	r2, [r3, #0]
1a0037c0:	b01c      	add	sp, #112	; 0x70
1a0037c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
1a0037c6:	b003      	add	sp, #12
1a0037c8:	4770      	bx	lr
1a0037ca:	bf00      	nop
1a0037cc:	100004a8 	.word	0x100004a8

1a0037d0 <strcpy>:
1a0037d0:	ea80 0201 	eor.w	r2, r0, r1
1a0037d4:	4684      	mov	ip, r0
1a0037d6:	f012 0f03 	tst.w	r2, #3
1a0037da:	d14f      	bne.n	1a00387c <strcpy+0xac>
1a0037dc:	f011 0f03 	tst.w	r1, #3
1a0037e0:	d132      	bne.n	1a003848 <strcpy+0x78>
1a0037e2:	f84d 4d04 	str.w	r4, [sp, #-4]!
1a0037e6:	f011 0f04 	tst.w	r1, #4
1a0037ea:	f851 3b04 	ldr.w	r3, [r1], #4
1a0037ee:	d00b      	beq.n	1a003808 <strcpy+0x38>
1a0037f0:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
1a0037f4:	439a      	bics	r2, r3
1a0037f6:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
1a0037fa:	bf04      	itt	eq
1a0037fc:	f84c 3b04 	streq.w	r3, [ip], #4
1a003800:	f851 3b04 	ldreq.w	r3, [r1], #4
1a003804:	d116      	bne.n	1a003834 <strcpy+0x64>
1a003806:	bf00      	nop
1a003808:	f851 4b04 	ldr.w	r4, [r1], #4
1a00380c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
1a003810:	439a      	bics	r2, r3
1a003812:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
1a003816:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
1a00381a:	d10b      	bne.n	1a003834 <strcpy+0x64>
1a00381c:	f84c 3b04 	str.w	r3, [ip], #4
1a003820:	43a2      	bics	r2, r4
1a003822:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
1a003826:	bf04      	itt	eq
1a003828:	f851 3b04 	ldreq.w	r3, [r1], #4
1a00382c:	f84c 4b04 	streq.w	r4, [ip], #4
1a003830:	d0ea      	beq.n	1a003808 <strcpy+0x38>
1a003832:	4623      	mov	r3, r4
1a003834:	f80c 3b01 	strb.w	r3, [ip], #1
1a003838:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00383c:	ea4f 2333 	mov.w	r3, r3, ror #8
1a003840:	d1f8      	bne.n	1a003834 <strcpy+0x64>
1a003842:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003846:	4770      	bx	lr
1a003848:	f011 0f01 	tst.w	r1, #1
1a00384c:	d006      	beq.n	1a00385c <strcpy+0x8c>
1a00384e:	f811 2b01 	ldrb.w	r2, [r1], #1
1a003852:	f80c 2b01 	strb.w	r2, [ip], #1
1a003856:	2a00      	cmp	r2, #0
1a003858:	bf08      	it	eq
1a00385a:	4770      	bxeq	lr
1a00385c:	f011 0f02 	tst.w	r1, #2
1a003860:	d0bf      	beq.n	1a0037e2 <strcpy+0x12>
1a003862:	f831 2b02 	ldrh.w	r2, [r1], #2
1a003866:	f012 0fff 	tst.w	r2, #255	; 0xff
1a00386a:	bf16      	itet	ne
1a00386c:	f82c 2b02 	strhne.w	r2, [ip], #2
1a003870:	f88c 2000 	strbeq.w	r2, [ip]
1a003874:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
1a003878:	d1b3      	bne.n	1a0037e2 <strcpy+0x12>
1a00387a:	4770      	bx	lr
1a00387c:	f811 2b01 	ldrb.w	r2, [r1], #1
1a003880:	f80c 2b01 	strb.w	r2, [ip], #1
1a003884:	2a00      	cmp	r2, #0
1a003886:	d1f9      	bne.n	1a00387c <strcpy+0xac>
1a003888:	4770      	bx	lr
1a00388a:	bf00      	nop

1a00388c <strlen>:
1a00388c:	f020 0103 	bic.w	r1, r0, #3
1a003890:	f010 0003 	ands.w	r0, r0, #3
1a003894:	f1c0 0000 	rsb	r0, r0, #0
1a003898:	f851 3b04 	ldr.w	r3, [r1], #4
1a00389c:	f100 0c04 	add.w	ip, r0, #4
1a0038a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
1a0038a4:	f06f 0200 	mvn.w	r2, #0
1a0038a8:	bf1c      	itt	ne
1a0038aa:	fa22 f20c 	lsrne.w	r2, r2, ip
1a0038ae:	4313      	orrne	r3, r2
1a0038b0:	f04f 0c01 	mov.w	ip, #1
1a0038b4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
1a0038b8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
1a0038bc:	eba3 020c 	sub.w	r2, r3, ip
1a0038c0:	ea22 0203 	bic.w	r2, r2, r3
1a0038c4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
1a0038c8:	bf04      	itt	eq
1a0038ca:	f851 3b04 	ldreq.w	r3, [r1], #4
1a0038ce:	3004      	addeq	r0, #4
1a0038d0:	d0f4      	beq.n	1a0038bc <strlen+0x30>
1a0038d2:	f1c2 0100 	rsb	r1, r2, #0
1a0038d6:	ea02 0201 	and.w	r2, r2, r1
1a0038da:	fab2 f282 	clz	r2, r2
1a0038de:	f1c2 021f 	rsb	r2, r2, #31
1a0038e2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a0038e6:	4770      	bx	lr

1a0038e8 <_svfprintf_r>:
1a0038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0038ec:	b0bf      	sub	sp, #252	; 0xfc
1a0038ee:	4689      	mov	r9, r1
1a0038f0:	9206      	str	r2, [sp, #24]
1a0038f2:	930a      	str	r3, [sp, #40]	; 0x28
1a0038f4:	9004      	str	r0, [sp, #16]
1a0038f6:	f002 fa4b 	bl	1a005d90 <_localeconv_r>
1a0038fa:	6803      	ldr	r3, [r0, #0]
1a0038fc:	9313      	str	r3, [sp, #76]	; 0x4c
1a0038fe:	4618      	mov	r0, r3
1a003900:	f7ff ffc4 	bl	1a00388c <strlen>
1a003904:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003908:	9014      	str	r0, [sp, #80]	; 0x50
1a00390a:	061a      	lsls	r2, r3, #24
1a00390c:	d504      	bpl.n	1a003918 <_svfprintf_r+0x30>
1a00390e:	f8d9 3010 	ldr.w	r3, [r9, #16]
1a003912:	2b00      	cmp	r3, #0
1a003914:	f001 80a1 	beq.w	1a004a5a <_svfprintf_r+0x1172>
1a003918:	ed9f 7b99 	vldr	d7, [pc, #612]	; 1a003b80 <_svfprintf_r+0x298>
1a00391c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a003920:	2300      	movs	r3, #0
1a003922:	af2e      	add	r7, sp, #184	; 0xb8
1a003924:	930f      	str	r3, [sp, #60]	; 0x3c
1a003926:	9323      	str	r3, [sp, #140]	; 0x8c
1a003928:	9322      	str	r3, [sp, #136]	; 0x88
1a00392a:	9312      	str	r3, [sp, #72]	; 0x48
1a00392c:	9315      	str	r3, [sp, #84]	; 0x54
1a00392e:	9307      	str	r3, [sp, #28]
1a003930:	9721      	str	r7, [sp, #132]	; 0x84
1a003932:	463c      	mov	r4, r7
1a003934:	464e      	mov	r6, r9
1a003936:	9d06      	ldr	r5, [sp, #24]
1a003938:	782b      	ldrb	r3, [r5, #0]
1a00393a:	2b00      	cmp	r3, #0
1a00393c:	f000 80a9 	beq.w	1a003a92 <_svfprintf_r+0x1aa>
1a003940:	2b25      	cmp	r3, #37	; 0x25
1a003942:	d102      	bne.n	1a00394a <_svfprintf_r+0x62>
1a003944:	e0a5      	b.n	1a003a92 <_svfprintf_r+0x1aa>
1a003946:	2b25      	cmp	r3, #37	; 0x25
1a003948:	d003      	beq.n	1a003952 <_svfprintf_r+0x6a>
1a00394a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1a00394e:	2b00      	cmp	r3, #0
1a003950:	d1f9      	bne.n	1a003946 <_svfprintf_r+0x5e>
1a003952:	9b06      	ldr	r3, [sp, #24]
1a003954:	1aeb      	subs	r3, r5, r3
1a003956:	b173      	cbz	r3, 1a003976 <_svfprintf_r+0x8e>
1a003958:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a00395a:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a00395c:	9806      	ldr	r0, [sp, #24]
1a00395e:	6020      	str	r0, [r4, #0]
1a003960:	3201      	adds	r2, #1
1a003962:	4419      	add	r1, r3
1a003964:	2a07      	cmp	r2, #7
1a003966:	6063      	str	r3, [r4, #4]
1a003968:	9123      	str	r1, [sp, #140]	; 0x8c
1a00396a:	9222      	str	r2, [sp, #136]	; 0x88
1a00396c:	dc72      	bgt.n	1a003a54 <_svfprintf_r+0x16c>
1a00396e:	3408      	adds	r4, #8
1a003970:	9a07      	ldr	r2, [sp, #28]
1a003972:	441a      	add	r2, r3
1a003974:	9207      	str	r2, [sp, #28]
1a003976:	782b      	ldrb	r3, [r5, #0]
1a003978:	2b00      	cmp	r3, #0
1a00397a:	f000 87cb 	beq.w	1a004914 <_svfprintf_r+0x102c>
1a00397e:	2300      	movs	r3, #0
1a003980:	1c69      	adds	r1, r5, #1
1a003982:	786d      	ldrb	r5, [r5, #1]
1a003984:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a003988:	461a      	mov	r2, r3
1a00398a:	9308      	str	r3, [sp, #32]
1a00398c:	9303      	str	r3, [sp, #12]
1a00398e:	f04f 3aff 	mov.w	sl, #4294967295
1a003992:	1c4b      	adds	r3, r1, #1
1a003994:	f1a5 0120 	sub.w	r1, r5, #32
1a003998:	2958      	cmp	r1, #88	; 0x58
1a00399a:	f200 83e4 	bhi.w	1a004166 <_svfprintf_r+0x87e>
1a00399e:	e8df f011 	tbh	[pc, r1, lsl #1]
1a0039a2:	0277      	.short	0x0277
1a0039a4:	03e203e2 	.word	0x03e203e2
1a0039a8:	03e2037b 	.word	0x03e2037b
1a0039ac:	03e203e2 	.word	0x03e203e2
1a0039b0:	03e203e2 	.word	0x03e203e2
1a0039b4:	02f703e2 	.word	0x02f703e2
1a0039b8:	03e20214 	.word	0x03e20214
1a0039bc:	021801fb 	.word	0x021801fb
1a0039c0:	038203e2 	.word	0x038203e2
1a0039c4:	02c102c1 	.word	0x02c102c1
1a0039c8:	02c102c1 	.word	0x02c102c1
1a0039cc:	02c102c1 	.word	0x02c102c1
1a0039d0:	02c102c1 	.word	0x02c102c1
1a0039d4:	03e202c1 	.word	0x03e202c1
1a0039d8:	03e203e2 	.word	0x03e203e2
1a0039dc:	03e203e2 	.word	0x03e203e2
1a0039e0:	03e203e2 	.word	0x03e203e2
1a0039e4:	03e203e2 	.word	0x03e203e2
1a0039e8:	02d003e2 	.word	0x02d003e2
1a0039ec:	03e20391 	.word	0x03e20391
1a0039f0:	03e20391 	.word	0x03e20391
1a0039f4:	03e203e2 	.word	0x03e203e2
1a0039f8:	037403e2 	.word	0x037403e2
1a0039fc:	03e203e2 	.word	0x03e203e2
1a003a00:	03e2030c 	.word	0x03e2030c
1a003a04:	03e203e2 	.word	0x03e203e2
1a003a08:	03e203e2 	.word	0x03e203e2
1a003a0c:	03e2032a 	.word	0x03e2032a
1a003a10:	034403e2 	.word	0x034403e2
1a003a14:	03e203e2 	.word	0x03e203e2
1a003a18:	03e203e2 	.word	0x03e203e2
1a003a1c:	03e203e2 	.word	0x03e203e2
1a003a20:	03e203e2 	.word	0x03e203e2
1a003a24:	03e203e2 	.word	0x03e203e2
1a003a28:	0233035f 	.word	0x0233035f
1a003a2c:	03910391 	.word	0x03910391
1a003a30:	03050391 	.word	0x03050391
1a003a34:	03e20233 	.word	0x03e20233
1a003a38:	02ed03e2 	.word	0x02ed03e2
1a003a3c:	028503e2 	.word	0x028503e2
1a003a40:	03cb0202 	.word	0x03cb0202
1a003a44:	03e2027e 	.word	0x03e2027e
1a003a48:	03e20299 	.word	0x03e20299
1a003a4c:	03e2007a 	.word	0x03e2007a
1a003a50:	025103e2 	.word	0x025103e2
1a003a54:	9804      	ldr	r0, [sp, #16]
1a003a56:	9303      	str	r3, [sp, #12]
1a003a58:	4631      	mov	r1, r6
1a003a5a:	aa21      	add	r2, sp, #132	; 0x84
1a003a5c:	f002 ffa0 	bl	1a0069a0 <__ssprint_r>
1a003a60:	b950      	cbnz	r0, 1a003a78 <_svfprintf_r+0x190>
1a003a62:	463c      	mov	r4, r7
1a003a64:	9b03      	ldr	r3, [sp, #12]
1a003a66:	e783      	b.n	1a003970 <_svfprintf_r+0x88>
1a003a68:	9804      	ldr	r0, [sp, #16]
1a003a6a:	4631      	mov	r1, r6
1a003a6c:	aa21      	add	r2, sp, #132	; 0x84
1a003a6e:	f002 ff97 	bl	1a0069a0 <__ssprint_r>
1a003a72:	2800      	cmp	r0, #0
1a003a74:	f000 818c 	beq.w	1a003d90 <_svfprintf_r+0x4a8>
1a003a78:	46b1      	mov	r9, r6
1a003a7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003a7e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003a82:	9b07      	ldr	r3, [sp, #28]
1a003a84:	bf18      	it	ne
1a003a86:	f04f 33ff 	movne.w	r3, #4294967295
1a003a8a:	4618      	mov	r0, r3
1a003a8c:	b03f      	add	sp, #252	; 0xfc
1a003a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003a92:	9d06      	ldr	r5, [sp, #24]
1a003a94:	e76f      	b.n	1a003976 <_svfprintf_r+0x8e>
1a003a96:	9306      	str	r3, [sp, #24]
1a003a98:	9b03      	ldr	r3, [sp, #12]
1a003a9a:	0698      	lsls	r0, r3, #26
1a003a9c:	f140 82b4 	bpl.w	1a004008 <_svfprintf_r+0x720>
1a003aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003aa2:	f103 0907 	add.w	r9, r3, #7
1a003aa6:	f029 0307 	bic.w	r3, r9, #7
1a003aaa:	f103 0208 	add.w	r2, r3, #8
1a003aae:	e9d3 8900 	ldrd	r8, r9, [r3]
1a003ab2:	920a      	str	r2, [sp, #40]	; 0x28
1a003ab4:	2301      	movs	r3, #1
1a003ab6:	f04f 0c00 	mov.w	ip, #0
1a003aba:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a003abe:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a003ac2:	f1ba 0f00 	cmp.w	sl, #0
1a003ac6:	db03      	blt.n	1a003ad0 <_svfprintf_r+0x1e8>
1a003ac8:	9a03      	ldr	r2, [sp, #12]
1a003aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a003ace:	9203      	str	r2, [sp, #12]
1a003ad0:	ea58 0209 	orrs.w	r2, r8, r9
1a003ad4:	f040 8357 	bne.w	1a004186 <_svfprintf_r+0x89e>
1a003ad8:	f1ba 0f00 	cmp.w	sl, #0
1a003adc:	f000 845c 	beq.w	1a004398 <_svfprintf_r+0xab0>
1a003ae0:	2b01      	cmp	r3, #1
1a003ae2:	f000 835a 	beq.w	1a00419a <_svfprintf_r+0x8b2>
1a003ae6:	2b02      	cmp	r3, #2
1a003ae8:	f000 849a 	beq.w	1a004420 <_svfprintf_r+0xb38>
1a003aec:	4639      	mov	r1, r7
1a003aee:	ea4f 02d8 	mov.w	r2, r8, lsr #3
1a003af2:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
1a003af6:	ea4f 00d9 	mov.w	r0, r9, lsr #3
1a003afa:	f008 0307 	and.w	r3, r8, #7
1a003afe:	4681      	mov	r9, r0
1a003b00:	4690      	mov	r8, r2
1a003b02:	3330      	adds	r3, #48	; 0x30
1a003b04:	ea58 0209 	orrs.w	r2, r8, r9
1a003b08:	f801 3d01 	strb.w	r3, [r1, #-1]!
1a003b0c:	d1ef      	bne.n	1a003aee <_svfprintf_r+0x206>
1a003b0e:	9a03      	ldr	r2, [sp, #12]
1a003b10:	910c      	str	r1, [sp, #48]	; 0x30
1a003b12:	07d2      	lsls	r2, r2, #31
1a003b14:	f100 856e 	bmi.w	1a0045f4 <_svfprintf_r+0xd0c>
1a003b18:	1a7b      	subs	r3, r7, r1
1a003b1a:	9309      	str	r3, [sp, #36]	; 0x24
1a003b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003b1e:	4592      	cmp	sl, r2
1a003b20:	4653      	mov	r3, sl
1a003b22:	bfb8      	it	lt
1a003b24:	4613      	movlt	r3, r2
1a003b26:	9305      	str	r3, [sp, #20]
1a003b28:	2300      	movs	r3, #0
1a003b2a:	930e      	str	r3, [sp, #56]	; 0x38
1a003b2c:	f1bc 0f00 	cmp.w	ip, #0
1a003b30:	d002      	beq.n	1a003b38 <_svfprintf_r+0x250>
1a003b32:	9b05      	ldr	r3, [sp, #20]
1a003b34:	3301      	adds	r3, #1
1a003b36:	9305      	str	r3, [sp, #20]
1a003b38:	9b03      	ldr	r3, [sp, #12]
1a003b3a:	f013 0302 	ands.w	r3, r3, #2
1a003b3e:	930b      	str	r3, [sp, #44]	; 0x2c
1a003b40:	d002      	beq.n	1a003b48 <_svfprintf_r+0x260>
1a003b42:	9b05      	ldr	r3, [sp, #20]
1a003b44:	3302      	adds	r3, #2
1a003b46:	9305      	str	r3, [sp, #20]
1a003b48:	9b03      	ldr	r3, [sp, #12]
1a003b4a:	f013 0984 	ands.w	r9, r3, #132	; 0x84
1a003b4e:	f040 8317 	bne.w	1a004180 <_svfprintf_r+0x898>
1a003b52:	9b08      	ldr	r3, [sp, #32]
1a003b54:	9a05      	ldr	r2, [sp, #20]
1a003b56:	ebc2 0803 	rsb	r8, r2, r3
1a003b5a:	f1b8 0f00 	cmp.w	r8, #0
1a003b5e:	f340 830f 	ble.w	1a004180 <_svfprintf_r+0x898>
1a003b62:	f1b8 0f10 	cmp.w	r8, #16
1a003b66:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a003b68:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003b6a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 1a003b88 <_svfprintf_r+0x2a0>
1a003b6e:	dd30      	ble.n	1a003bd2 <_svfprintf_r+0x2ea>
1a003b70:	4653      	mov	r3, sl
1a003b72:	f04f 0b10 	mov.w	fp, #16
1a003b76:	46c2      	mov	sl, r8
1a003b78:	46a8      	mov	r8, r5
1a003b7a:	461d      	mov	r5, r3
1a003b7c:	e00d      	b.n	1a003b9a <_svfprintf_r+0x2b2>
1a003b7e:	bf00      	nop
	...
1a003b88:	1a007990 	.word	0x1a007990
1a003b8c:	f1aa 0a10 	sub.w	sl, sl, #16
1a003b90:	f1ba 0f10 	cmp.w	sl, #16
1a003b94:	f104 0408 	add.w	r4, r4, #8
1a003b98:	dd17      	ble.n	1a003bca <_svfprintf_r+0x2e2>
1a003b9a:	3201      	adds	r2, #1
1a003b9c:	3110      	adds	r1, #16
1a003b9e:	2a07      	cmp	r2, #7
1a003ba0:	9123      	str	r1, [sp, #140]	; 0x8c
1a003ba2:	9222      	str	r2, [sp, #136]	; 0x88
1a003ba4:	e884 0820 	stmia.w	r4, {r5, fp}
1a003ba8:	ddf0      	ble.n	1a003b8c <_svfprintf_r+0x2a4>
1a003baa:	9804      	ldr	r0, [sp, #16]
1a003bac:	4631      	mov	r1, r6
1a003bae:	aa21      	add	r2, sp, #132	; 0x84
1a003bb0:	f002 fef6 	bl	1a0069a0 <__ssprint_r>
1a003bb4:	2800      	cmp	r0, #0
1a003bb6:	f47f af5f 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a003bba:	f1aa 0a10 	sub.w	sl, sl, #16
1a003bbe:	f1ba 0f10 	cmp.w	sl, #16
1a003bc2:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a003bc4:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003bc6:	463c      	mov	r4, r7
1a003bc8:	dce7      	bgt.n	1a003b9a <_svfprintf_r+0x2b2>
1a003bca:	462b      	mov	r3, r5
1a003bcc:	4645      	mov	r5, r8
1a003bce:	46d0      	mov	r8, sl
1a003bd0:	469a      	mov	sl, r3
1a003bd2:	3201      	adds	r2, #1
1a003bd4:	eb08 0b01 	add.w	fp, r8, r1
1a003bd8:	2a07      	cmp	r2, #7
1a003bda:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003bde:	9222      	str	r2, [sp, #136]	; 0x88
1a003be0:	f8c4 a000 	str.w	sl, [r4]
1a003be4:	f8c4 8004 	str.w	r8, [r4, #4]
1a003be8:	f300 847e 	bgt.w	1a0044e8 <_svfprintf_r+0xc00>
1a003bec:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a003bf0:	3408      	adds	r4, #8
1a003bf2:	f1bc 0f00 	cmp.w	ip, #0
1a003bf6:	d00f      	beq.n	1a003c18 <_svfprintf_r+0x330>
1a003bf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003bfa:	3301      	adds	r3, #1
1a003bfc:	f10b 0b01 	add.w	fp, fp, #1
1a003c00:	f10d 0167 	add.w	r1, sp, #103	; 0x67
1a003c04:	2201      	movs	r2, #1
1a003c06:	2b07      	cmp	r3, #7
1a003c08:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003c0c:	9322      	str	r3, [sp, #136]	; 0x88
1a003c0e:	e884 0006 	stmia.w	r4, {r1, r2}
1a003c12:	f300 83ea 	bgt.w	1a0043ea <_svfprintf_r+0xb02>
1a003c16:	3408      	adds	r4, #8
1a003c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003c1a:	b173      	cbz	r3, 1a003c3a <_svfprintf_r+0x352>
1a003c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003c1e:	3301      	adds	r3, #1
1a003c20:	f10b 0b02 	add.w	fp, fp, #2
1a003c24:	a91a      	add	r1, sp, #104	; 0x68
1a003c26:	2202      	movs	r2, #2
1a003c28:	2b07      	cmp	r3, #7
1a003c2a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003c2e:	9322      	str	r3, [sp, #136]	; 0x88
1a003c30:	e884 0006 	stmia.w	r4, {r1, r2}
1a003c34:	f300 83cd 	bgt.w	1a0043d2 <_svfprintf_r+0xaea>
1a003c38:	3408      	adds	r4, #8
1a003c3a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
1a003c3e:	f000 8315 	beq.w	1a00426c <_svfprintf_r+0x984>
1a003c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003c46:	ebc2 0a03 	rsb	sl, r2, r3
1a003c4a:	f1ba 0f00 	cmp.w	sl, #0
1a003c4e:	dd3c      	ble.n	1a003cca <_svfprintf_r+0x3e2>
1a003c50:	f1ba 0f10 	cmp.w	sl, #16
1a003c54:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003c56:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 1a0040bc <_svfprintf_r+0x7d4>
1a003c5a:	dd2b      	ble.n	1a003cb4 <_svfprintf_r+0x3cc>
1a003c5c:	4649      	mov	r1, r9
1a003c5e:	465b      	mov	r3, fp
1a003c60:	46a9      	mov	r9, r5
1a003c62:	f04f 0810 	mov.w	r8, #16
1a003c66:	f8dd b010 	ldr.w	fp, [sp, #16]
1a003c6a:	460d      	mov	r5, r1
1a003c6c:	e006      	b.n	1a003c7c <_svfprintf_r+0x394>
1a003c6e:	f1aa 0a10 	sub.w	sl, sl, #16
1a003c72:	f1ba 0f10 	cmp.w	sl, #16
1a003c76:	f104 0408 	add.w	r4, r4, #8
1a003c7a:	dd17      	ble.n	1a003cac <_svfprintf_r+0x3c4>
1a003c7c:	3201      	adds	r2, #1
1a003c7e:	3310      	adds	r3, #16
1a003c80:	2a07      	cmp	r2, #7
1a003c82:	9323      	str	r3, [sp, #140]	; 0x8c
1a003c84:	9222      	str	r2, [sp, #136]	; 0x88
1a003c86:	e884 0120 	stmia.w	r4, {r5, r8}
1a003c8a:	ddf0      	ble.n	1a003c6e <_svfprintf_r+0x386>
1a003c8c:	4658      	mov	r0, fp
1a003c8e:	4631      	mov	r1, r6
1a003c90:	aa21      	add	r2, sp, #132	; 0x84
1a003c92:	f002 fe85 	bl	1a0069a0 <__ssprint_r>
1a003c96:	2800      	cmp	r0, #0
1a003c98:	f47f aeee 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a003c9c:	f1aa 0a10 	sub.w	sl, sl, #16
1a003ca0:	f1ba 0f10 	cmp.w	sl, #16
1a003ca4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a003ca6:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a003ca8:	463c      	mov	r4, r7
1a003caa:	dce7      	bgt.n	1a003c7c <_svfprintf_r+0x394>
1a003cac:	469b      	mov	fp, r3
1a003cae:	462b      	mov	r3, r5
1a003cb0:	464d      	mov	r5, r9
1a003cb2:	4699      	mov	r9, r3
1a003cb4:	3201      	adds	r2, #1
1a003cb6:	44d3      	add	fp, sl
1a003cb8:	2a07      	cmp	r2, #7
1a003cba:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003cbe:	9222      	str	r2, [sp, #136]	; 0x88
1a003cc0:	e884 0600 	stmia.w	r4, {r9, sl}
1a003cc4:	f300 8379 	bgt.w	1a0043ba <_svfprintf_r+0xad2>
1a003cc8:	3408      	adds	r4, #8
1a003cca:	9b03      	ldr	r3, [sp, #12]
1a003ccc:	05d9      	lsls	r1, r3, #23
1a003cce:	f100 8270 	bmi.w	1a0041b2 <_svfprintf_r+0x8ca>
1a003cd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
1a003cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a003cd8:	6022      	str	r2, [r4, #0]
1a003cda:	3301      	adds	r3, #1
1a003cdc:	448b      	add	fp, r1
1a003cde:	2b07      	cmp	r3, #7
1a003ce0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003ce4:	6061      	str	r1, [r4, #4]
1a003ce6:	9322      	str	r3, [sp, #136]	; 0x88
1a003ce8:	f300 834a 	bgt.w	1a004380 <_svfprintf_r+0xa98>
1a003cec:	3408      	adds	r4, #8
1a003cee:	9b03      	ldr	r3, [sp, #12]
1a003cf0:	075a      	lsls	r2, r3, #29
1a003cf2:	d541      	bpl.n	1a003d78 <_svfprintf_r+0x490>
1a003cf4:	9b08      	ldr	r3, [sp, #32]
1a003cf6:	9a05      	ldr	r2, [sp, #20]
1a003cf8:	1a9d      	subs	r5, r3, r2
1a003cfa:	2d00      	cmp	r5, #0
1a003cfc:	dd3c      	ble.n	1a003d78 <_svfprintf_r+0x490>
1a003cfe:	2d10      	cmp	r5, #16
1a003d00:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003d02:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 1a0040c0 <_svfprintf_r+0x7d8>
1a003d06:	dd23      	ble.n	1a003d50 <_svfprintf_r+0x468>
1a003d08:	f04f 0810 	mov.w	r8, #16
1a003d0c:	465a      	mov	r2, fp
1a003d0e:	f8dd 9010 	ldr.w	r9, [sp, #16]
1a003d12:	e004      	b.n	1a003d1e <_svfprintf_r+0x436>
1a003d14:	3d10      	subs	r5, #16
1a003d16:	2d10      	cmp	r5, #16
1a003d18:	f104 0408 	add.w	r4, r4, #8
1a003d1c:	dd17      	ble.n	1a003d4e <_svfprintf_r+0x466>
1a003d1e:	3301      	adds	r3, #1
1a003d20:	3210      	adds	r2, #16
1a003d22:	2b07      	cmp	r3, #7
1a003d24:	9223      	str	r2, [sp, #140]	; 0x8c
1a003d26:	9322      	str	r3, [sp, #136]	; 0x88
1a003d28:	f8c4 a000 	str.w	sl, [r4]
1a003d2c:	f8c4 8004 	str.w	r8, [r4, #4]
1a003d30:	ddf0      	ble.n	1a003d14 <_svfprintf_r+0x42c>
1a003d32:	4648      	mov	r0, r9
1a003d34:	4631      	mov	r1, r6
1a003d36:	aa21      	add	r2, sp, #132	; 0x84
1a003d38:	f002 fe32 	bl	1a0069a0 <__ssprint_r>
1a003d3c:	2800      	cmp	r0, #0
1a003d3e:	f47f ae9b 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a003d42:	3d10      	subs	r5, #16
1a003d44:	2d10      	cmp	r5, #16
1a003d46:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a003d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a003d4a:	463c      	mov	r4, r7
1a003d4c:	dce7      	bgt.n	1a003d1e <_svfprintf_r+0x436>
1a003d4e:	4693      	mov	fp, r2
1a003d50:	3301      	adds	r3, #1
1a003d52:	44ab      	add	fp, r5
1a003d54:	2b07      	cmp	r3, #7
1a003d56:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a003d5a:	9322      	str	r3, [sp, #136]	; 0x88
1a003d5c:	f8c4 a000 	str.w	sl, [r4]
1a003d60:	6065      	str	r5, [r4, #4]
1a003d62:	dd09      	ble.n	1a003d78 <_svfprintf_r+0x490>
1a003d64:	9804      	ldr	r0, [sp, #16]
1a003d66:	4631      	mov	r1, r6
1a003d68:	aa21      	add	r2, sp, #132	; 0x84
1a003d6a:	f002 fe19 	bl	1a0069a0 <__ssprint_r>
1a003d6e:	2800      	cmp	r0, #0
1a003d70:	f47f ae82 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a003d74:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a003d78:	9b07      	ldr	r3, [sp, #28]
1a003d7a:	9a05      	ldr	r2, [sp, #20]
1a003d7c:	9908      	ldr	r1, [sp, #32]
1a003d7e:	428a      	cmp	r2, r1
1a003d80:	bfac      	ite	ge
1a003d82:	189b      	addge	r3, r3, r2
1a003d84:	185b      	addlt	r3, r3, r1
1a003d86:	9307      	str	r3, [sp, #28]
1a003d88:	f1bb 0f00 	cmp.w	fp, #0
1a003d8c:	f47f ae6c 	bne.w	1a003a68 <_svfprintf_r+0x180>
1a003d90:	2300      	movs	r3, #0
1a003d92:	9322      	str	r3, [sp, #136]	; 0x88
1a003d94:	463c      	mov	r4, r7
1a003d96:	e5ce      	b.n	1a003936 <_svfprintf_r+0x4e>
1a003d98:	4619      	mov	r1, r3
1a003d9a:	9803      	ldr	r0, [sp, #12]
1a003d9c:	781d      	ldrb	r5, [r3, #0]
1a003d9e:	f040 0004 	orr.w	r0, r0, #4
1a003da2:	9003      	str	r0, [sp, #12]
1a003da4:	e5f5      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003da6:	9306      	str	r3, [sp, #24]
1a003da8:	9b03      	ldr	r3, [sp, #12]
1a003daa:	f013 0320 	ands.w	r3, r3, #32
1a003dae:	f000 810e 	beq.w	1a003fce <_svfprintf_r+0x6e6>
1a003db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003db4:	f103 0907 	add.w	r9, r3, #7
1a003db8:	f029 0307 	bic.w	r3, r9, #7
1a003dbc:	f103 0208 	add.w	r2, r3, #8
1a003dc0:	e9d3 8900 	ldrd	r8, r9, [r3]
1a003dc4:	920a      	str	r2, [sp, #40]	; 0x28
1a003dc6:	2300      	movs	r3, #0
1a003dc8:	e675      	b.n	1a003ab6 <_svfprintf_r+0x1ce>
1a003dca:	781d      	ldrb	r5, [r3, #0]
1a003dcc:	4619      	mov	r1, r3
1a003dce:	222b      	movs	r2, #43	; 0x2b
1a003dd0:	e5df      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003dd2:	781d      	ldrb	r5, [r3, #0]
1a003dd4:	2d2a      	cmp	r5, #42	; 0x2a
1a003dd6:	f103 0101 	add.w	r1, r3, #1
1a003dda:	f000 87b8 	beq.w	1a004d4e <_svfprintf_r+0x1466>
1a003dde:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a003de2:	2809      	cmp	r0, #9
1a003de4:	460b      	mov	r3, r1
1a003de6:	f04f 0a00 	mov.w	sl, #0
1a003dea:	f63f add3 	bhi.w	1a003994 <_svfprintf_r+0xac>
1a003dee:	f813 5b01 	ldrb.w	r5, [r3], #1
1a003df2:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
1a003df6:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
1a003dfa:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a003dfe:	2809      	cmp	r0, #9
1a003e00:	d9f5      	bls.n	1a003dee <_svfprintf_r+0x506>
1a003e02:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
1a003e06:	e5c5      	b.n	1a003994 <_svfprintf_r+0xac>
1a003e08:	9306      	str	r3, [sp, #24]
1a003e0a:	9b03      	ldr	r3, [sp, #12]
1a003e0c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a003e10:	069b      	lsls	r3, r3, #26
1a003e12:	f140 80a1 	bpl.w	1a003f58 <_svfprintf_r+0x670>
1a003e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003e18:	f103 0907 	add.w	r9, r3, #7
1a003e1c:	f029 0907 	bic.w	r9, r9, #7
1a003e20:	e9d9 2300 	ldrd	r2, r3, [r9]
1a003e24:	f109 0108 	add.w	r1, r9, #8
1a003e28:	910a      	str	r1, [sp, #40]	; 0x28
1a003e2a:	4690      	mov	r8, r2
1a003e2c:	4699      	mov	r9, r3
1a003e2e:	2a00      	cmp	r2, #0
1a003e30:	f173 0300 	sbcs.w	r3, r3, #0
1a003e34:	f2c0 840e 	blt.w	1a004654 <_svfprintf_r+0xd6c>
1a003e38:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a003e3c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a003e40:	2301      	movs	r3, #1
1a003e42:	e63e      	b.n	1a003ac2 <_svfprintf_r+0x1da>
1a003e44:	9306      	str	r3, [sp, #24]
1a003e46:	4b9b      	ldr	r3, [pc, #620]	; (1a0040b4 <_svfprintf_r+0x7cc>)
1a003e48:	9312      	str	r3, [sp, #72]	; 0x48
1a003e4a:	9b03      	ldr	r3, [sp, #12]
1a003e4c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a003e50:	069b      	lsls	r3, r3, #26
1a003e52:	f140 80f3 	bpl.w	1a00403c <_svfprintf_r+0x754>
1a003e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003e58:	f103 0907 	add.w	r9, r3, #7
1a003e5c:	f029 0307 	bic.w	r3, r9, #7
1a003e60:	e9d3 8900 	ldrd	r8, r9, [r3]
1a003e64:	f103 0208 	add.w	r2, r3, #8
1a003e68:	920a      	str	r2, [sp, #40]	; 0x28
1a003e6a:	9b03      	ldr	r3, [sp, #12]
1a003e6c:	07d9      	lsls	r1, r3, #31
1a003e6e:	f140 80f5 	bpl.w	1a00405c <_svfprintf_r+0x774>
1a003e72:	ea58 0309 	orrs.w	r3, r8, r9
1a003e76:	f000 80f1 	beq.w	1a00405c <_svfprintf_r+0x774>
1a003e7a:	9a03      	ldr	r2, [sp, #12]
1a003e7c:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
1a003e80:	2330      	movs	r3, #48	; 0x30
1a003e82:	f042 0202 	orr.w	r2, r2, #2
1a003e86:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
1a003e8a:	9203      	str	r2, [sp, #12]
1a003e8c:	2302      	movs	r3, #2
1a003e8e:	e612      	b.n	1a003ab6 <_svfprintf_r+0x1ce>
1a003e90:	781d      	ldrb	r5, [r3, #0]
1a003e92:	4619      	mov	r1, r3
1a003e94:	2a00      	cmp	r2, #0
1a003e96:	f47f ad7c 	bne.w	1a003992 <_svfprintf_r+0xaa>
1a003e9a:	2220      	movs	r2, #32
1a003e9c:	e579      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003e9e:	9903      	ldr	r1, [sp, #12]
1a003ea0:	f041 0120 	orr.w	r1, r1, #32
1a003ea4:	9103      	str	r1, [sp, #12]
1a003ea6:	781d      	ldrb	r5, [r3, #0]
1a003ea8:	4619      	mov	r1, r3
1a003eaa:	e572      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003eac:	9306      	str	r3, [sp, #24]
1a003eae:	9b03      	ldr	r3, [sp, #12]
1a003eb0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a003eb4:	069a      	lsls	r2, r3, #26
1a003eb6:	f140 84b0 	bpl.w	1a00481a <_svfprintf_r+0xf32>
1a003eba:	9907      	ldr	r1, [sp, #28]
1a003ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003ebe:	ea4f 79e1 	mov.w	r9, r1, asr #31
1a003ec2:	6813      	ldr	r3, [r2, #0]
1a003ec4:	4608      	mov	r0, r1
1a003ec6:	4688      	mov	r8, r1
1a003ec8:	3204      	adds	r2, #4
1a003eca:	4649      	mov	r1, r9
1a003ecc:	920a      	str	r2, [sp, #40]	; 0x28
1a003ece:	e9c3 0100 	strd	r0, r1, [r3]
1a003ed2:	e530      	b.n	1a003936 <_svfprintf_r+0x4e>
1a003ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003ed6:	9306      	str	r3, [sp, #24]
1a003ed8:	6813      	ldr	r3, [r2, #0]
1a003eda:	930c      	str	r3, [sp, #48]	; 0x30
1a003edc:	f04f 0b00 	mov.w	fp, #0
1a003ee0:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
1a003ee4:	f102 0904 	add.w	r9, r2, #4
1a003ee8:	2b00      	cmp	r3, #0
1a003eea:	f000 8646 	beq.w	1a004b7a <_svfprintf_r+0x1292>
1a003eee:	f1ba 0f00 	cmp.w	sl, #0
1a003ef2:	980c      	ldr	r0, [sp, #48]	; 0x30
1a003ef4:	f2c0 85f6 	blt.w	1a004ae4 <_svfprintf_r+0x11fc>
1a003ef8:	4659      	mov	r1, fp
1a003efa:	4652      	mov	r2, sl
1a003efc:	f002 f9de 	bl	1a0062bc <memchr>
1a003f00:	2800      	cmp	r0, #0
1a003f02:	f000 8677 	beq.w	1a004bf4 <_svfprintf_r+0x130c>
1a003f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003f08:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
1a003f0c:	1ac3      	subs	r3, r0, r3
1a003f0e:	9309      	str	r3, [sp, #36]	; 0x24
1a003f10:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a003f14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003f18:	9305      	str	r3, [sp, #20]
1a003f1a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
1a003f1e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a003f22:	e603      	b.n	1a003b2c <_svfprintf_r+0x244>
1a003f24:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a003f28:	2100      	movs	r1, #0
1a003f2a:	f813 5b01 	ldrb.w	r5, [r3], #1
1a003f2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a003f32:	eb00 0141 	add.w	r1, r0, r1, lsl #1
1a003f36:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a003f3a:	2809      	cmp	r0, #9
1a003f3c:	d9f5      	bls.n	1a003f2a <_svfprintf_r+0x642>
1a003f3e:	9108      	str	r1, [sp, #32]
1a003f40:	e528      	b.n	1a003994 <_svfprintf_r+0xac>
1a003f42:	9306      	str	r3, [sp, #24]
1a003f44:	9b03      	ldr	r3, [sp, #12]
1a003f46:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a003f4a:	f043 0310 	orr.w	r3, r3, #16
1a003f4e:	9303      	str	r3, [sp, #12]
1a003f50:	9b03      	ldr	r3, [sp, #12]
1a003f52:	069b      	lsls	r3, r3, #26
1a003f54:	f53f af5f 	bmi.w	1a003e16 <_svfprintf_r+0x52e>
1a003f58:	9b03      	ldr	r3, [sp, #12]
1a003f5a:	06d8      	lsls	r0, r3, #27
1a003f5c:	f100 836b 	bmi.w	1a004636 <_svfprintf_r+0xd4e>
1a003f60:	9b03      	ldr	r3, [sp, #12]
1a003f62:	0659      	lsls	r1, r3, #25
1a003f64:	f140 8367 	bpl.w	1a004636 <_svfprintf_r+0xd4e>
1a003f68:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003f6a:	f9b1 8000 	ldrsh.w	r8, [r1]
1a003f6e:	3104      	adds	r1, #4
1a003f70:	ea4f 79e8 	mov.w	r9, r8, asr #31
1a003f74:	4642      	mov	r2, r8
1a003f76:	464b      	mov	r3, r9
1a003f78:	910a      	str	r1, [sp, #40]	; 0x28
1a003f7a:	e758      	b.n	1a003e2e <_svfprintf_r+0x546>
1a003f7c:	781d      	ldrb	r5, [r3, #0]
1a003f7e:	9903      	ldr	r1, [sp, #12]
1a003f80:	2d6c      	cmp	r5, #108	; 0x6c
1a003f82:	f000 84d3 	beq.w	1a00492c <_svfprintf_r+0x1044>
1a003f86:	f041 0110 	orr.w	r1, r1, #16
1a003f8a:	9103      	str	r1, [sp, #12]
1a003f8c:	4619      	mov	r1, r3
1a003f8e:	e500      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003f90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a003f92:	6829      	ldr	r1, [r5, #0]
1a003f94:	9108      	str	r1, [sp, #32]
1a003f96:	4608      	mov	r0, r1
1a003f98:	2800      	cmp	r0, #0
1a003f9a:	4629      	mov	r1, r5
1a003f9c:	f101 0104 	add.w	r1, r1, #4
1a003fa0:	f2c0 84cb 	blt.w	1a00493a <_svfprintf_r+0x1052>
1a003fa4:	910a      	str	r1, [sp, #40]	; 0x28
1a003fa6:	781d      	ldrb	r5, [r3, #0]
1a003fa8:	4619      	mov	r1, r3
1a003faa:	e4f2      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003fac:	9903      	ldr	r1, [sp, #12]
1a003fae:	f041 0140 	orr.w	r1, r1, #64	; 0x40
1a003fb2:	9103      	str	r1, [sp, #12]
1a003fb4:	781d      	ldrb	r5, [r3, #0]
1a003fb6:	4619      	mov	r1, r3
1a003fb8:	e4eb      	b.n	1a003992 <_svfprintf_r+0xaa>
1a003fba:	9306      	str	r3, [sp, #24]
1a003fbc:	9b03      	ldr	r3, [sp, #12]
1a003fbe:	f043 0310 	orr.w	r3, r3, #16
1a003fc2:	9303      	str	r3, [sp, #12]
1a003fc4:	9b03      	ldr	r3, [sp, #12]
1a003fc6:	f013 0320 	ands.w	r3, r3, #32
1a003fca:	f47f aef2 	bne.w	1a003db2 <_svfprintf_r+0x4ca>
1a003fce:	9a03      	ldr	r2, [sp, #12]
1a003fd0:	f012 0210 	ands.w	r2, r2, #16
1a003fd4:	f040 831c 	bne.w	1a004610 <_svfprintf_r+0xd28>
1a003fd8:	9b03      	ldr	r3, [sp, #12]
1a003fda:	f013 0340 	ands.w	r3, r3, #64	; 0x40
1a003fde:	f000 8317 	beq.w	1a004610 <_svfprintf_r+0xd28>
1a003fe2:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003fe4:	4613      	mov	r3, r2
1a003fe6:	460a      	mov	r2, r1
1a003fe8:	3204      	adds	r2, #4
1a003fea:	f8b1 8000 	ldrh.w	r8, [r1]
1a003fee:	920a      	str	r2, [sp, #40]	; 0x28
1a003ff0:	f04f 0900 	mov.w	r9, #0
1a003ff4:	e55f      	b.n	1a003ab6 <_svfprintf_r+0x1ce>
1a003ff6:	9306      	str	r3, [sp, #24]
1a003ff8:	9b03      	ldr	r3, [sp, #12]
1a003ffa:	f043 0310 	orr.w	r3, r3, #16
1a003ffe:	9303      	str	r3, [sp, #12]
1a004000:	9b03      	ldr	r3, [sp, #12]
1a004002:	0698      	lsls	r0, r3, #26
1a004004:	f53f ad4c 	bmi.w	1a003aa0 <_svfprintf_r+0x1b8>
1a004008:	9b03      	ldr	r3, [sp, #12]
1a00400a:	06d9      	lsls	r1, r3, #27
1a00400c:	f100 8309 	bmi.w	1a004622 <_svfprintf_r+0xd3a>
1a004010:	9b03      	ldr	r3, [sp, #12]
1a004012:	065a      	lsls	r2, r3, #25
1a004014:	f140 8305 	bpl.w	1a004622 <_svfprintf_r+0xd3a>
1a004018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00401a:	f8b2 8000 	ldrh.w	r8, [r2]
1a00401e:	3204      	adds	r2, #4
1a004020:	f04f 0900 	mov.w	r9, #0
1a004024:	2301      	movs	r3, #1
1a004026:	920a      	str	r2, [sp, #40]	; 0x28
1a004028:	e545      	b.n	1a003ab6 <_svfprintf_r+0x1ce>
1a00402a:	9306      	str	r3, [sp, #24]
1a00402c:	4b22      	ldr	r3, [pc, #136]	; (1a0040b8 <_svfprintf_r+0x7d0>)
1a00402e:	9312      	str	r3, [sp, #72]	; 0x48
1a004030:	9b03      	ldr	r3, [sp, #12]
1a004032:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a004036:	069b      	lsls	r3, r3, #26
1a004038:	f53f af0d 	bmi.w	1a003e56 <_svfprintf_r+0x56e>
1a00403c:	9b03      	ldr	r3, [sp, #12]
1a00403e:	06d8      	lsls	r0, r3, #27
1a004040:	f140 83dc 	bpl.w	1a0047fc <_svfprintf_r+0xf14>
1a004044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004046:	4613      	mov	r3, r2
1a004048:	681b      	ldr	r3, [r3, #0]
1a00404a:	4698      	mov	r8, r3
1a00404c:	9b03      	ldr	r3, [sp, #12]
1a00404e:	3204      	adds	r2, #4
1a004050:	07d9      	lsls	r1, r3, #31
1a004052:	920a      	str	r2, [sp, #40]	; 0x28
1a004054:	f04f 0900 	mov.w	r9, #0
1a004058:	f53f af0b 	bmi.w	1a003e72 <_svfprintf_r+0x58a>
1a00405c:	2302      	movs	r3, #2
1a00405e:	e52a      	b.n	1a003ab6 <_svfprintf_r+0x1ce>
1a004060:	990a      	ldr	r1, [sp, #40]	; 0x28
1a004062:	9306      	str	r3, [sp, #24]
1a004064:	680a      	ldr	r2, [r1, #0]
1a004066:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
1a00406a:	2300      	movs	r3, #0
1a00406c:	2201      	movs	r2, #1
1a00406e:	3104      	adds	r1, #4
1a004070:	469c      	mov	ip, r3
1a004072:	9205      	str	r2, [sp, #20]
1a004074:	910a      	str	r1, [sp, #40]	; 0x28
1a004076:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
1a00407a:	ab24      	add	r3, sp, #144	; 0x90
1a00407c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
1a004080:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
1a004084:	9209      	str	r2, [sp, #36]	; 0x24
1a004086:	930c      	str	r3, [sp, #48]	; 0x30
1a004088:	e556      	b.n	1a003b38 <_svfprintf_r+0x250>
1a00408a:	9903      	ldr	r1, [sp, #12]
1a00408c:	f041 0108 	orr.w	r1, r1, #8
1a004090:	9103      	str	r1, [sp, #12]
1a004092:	781d      	ldrb	r5, [r3, #0]
1a004094:	4619      	mov	r1, r3
1a004096:	e47c      	b.n	1a003992 <_svfprintf_r+0xaa>
1a004098:	9903      	ldr	r1, [sp, #12]
1a00409a:	f041 0101 	orr.w	r1, r1, #1
1a00409e:	9103      	str	r1, [sp, #12]
1a0040a0:	781d      	ldrb	r5, [r3, #0]
1a0040a2:	4619      	mov	r1, r3
1a0040a4:	e475      	b.n	1a003992 <_svfprintf_r+0xaa>
1a0040a6:	9903      	ldr	r1, [sp, #12]
1a0040a8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
1a0040ac:	9103      	str	r1, [sp, #12]
1a0040ae:	781d      	ldrb	r5, [r3, #0]
1a0040b0:	4619      	mov	r1, r3
1a0040b2:	e46e      	b.n	1a003992 <_svfprintf_r+0xaa>
1a0040b4:	1a007970 	.word	0x1a007970
1a0040b8:	1a007618 	.word	0x1a007618
1a0040bc:	1a007950 	.word	0x1a007950
1a0040c0:	1a007990 	.word	0x1a007990
1a0040c4:	9306      	str	r3, [sp, #24]
1a0040c6:	9b03      	ldr	r3, [sp, #12]
1a0040c8:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a0040cc:	f013 0f08 	tst.w	r3, #8
1a0040d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0040d2:	46d3      	mov	fp, sl
1a0040d4:	f103 0907 	add.w	r9, r3, #7
1a0040d8:	f000 8386 	beq.w	1a0047e8 <_svfprintf_r+0xf00>
1a0040dc:	f029 0307 	bic.w	r3, r9, #7
1a0040e0:	ed93 7b00 	vldr	d7, [r3]
1a0040e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0040e8:	f103 0208 	add.w	r2, r3, #8
1a0040ec:	920a      	str	r2, [sp, #40]	; 0x28
1a0040ee:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
1a0040f2:	f002 fc27 	bl	1a006944 <__fpclassifyd>
1a0040f6:	2801      	cmp	r0, #1
1a0040f8:	f040 835a 	bne.w	1a0047b0 <_svfprintf_r+0xec8>
1a0040fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004100:	2200      	movs	r2, #0
1a004102:	2300      	movs	r3, #0
1a004104:	f003 f8de 	bl	1a0072c4 <__aeabi_dcmplt>
1a004108:	2800      	cmp	r0, #0
1a00410a:	f040 856b 	bne.w	1a004be4 <_svfprintf_r+0x12fc>
1a00410e:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a004112:	9b03      	ldr	r3, [sp, #12]
1a004114:	4abd      	ldr	r2, [pc, #756]	; (1a00440c <_svfprintf_r+0xb24>)
1a004116:	f8df e300 	ldr.w	lr, [pc, #768]	; 1a004418 <_svfprintf_r+0xb30>
1a00411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00411e:	9303      	str	r3, [sp, #12]
1a004120:	4613      	mov	r3, r2
1a004122:	2103      	movs	r1, #3
1a004124:	2000      	movs	r0, #0
1a004126:	2d47      	cmp	r5, #71	; 0x47
1a004128:	bfd8      	it	le
1a00412a:	4673      	movle	r3, lr
1a00412c:	9105      	str	r1, [sp, #20]
1a00412e:	900d      	str	r0, [sp, #52]	; 0x34
1a004130:	930c      	str	r3, [sp, #48]	; 0x30
1a004132:	9109      	str	r1, [sp, #36]	; 0x24
1a004134:	900e      	str	r0, [sp, #56]	; 0x38
1a004136:	e4f9      	b.n	1a003b2c <_svfprintf_r+0x244>
1a004138:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00413a:	9903      	ldr	r1, [sp, #12]
1a00413c:	9306      	str	r3, [sp, #24]
1a00413e:	2230      	movs	r2, #48	; 0x30
1a004140:	6803      	ldr	r3, [r0, #0]
1a004142:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
1a004146:	4602      	mov	r2, r0
1a004148:	2578      	movs	r5, #120	; 0x78
1a00414a:	f041 0102 	orr.w	r1, r1, #2
1a00414e:	3204      	adds	r2, #4
1a004150:	4698      	mov	r8, r3
1a004152:	4baf      	ldr	r3, [pc, #700]	; (1a004410 <_svfprintf_r+0xb28>)
1a004154:	9312      	str	r3, [sp, #72]	; 0x48
1a004156:	9103      	str	r1, [sp, #12]
1a004158:	920a      	str	r2, [sp, #40]	; 0x28
1a00415a:	f04f 0900 	mov.w	r9, #0
1a00415e:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
1a004162:	2302      	movs	r3, #2
1a004164:	e4a7      	b.n	1a003ab6 <_svfprintf_r+0x1ce>
1a004166:	9306      	str	r3, [sp, #24]
1a004168:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
1a00416c:	2d00      	cmp	r5, #0
1a00416e:	f000 83d1 	beq.w	1a004914 <_svfprintf_r+0x102c>
1a004172:	2300      	movs	r3, #0
1a004174:	2201      	movs	r2, #1
1a004176:	469c      	mov	ip, r3
1a004178:	9205      	str	r2, [sp, #20]
1a00417a:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
1a00417e:	e77a      	b.n	1a004076 <_svfprintf_r+0x78e>
1a004180:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004184:	e535      	b.n	1a003bf2 <_svfprintf_r+0x30a>
1a004186:	2b01      	cmp	r3, #1
1a004188:	f47f acad 	bne.w	1a003ae6 <_svfprintf_r+0x1fe>
1a00418c:	f1b9 0f00 	cmp.w	r9, #0
1a004190:	bf08      	it	eq
1a004192:	f1b8 0f0a 	cmpeq.w	r8, #10
1a004196:	f080 820d 	bcs.w	1a0045b4 <_svfprintf_r+0xccc>
1a00419a:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
1a00419e:	f108 0830 	add.w	r8, r8, #48	; 0x30
1a0041a2:	f80b 8d41 	strb.w	r8, [fp, #-65]!
1a0041a6:	ebcb 0307 	rsb	r3, fp, r7
1a0041aa:	9309      	str	r3, [sp, #36]	; 0x24
1a0041ac:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a0041b0:	e4b4      	b.n	1a003b1c <_svfprintf_r+0x234>
1a0041b2:	2d65      	cmp	r5, #101	; 0x65
1a0041b4:	f340 80a0 	ble.w	1a0042f8 <_svfprintf_r+0xa10>
1a0041b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a0041bc:	2200      	movs	r2, #0
1a0041be:	2300      	movs	r3, #0
1a0041c0:	f003 f876 	bl	1a0072b0 <__aeabi_dcmpeq>
1a0041c4:	2800      	cmp	r0, #0
1a0041c6:	f000 8144 	beq.w	1a004452 <_svfprintf_r+0xb6a>
1a0041ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0041cc:	4a91      	ldr	r2, [pc, #580]	; (1a004414 <_svfprintf_r+0xb2c>)
1a0041ce:	6022      	str	r2, [r4, #0]
1a0041d0:	3301      	adds	r3, #1
1a0041d2:	f10b 0b01 	add.w	fp, fp, #1
1a0041d6:	2201      	movs	r2, #1
1a0041d8:	2b07      	cmp	r3, #7
1a0041da:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0041de:	9322      	str	r3, [sp, #136]	; 0x88
1a0041e0:	6062      	str	r2, [r4, #4]
1a0041e2:	f300 833f 	bgt.w	1a004864 <_svfprintf_r+0xf7c>
1a0041e6:	3408      	adds	r4, #8
1a0041e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a0041ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0041ec:	4293      	cmp	r3, r2
1a0041ee:	db03      	blt.n	1a0041f8 <_svfprintf_r+0x910>
1a0041f0:	9b03      	ldr	r3, [sp, #12]
1a0041f2:	07da      	lsls	r2, r3, #31
1a0041f4:	f57f ad7b 	bpl.w	1a003cee <_svfprintf_r+0x406>
1a0041f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0041fa:	9914      	ldr	r1, [sp, #80]	; 0x50
1a0041fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0041fe:	6022      	str	r2, [r4, #0]
1a004200:	3301      	adds	r3, #1
1a004202:	448b      	add	fp, r1
1a004204:	2b07      	cmp	r3, #7
1a004206:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00420a:	6061      	str	r1, [r4, #4]
1a00420c:	9322      	str	r3, [sp, #136]	; 0x88
1a00420e:	f300 839b 	bgt.w	1a004948 <_svfprintf_r+0x1060>
1a004212:	3408      	adds	r4, #8
1a004214:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004216:	1e5d      	subs	r5, r3, #1
1a004218:	2d00      	cmp	r5, #0
1a00421a:	f77f ad68 	ble.w	1a003cee <_svfprintf_r+0x406>
1a00421e:	2d10      	cmp	r5, #16
1a004220:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004222:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 1a00441c <_svfprintf_r+0xb34>
1a004226:	f340 81b9 	ble.w	1a00459c <_svfprintf_r+0xcb4>
1a00422a:	f04f 0810 	mov.w	r8, #16
1a00422e:	465a      	mov	r2, fp
1a004230:	f8dd a010 	ldr.w	sl, [sp, #16]
1a004234:	e004      	b.n	1a004240 <_svfprintf_r+0x958>
1a004236:	3408      	adds	r4, #8
1a004238:	3d10      	subs	r5, #16
1a00423a:	2d10      	cmp	r5, #16
1a00423c:	f340 81ad 	ble.w	1a00459a <_svfprintf_r+0xcb2>
1a004240:	3301      	adds	r3, #1
1a004242:	3210      	adds	r2, #16
1a004244:	2b07      	cmp	r3, #7
1a004246:	9223      	str	r2, [sp, #140]	; 0x8c
1a004248:	9322      	str	r3, [sp, #136]	; 0x88
1a00424a:	f8c4 9000 	str.w	r9, [r4]
1a00424e:	f8c4 8004 	str.w	r8, [r4, #4]
1a004252:	ddf0      	ble.n	1a004236 <_svfprintf_r+0x94e>
1a004254:	4650      	mov	r0, sl
1a004256:	4631      	mov	r1, r6
1a004258:	aa21      	add	r2, sp, #132	; 0x84
1a00425a:	f002 fba1 	bl	1a0069a0 <__ssprint_r>
1a00425e:	2800      	cmp	r0, #0
1a004260:	f47f ac0a 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004264:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a004266:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004268:	463c      	mov	r4, r7
1a00426a:	e7e5      	b.n	1a004238 <_svfprintf_r+0x950>
1a00426c:	9b08      	ldr	r3, [sp, #32]
1a00426e:	9a05      	ldr	r2, [sp, #20]
1a004270:	ebc2 0a03 	rsb	sl, r2, r3
1a004274:	f1ba 0f00 	cmp.w	sl, #0
1a004278:	f77f ace3 	ble.w	1a003c42 <_svfprintf_r+0x35a>
1a00427c:	f1ba 0f10 	cmp.w	sl, #16
1a004280:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a004282:	f8df 9198 	ldr.w	r9, [pc, #408]	; 1a00441c <_svfprintf_r+0xb34>
1a004286:	dd2b      	ble.n	1a0042e0 <_svfprintf_r+0x9f8>
1a004288:	4649      	mov	r1, r9
1a00428a:	465b      	mov	r3, fp
1a00428c:	46a9      	mov	r9, r5
1a00428e:	f04f 0810 	mov.w	r8, #16
1a004292:	f8dd b010 	ldr.w	fp, [sp, #16]
1a004296:	460d      	mov	r5, r1
1a004298:	e006      	b.n	1a0042a8 <_svfprintf_r+0x9c0>
1a00429a:	f1aa 0a10 	sub.w	sl, sl, #16
1a00429e:	f1ba 0f10 	cmp.w	sl, #16
1a0042a2:	f104 0408 	add.w	r4, r4, #8
1a0042a6:	dd17      	ble.n	1a0042d8 <_svfprintf_r+0x9f0>
1a0042a8:	3201      	adds	r2, #1
1a0042aa:	3310      	adds	r3, #16
1a0042ac:	2a07      	cmp	r2, #7
1a0042ae:	9323      	str	r3, [sp, #140]	; 0x8c
1a0042b0:	9222      	str	r2, [sp, #136]	; 0x88
1a0042b2:	e884 0120 	stmia.w	r4, {r5, r8}
1a0042b6:	ddf0      	ble.n	1a00429a <_svfprintf_r+0x9b2>
1a0042b8:	4658      	mov	r0, fp
1a0042ba:	4631      	mov	r1, r6
1a0042bc:	aa21      	add	r2, sp, #132	; 0x84
1a0042be:	f002 fb6f 	bl	1a0069a0 <__ssprint_r>
1a0042c2:	2800      	cmp	r0, #0
1a0042c4:	f47f abd8 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0042c8:	f1aa 0a10 	sub.w	sl, sl, #16
1a0042cc:	f1ba 0f10 	cmp.w	sl, #16
1a0042d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a0042d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a0042d4:	463c      	mov	r4, r7
1a0042d6:	dce7      	bgt.n	1a0042a8 <_svfprintf_r+0x9c0>
1a0042d8:	469b      	mov	fp, r3
1a0042da:	462b      	mov	r3, r5
1a0042dc:	464d      	mov	r5, r9
1a0042de:	4699      	mov	r9, r3
1a0042e0:	3201      	adds	r2, #1
1a0042e2:	44d3      	add	fp, sl
1a0042e4:	2a07      	cmp	r2, #7
1a0042e6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0042ea:	9222      	str	r2, [sp, #136]	; 0x88
1a0042ec:	e884 0600 	stmia.w	r4, {r9, sl}
1a0042f0:	f300 8251 	bgt.w	1a004796 <_svfprintf_r+0xeae>
1a0042f4:	3408      	adds	r4, #8
1a0042f6:	e4a4      	b.n	1a003c42 <_svfprintf_r+0x35a>
1a0042f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0042fa:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a0042fc:	2b01      	cmp	r3, #1
1a0042fe:	f340 821f 	ble.w	1a004740 <_svfprintf_r+0xe58>
1a004302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004304:	6023      	str	r3, [r4, #0]
1a004306:	3501      	adds	r5, #1
1a004308:	f10b 0301 	add.w	r3, fp, #1
1a00430c:	2201      	movs	r2, #1
1a00430e:	2d07      	cmp	r5, #7
1a004310:	9323      	str	r3, [sp, #140]	; 0x8c
1a004312:	9522      	str	r5, [sp, #136]	; 0x88
1a004314:	6062      	str	r2, [r4, #4]
1a004316:	f300 8225 	bgt.w	1a004764 <_svfprintf_r+0xe7c>
1a00431a:	3408      	adds	r4, #8
1a00431c:	9914      	ldr	r1, [sp, #80]	; 0x50
1a00431e:	6061      	str	r1, [r4, #4]
1a004320:	3501      	adds	r5, #1
1a004322:	eb03 0b01 	add.w	fp, r3, r1
1a004326:	2d07      	cmp	r5, #7
1a004328:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00432a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00432e:	9522      	str	r5, [sp, #136]	; 0x88
1a004330:	6023      	str	r3, [r4, #0]
1a004332:	f300 8223 	bgt.w	1a00477c <_svfprintf_r+0xe94>
1a004336:	3408      	adds	r4, #8
1a004338:	2300      	movs	r3, #0
1a00433a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a00433e:	2200      	movs	r2, #0
1a004340:	f002 ffb6 	bl	1a0072b0 <__aeabi_dcmpeq>
1a004344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004346:	2800      	cmp	r0, #0
1a004348:	f040 80dd 	bne.w	1a004506 <_svfprintf_r+0xc1e>
1a00434c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00434e:	3b01      	subs	r3, #1
1a004350:	3501      	adds	r5, #1
1a004352:	3201      	adds	r2, #1
1a004354:	449b      	add	fp, r3
1a004356:	2d07      	cmp	r5, #7
1a004358:	9522      	str	r5, [sp, #136]	; 0x88
1a00435a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00435e:	6022      	str	r2, [r4, #0]
1a004360:	6063      	str	r3, [r4, #4]
1a004362:	f300 810d 	bgt.w	1a004580 <_svfprintf_r+0xc98>
1a004366:	3408      	adds	r4, #8
1a004368:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a00436a:	6062      	str	r2, [r4, #4]
1a00436c:	3501      	adds	r5, #1
1a00436e:	4493      	add	fp, r2
1a004370:	ab1d      	add	r3, sp, #116	; 0x74
1a004372:	2d07      	cmp	r5, #7
1a004374:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004378:	9522      	str	r5, [sp, #136]	; 0x88
1a00437a:	6023      	str	r3, [r4, #0]
1a00437c:	f77f acb6 	ble.w	1a003cec <_svfprintf_r+0x404>
1a004380:	9804      	ldr	r0, [sp, #16]
1a004382:	4631      	mov	r1, r6
1a004384:	aa21      	add	r2, sp, #132	; 0x84
1a004386:	f002 fb0b 	bl	1a0069a0 <__ssprint_r>
1a00438a:	2800      	cmp	r0, #0
1a00438c:	f47f ab74 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004390:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004394:	463c      	mov	r4, r7
1a004396:	e4aa      	b.n	1a003cee <_svfprintf_r+0x406>
1a004398:	2b00      	cmp	r3, #0
1a00439a:	d132      	bne.n	1a004402 <_svfprintf_r+0xb1a>
1a00439c:	9b03      	ldr	r3, [sp, #12]
1a00439e:	07d8      	lsls	r0, r3, #31
1a0043a0:	d52f      	bpl.n	1a004402 <_svfprintf_r+0xb1a>
1a0043a2:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
1a0043a6:	2330      	movs	r3, #48	; 0x30
1a0043a8:	f80b 3d41 	strb.w	r3, [fp, #-65]!
1a0043ac:	ebcb 0307 	rsb	r3, fp, r7
1a0043b0:	9309      	str	r3, [sp, #36]	; 0x24
1a0043b2:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a0043b6:	f7ff bbb1 	b.w	1a003b1c <_svfprintf_r+0x234>
1a0043ba:	9804      	ldr	r0, [sp, #16]
1a0043bc:	4631      	mov	r1, r6
1a0043be:	aa21      	add	r2, sp, #132	; 0x84
1a0043c0:	f002 faee 	bl	1a0069a0 <__ssprint_r>
1a0043c4:	2800      	cmp	r0, #0
1a0043c6:	f47f ab57 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0043ca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0043ce:	463c      	mov	r4, r7
1a0043d0:	e47b      	b.n	1a003cca <_svfprintf_r+0x3e2>
1a0043d2:	9804      	ldr	r0, [sp, #16]
1a0043d4:	4631      	mov	r1, r6
1a0043d6:	aa21      	add	r2, sp, #132	; 0x84
1a0043d8:	f002 fae2 	bl	1a0069a0 <__ssprint_r>
1a0043dc:	2800      	cmp	r0, #0
1a0043de:	f47f ab4b 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0043e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0043e6:	463c      	mov	r4, r7
1a0043e8:	e427      	b.n	1a003c3a <_svfprintf_r+0x352>
1a0043ea:	9804      	ldr	r0, [sp, #16]
1a0043ec:	4631      	mov	r1, r6
1a0043ee:	aa21      	add	r2, sp, #132	; 0x84
1a0043f0:	f002 fad6 	bl	1a0069a0 <__ssprint_r>
1a0043f4:	2800      	cmp	r0, #0
1a0043f6:	f47f ab3f 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0043fa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0043fe:	463c      	mov	r4, r7
1a004400:	e40a      	b.n	1a003c18 <_svfprintf_r+0x330>
1a004402:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
1a004406:	970c      	str	r7, [sp, #48]	; 0x30
1a004408:	f7ff bb88 	b.w	1a003b1c <_svfprintf_r+0x234>
1a00440c:	1a007964 	.word	0x1a007964
1a004410:	1a007970 	.word	0x1a007970
1a004414:	1a00798c 	.word	0x1a00798c
1a004418:	1a007960 	.word	0x1a007960
1a00441c:	1a007950 	.word	0x1a007950
1a004420:	9812      	ldr	r0, [sp, #72]	; 0x48
1a004422:	46bb      	mov	fp, r7
1a004424:	ea4f 1318 	mov.w	r3, r8, lsr #4
1a004428:	f008 010f 	and.w	r1, r8, #15
1a00442c:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
1a004430:	ea4f 1219 	mov.w	r2, r9, lsr #4
1a004434:	4698      	mov	r8, r3
1a004436:	4691      	mov	r9, r2
1a004438:	5c43      	ldrb	r3, [r0, r1]
1a00443a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
1a00443e:	ea58 0309 	orrs.w	r3, r8, r9
1a004442:	d1ef      	bne.n	1a004424 <_svfprintf_r+0xb3c>
1a004444:	465b      	mov	r3, fp
1a004446:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a00444a:	1afb      	subs	r3, r7, r3
1a00444c:	9309      	str	r3, [sp, #36]	; 0x24
1a00444e:	f7ff bb65 	b.w	1a003b1c <_svfprintf_r+0x234>
1a004452:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a004454:	2d00      	cmp	r5, #0
1a004456:	f340 8211 	ble.w	1a00487c <_svfprintf_r+0xf94>
1a00445a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a00445c:	990e      	ldr	r1, [sp, #56]	; 0x38
1a00445e:	428a      	cmp	r2, r1
1a004460:	4613      	mov	r3, r2
1a004462:	bfa8      	it	ge
1a004464:	460b      	movge	r3, r1
1a004466:	461d      	mov	r5, r3
1a004468:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00446a:	2d00      	cmp	r5, #0
1a00446c:	eb01 0a02 	add.w	sl, r1, r2
1a004470:	dd0b      	ble.n	1a00448a <_svfprintf_r+0xba2>
1a004472:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004474:	6021      	str	r1, [r4, #0]
1a004476:	3301      	adds	r3, #1
1a004478:	44ab      	add	fp, r5
1a00447a:	2b07      	cmp	r3, #7
1a00447c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004480:	6065      	str	r5, [r4, #4]
1a004482:	9322      	str	r3, [sp, #136]	; 0x88
1a004484:	f300 8355 	bgt.w	1a004b32 <_svfprintf_r+0x124a>
1a004488:	3408      	adds	r4, #8
1a00448a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00448c:	2d00      	cmp	r5, #0
1a00448e:	bfa8      	it	ge
1a004490:	1b5b      	subge	r3, r3, r5
1a004492:	2b00      	cmp	r3, #0
1a004494:	461d      	mov	r5, r3
1a004496:	f340 80f5 	ble.w	1a004684 <_svfprintf_r+0xd9c>
1a00449a:	2d10      	cmp	r5, #16
1a00449c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00449e:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 1a004aa8 <_svfprintf_r+0x11c0>
1a0044a2:	f340 81d2 	ble.w	1a00484a <_svfprintf_r+0xf62>
1a0044a6:	465a      	mov	r2, fp
1a0044a8:	f04f 0810 	mov.w	r8, #16
1a0044ac:	f8dd b010 	ldr.w	fp, [sp, #16]
1a0044b0:	e004      	b.n	1a0044bc <_svfprintf_r+0xbd4>
1a0044b2:	3408      	adds	r4, #8
1a0044b4:	3d10      	subs	r5, #16
1a0044b6:	2d10      	cmp	r5, #16
1a0044b8:	f340 81c6 	ble.w	1a004848 <_svfprintf_r+0xf60>
1a0044bc:	3301      	adds	r3, #1
1a0044be:	3210      	adds	r2, #16
1a0044c0:	2b07      	cmp	r3, #7
1a0044c2:	9223      	str	r2, [sp, #140]	; 0x8c
1a0044c4:	9322      	str	r3, [sp, #136]	; 0x88
1a0044c6:	f8c4 9000 	str.w	r9, [r4]
1a0044ca:	f8c4 8004 	str.w	r8, [r4, #4]
1a0044ce:	ddf0      	ble.n	1a0044b2 <_svfprintf_r+0xbca>
1a0044d0:	4658      	mov	r0, fp
1a0044d2:	4631      	mov	r1, r6
1a0044d4:	aa21      	add	r2, sp, #132	; 0x84
1a0044d6:	f002 fa63 	bl	1a0069a0 <__ssprint_r>
1a0044da:	2800      	cmp	r0, #0
1a0044dc:	f47f aacc 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0044e0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a0044e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0044e4:	463c      	mov	r4, r7
1a0044e6:	e7e5      	b.n	1a0044b4 <_svfprintf_r+0xbcc>
1a0044e8:	9804      	ldr	r0, [sp, #16]
1a0044ea:	4631      	mov	r1, r6
1a0044ec:	aa21      	add	r2, sp, #132	; 0x84
1a0044ee:	f002 fa57 	bl	1a0069a0 <__ssprint_r>
1a0044f2:	2800      	cmp	r0, #0
1a0044f4:	f47f aac0 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0044f8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a0044fc:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004500:	463c      	mov	r4, r7
1a004502:	f7ff bb76 	b.w	1a003bf2 <_svfprintf_r+0x30a>
1a004506:	f103 38ff 	add.w	r8, r3, #4294967295
1a00450a:	f1b8 0f00 	cmp.w	r8, #0
1a00450e:	f77f af2b 	ble.w	1a004368 <_svfprintf_r+0xa80>
1a004512:	f1b8 0f10 	cmp.w	r8, #16
1a004516:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 1a004aa8 <_svfprintf_r+0x11c0>
1a00451a:	dd25      	ble.n	1a004568 <_svfprintf_r+0xc80>
1a00451c:	465b      	mov	r3, fp
1a00451e:	f04f 0a10 	mov.w	sl, #16
1a004522:	f8dd b010 	ldr.w	fp, [sp, #16]
1a004526:	e006      	b.n	1a004536 <_svfprintf_r+0xc4e>
1a004528:	f1a8 0810 	sub.w	r8, r8, #16
1a00452c:	f1b8 0f10 	cmp.w	r8, #16
1a004530:	f104 0408 	add.w	r4, r4, #8
1a004534:	dd17      	ble.n	1a004566 <_svfprintf_r+0xc7e>
1a004536:	3501      	adds	r5, #1
1a004538:	3310      	adds	r3, #16
1a00453a:	2d07      	cmp	r5, #7
1a00453c:	9323      	str	r3, [sp, #140]	; 0x8c
1a00453e:	9522      	str	r5, [sp, #136]	; 0x88
1a004540:	e884 0600 	stmia.w	r4, {r9, sl}
1a004544:	ddf0      	ble.n	1a004528 <_svfprintf_r+0xc40>
1a004546:	4658      	mov	r0, fp
1a004548:	4631      	mov	r1, r6
1a00454a:	aa21      	add	r2, sp, #132	; 0x84
1a00454c:	f002 fa28 	bl	1a0069a0 <__ssprint_r>
1a004550:	2800      	cmp	r0, #0
1a004552:	f47f aa91 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004556:	f1a8 0810 	sub.w	r8, r8, #16
1a00455a:	f1b8 0f10 	cmp.w	r8, #16
1a00455e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004560:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004562:	463c      	mov	r4, r7
1a004564:	dce7      	bgt.n	1a004536 <_svfprintf_r+0xc4e>
1a004566:	469b      	mov	fp, r3
1a004568:	3501      	adds	r5, #1
1a00456a:	44c3      	add	fp, r8
1a00456c:	2d07      	cmp	r5, #7
1a00456e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004572:	9522      	str	r5, [sp, #136]	; 0x88
1a004574:	f8c4 9000 	str.w	r9, [r4]
1a004578:	f8c4 8004 	str.w	r8, [r4, #4]
1a00457c:	f77f aef3 	ble.w	1a004366 <_svfprintf_r+0xa7e>
1a004580:	9804      	ldr	r0, [sp, #16]
1a004582:	4631      	mov	r1, r6
1a004584:	aa21      	add	r2, sp, #132	; 0x84
1a004586:	f002 fa0b 	bl	1a0069a0 <__ssprint_r>
1a00458a:	2800      	cmp	r0, #0
1a00458c:	f47f aa74 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004590:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004594:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004596:	463c      	mov	r4, r7
1a004598:	e6e6      	b.n	1a004368 <_svfprintf_r+0xa80>
1a00459a:	4693      	mov	fp, r2
1a00459c:	3301      	adds	r3, #1
1a00459e:	44ab      	add	fp, r5
1a0045a0:	2b07      	cmp	r3, #7
1a0045a2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0045a6:	9322      	str	r3, [sp, #136]	; 0x88
1a0045a8:	f8c4 9000 	str.w	r9, [r4]
1a0045ac:	6065      	str	r5, [r4, #4]
1a0045ae:	f77f ab9d 	ble.w	1a003cec <_svfprintf_r+0x404>
1a0045b2:	e6e5      	b.n	1a004380 <_svfprintf_r+0xa98>
1a0045b4:	46bb      	mov	fp, r7
1a0045b6:	f8cd c014 	str.w	ip, [sp, #20]
1a0045ba:	4640      	mov	r0, r8
1a0045bc:	4649      	mov	r1, r9
1a0045be:	220a      	movs	r2, #10
1a0045c0:	2300      	movs	r3, #0
1a0045c2:	f7fe faef 	bl	1a002ba4 <__aeabi_uldivmod>
1a0045c6:	3230      	adds	r2, #48	; 0x30
1a0045c8:	4640      	mov	r0, r8
1a0045ca:	4649      	mov	r1, r9
1a0045cc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
1a0045d0:	2300      	movs	r3, #0
1a0045d2:	220a      	movs	r2, #10
1a0045d4:	f7fe fae6 	bl	1a002ba4 <__aeabi_uldivmod>
1a0045d8:	4680      	mov	r8, r0
1a0045da:	4689      	mov	r9, r1
1a0045dc:	ea58 0309 	orrs.w	r3, r8, r9
1a0045e0:	d1eb      	bne.n	1a0045ba <_svfprintf_r+0xcd2>
1a0045e2:	465b      	mov	r3, fp
1a0045e4:	1afb      	subs	r3, r7, r3
1a0045e6:	f8dd c014 	ldr.w	ip, [sp, #20]
1a0045ea:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a0045ee:	9309      	str	r3, [sp, #36]	; 0x24
1a0045f0:	f7ff ba94 	b.w	1a003b1c <_svfprintf_r+0x234>
1a0045f4:	2b30      	cmp	r3, #48	; 0x30
1a0045f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0045f8:	f43f af27 	beq.w	1a00444a <_svfprintf_r+0xb62>
1a0045fc:	3b01      	subs	r3, #1
1a0045fe:	461a      	mov	r2, r3
1a004600:	930c      	str	r3, [sp, #48]	; 0x30
1a004602:	1aba      	subs	r2, r7, r2
1a004604:	2330      	movs	r3, #48	; 0x30
1a004606:	9209      	str	r2, [sp, #36]	; 0x24
1a004608:	f801 3c01 	strb.w	r3, [r1, #-1]
1a00460c:	f7ff ba86 	b.w	1a003b1c <_svfprintf_r+0x234>
1a004610:	990a      	ldr	r1, [sp, #40]	; 0x28
1a004612:	680a      	ldr	r2, [r1, #0]
1a004614:	3104      	adds	r1, #4
1a004616:	910a      	str	r1, [sp, #40]	; 0x28
1a004618:	4690      	mov	r8, r2
1a00461a:	f04f 0900 	mov.w	r9, #0
1a00461e:	f7ff ba4a 	b.w	1a003ab6 <_svfprintf_r+0x1ce>
1a004622:	990a      	ldr	r1, [sp, #40]	; 0x28
1a004624:	680a      	ldr	r2, [r1, #0]
1a004626:	3104      	adds	r1, #4
1a004628:	2301      	movs	r3, #1
1a00462a:	910a      	str	r1, [sp, #40]	; 0x28
1a00462c:	4690      	mov	r8, r2
1a00462e:	f04f 0900 	mov.w	r9, #0
1a004632:	f7ff ba40 	b.w	1a003ab6 <_svfprintf_r+0x1ce>
1a004636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004638:	6813      	ldr	r3, [r2, #0]
1a00463a:	4698      	mov	r8, r3
1a00463c:	ea4f 79e3 	mov.w	r9, r3, asr #31
1a004640:	4613      	mov	r3, r2
1a004642:	3304      	adds	r3, #4
1a004644:	4642      	mov	r2, r8
1a004646:	930a      	str	r3, [sp, #40]	; 0x28
1a004648:	2a00      	cmp	r2, #0
1a00464a:	464b      	mov	r3, r9
1a00464c:	f173 0300 	sbcs.w	r3, r3, #0
1a004650:	f6bf abf2 	bge.w	1a003e38 <_svfprintf_r+0x550>
1a004654:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004658:	f1d8 0800 	rsbs	r8, r8, #0
1a00465c:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
1a004660:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a004664:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a004668:	2301      	movs	r3, #1
1a00466a:	f7ff ba2a 	b.w	1a003ac2 <_svfprintf_r+0x1da>
1a00466e:	9804      	ldr	r0, [sp, #16]
1a004670:	4631      	mov	r1, r6
1a004672:	aa21      	add	r2, sp, #132	; 0x84
1a004674:	f002 f994 	bl	1a0069a0 <__ssprint_r>
1a004678:	2800      	cmp	r0, #0
1a00467a:	f47f a9fd 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a00467e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004682:	463c      	mov	r4, r7
1a004684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004686:	990e      	ldr	r1, [sp, #56]	; 0x38
1a004688:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00468a:	440a      	add	r2, r1
1a00468c:	4690      	mov	r8, r2
1a00468e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004690:	4293      	cmp	r3, r2
1a004692:	db46      	blt.n	1a004722 <_svfprintf_r+0xe3a>
1a004694:	9a03      	ldr	r2, [sp, #12]
1a004696:	07d0      	lsls	r0, r2, #31
1a004698:	d443      	bmi.n	1a004722 <_svfprintf_r+0xe3a>
1a00469a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a00469c:	ebc8 050a 	rsb	r5, r8, sl
1a0046a0:	1ad3      	subs	r3, r2, r3
1a0046a2:	429d      	cmp	r5, r3
1a0046a4:	bfa8      	it	ge
1a0046a6:	461d      	movge	r5, r3
1a0046a8:	2d00      	cmp	r5, #0
1a0046aa:	dd0c      	ble.n	1a0046c6 <_svfprintf_r+0xdde>
1a0046ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a0046ae:	f8c4 8000 	str.w	r8, [r4]
1a0046b2:	3201      	adds	r2, #1
1a0046b4:	44ab      	add	fp, r5
1a0046b6:	2a07      	cmp	r2, #7
1a0046b8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a0046bc:	6065      	str	r5, [r4, #4]
1a0046be:	9222      	str	r2, [sp, #136]	; 0x88
1a0046c0:	f300 826f 	bgt.w	1a004ba2 <_svfprintf_r+0x12ba>
1a0046c4:	3408      	adds	r4, #8
1a0046c6:	2d00      	cmp	r5, #0
1a0046c8:	bfac      	ite	ge
1a0046ca:	1b5d      	subge	r5, r3, r5
1a0046cc:	461d      	movlt	r5, r3
1a0046ce:	2d00      	cmp	r5, #0
1a0046d0:	f77f ab0d 	ble.w	1a003cee <_svfprintf_r+0x406>
1a0046d4:	2d10      	cmp	r5, #16
1a0046d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0046d8:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 1a004aa8 <_svfprintf_r+0x11c0>
1a0046dc:	f77f af5e 	ble.w	1a00459c <_svfprintf_r+0xcb4>
1a0046e0:	f04f 0810 	mov.w	r8, #16
1a0046e4:	465a      	mov	r2, fp
1a0046e6:	f8dd a010 	ldr.w	sl, [sp, #16]
1a0046ea:	e004      	b.n	1a0046f6 <_svfprintf_r+0xe0e>
1a0046ec:	3408      	adds	r4, #8
1a0046ee:	3d10      	subs	r5, #16
1a0046f0:	2d10      	cmp	r5, #16
1a0046f2:	f77f af52 	ble.w	1a00459a <_svfprintf_r+0xcb2>
1a0046f6:	3301      	adds	r3, #1
1a0046f8:	3210      	adds	r2, #16
1a0046fa:	2b07      	cmp	r3, #7
1a0046fc:	9223      	str	r2, [sp, #140]	; 0x8c
1a0046fe:	9322      	str	r3, [sp, #136]	; 0x88
1a004700:	f8c4 9000 	str.w	r9, [r4]
1a004704:	f8c4 8004 	str.w	r8, [r4, #4]
1a004708:	ddf0      	ble.n	1a0046ec <_svfprintf_r+0xe04>
1a00470a:	4650      	mov	r0, sl
1a00470c:	4631      	mov	r1, r6
1a00470e:	aa21      	add	r2, sp, #132	; 0x84
1a004710:	f002 f946 	bl	1a0069a0 <__ssprint_r>
1a004714:	2800      	cmp	r0, #0
1a004716:	f47f a9af 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a00471a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a00471c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00471e:	463c      	mov	r4, r7
1a004720:	e7e5      	b.n	1a0046ee <_svfprintf_r+0xe06>
1a004722:	9a22      	ldr	r2, [sp, #136]	; 0x88
1a004724:	9814      	ldr	r0, [sp, #80]	; 0x50
1a004726:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a004728:	6021      	str	r1, [r4, #0]
1a00472a:	3201      	adds	r2, #1
1a00472c:	4483      	add	fp, r0
1a00472e:	2a07      	cmp	r2, #7
1a004730:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004734:	6060      	str	r0, [r4, #4]
1a004736:	9222      	str	r2, [sp, #136]	; 0x88
1a004738:	f300 8207 	bgt.w	1a004b4a <_svfprintf_r+0x1262>
1a00473c:	3408      	adds	r4, #8
1a00473e:	e7ac      	b.n	1a00469a <_svfprintf_r+0xdb2>
1a004740:	9b03      	ldr	r3, [sp, #12]
1a004742:	07d9      	lsls	r1, r3, #31
1a004744:	f53f addd 	bmi.w	1a004302 <_svfprintf_r+0xa1a>
1a004748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00474a:	6023      	str	r3, [r4, #0]
1a00474c:	3501      	adds	r5, #1
1a00474e:	f10b 0b01 	add.w	fp, fp, #1
1a004752:	2301      	movs	r3, #1
1a004754:	2d07      	cmp	r5, #7
1a004756:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a00475a:	9522      	str	r5, [sp, #136]	; 0x88
1a00475c:	6063      	str	r3, [r4, #4]
1a00475e:	f77f ae02 	ble.w	1a004366 <_svfprintf_r+0xa7e>
1a004762:	e70d      	b.n	1a004580 <_svfprintf_r+0xc98>
1a004764:	9804      	ldr	r0, [sp, #16]
1a004766:	4631      	mov	r1, r6
1a004768:	aa21      	add	r2, sp, #132	; 0x84
1a00476a:	f002 f919 	bl	1a0069a0 <__ssprint_r>
1a00476e:	2800      	cmp	r0, #0
1a004770:	f47f a982 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004774:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004776:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004778:	463c      	mov	r4, r7
1a00477a:	e5cf      	b.n	1a00431c <_svfprintf_r+0xa34>
1a00477c:	9804      	ldr	r0, [sp, #16]
1a00477e:	4631      	mov	r1, r6
1a004780:	aa21      	add	r2, sp, #132	; 0x84
1a004782:	f002 f90d 	bl	1a0069a0 <__ssprint_r>
1a004786:	2800      	cmp	r0, #0
1a004788:	f47f a976 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a00478c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004790:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004792:	463c      	mov	r4, r7
1a004794:	e5d0      	b.n	1a004338 <_svfprintf_r+0xa50>
1a004796:	9804      	ldr	r0, [sp, #16]
1a004798:	4631      	mov	r1, r6
1a00479a:	aa21      	add	r2, sp, #132	; 0x84
1a00479c:	f002 f900 	bl	1a0069a0 <__ssprint_r>
1a0047a0:	2800      	cmp	r0, #0
1a0047a2:	f47f a969 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a0047a6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a0047aa:	463c      	mov	r4, r7
1a0047ac:	f7ff ba49 	b.w	1a003c42 <_svfprintf_r+0x35a>
1a0047b0:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
1a0047b4:	f002 f8c6 	bl	1a006944 <__fpclassifyd>
1a0047b8:	2800      	cmp	r0, #0
1a0047ba:	f040 80d1 	bne.w	1a004960 <_svfprintf_r+0x1078>
1a0047be:	4686      	mov	lr, r0
1a0047c0:	4ab6      	ldr	r2, [pc, #728]	; (1a004a9c <_svfprintf_r+0x11b4>)
1a0047c2:	4bb7      	ldr	r3, [pc, #732]	; (1a004aa0 <_svfprintf_r+0x11b8>)
1a0047c4:	900d      	str	r0, [sp, #52]	; 0x34
1a0047c6:	9803      	ldr	r0, [sp, #12]
1a0047c8:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a0047cc:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
1a0047d0:	2103      	movs	r1, #3
1a0047d2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
1a0047d6:	2d47      	cmp	r5, #71	; 0x47
1a0047d8:	bfd8      	it	le
1a0047da:	461a      	movle	r2, r3
1a0047dc:	9105      	str	r1, [sp, #20]
1a0047de:	9003      	str	r0, [sp, #12]
1a0047e0:	920c      	str	r2, [sp, #48]	; 0x30
1a0047e2:	9109      	str	r1, [sp, #36]	; 0x24
1a0047e4:	f7ff b9a2 	b.w	1a003b2c <_svfprintf_r+0x244>
1a0047e8:	f029 0907 	bic.w	r9, r9, #7
1a0047ec:	ed99 7b00 	vldr	d7, [r9]
1a0047f0:	f109 0308 	add.w	r3, r9, #8
1a0047f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a0047f8:	930a      	str	r3, [sp, #40]	; 0x28
1a0047fa:	e478      	b.n	1a0040ee <_svfprintf_r+0x806>
1a0047fc:	9b03      	ldr	r3, [sp, #12]
1a0047fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004800:	f013 0f40 	tst.w	r3, #64	; 0x40
1a004804:	4613      	mov	r3, r2
1a004806:	f43f ac1f 	beq.w	1a004048 <_svfprintf_r+0x760>
1a00480a:	3304      	adds	r3, #4
1a00480c:	f8b2 8000 	ldrh.w	r8, [r2]
1a004810:	930a      	str	r3, [sp, #40]	; 0x28
1a004812:	f04f 0900 	mov.w	r9, #0
1a004816:	f7ff bb28 	b.w	1a003e6a <_svfprintf_r+0x582>
1a00481a:	9b03      	ldr	r3, [sp, #12]
1a00481c:	06db      	lsls	r3, r3, #27
1a00481e:	d40b      	bmi.n	1a004838 <_svfprintf_r+0xf50>
1a004820:	9b03      	ldr	r3, [sp, #12]
1a004822:	065d      	lsls	r5, r3, #25
1a004824:	d508      	bpl.n	1a004838 <_svfprintf_r+0xf50>
1a004826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004828:	6813      	ldr	r3, [r2, #0]
1a00482a:	3204      	adds	r2, #4
1a00482c:	920a      	str	r2, [sp, #40]	; 0x28
1a00482e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
1a004832:	801a      	strh	r2, [r3, #0]
1a004834:	f7ff b87f 	b.w	1a003936 <_svfprintf_r+0x4e>
1a004838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00483a:	6813      	ldr	r3, [r2, #0]
1a00483c:	3204      	adds	r2, #4
1a00483e:	920a      	str	r2, [sp, #40]	; 0x28
1a004840:	9a07      	ldr	r2, [sp, #28]
1a004842:	601a      	str	r2, [r3, #0]
1a004844:	f7ff b877 	b.w	1a003936 <_svfprintf_r+0x4e>
1a004848:	4693      	mov	fp, r2
1a00484a:	3301      	adds	r3, #1
1a00484c:	44ab      	add	fp, r5
1a00484e:	2b07      	cmp	r3, #7
1a004850:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004854:	9322      	str	r3, [sp, #136]	; 0x88
1a004856:	f8c4 9000 	str.w	r9, [r4]
1a00485a:	6065      	str	r5, [r4, #4]
1a00485c:	f73f af07 	bgt.w	1a00466e <_svfprintf_r+0xd86>
1a004860:	3408      	adds	r4, #8
1a004862:	e70f      	b.n	1a004684 <_svfprintf_r+0xd9c>
1a004864:	9804      	ldr	r0, [sp, #16]
1a004866:	4631      	mov	r1, r6
1a004868:	aa21      	add	r2, sp, #132	; 0x84
1a00486a:	f002 f899 	bl	1a0069a0 <__ssprint_r>
1a00486e:	2800      	cmp	r0, #0
1a004870:	f47f a902 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004874:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004878:	463c      	mov	r4, r7
1a00487a:	e4b5      	b.n	1a0041e8 <_svfprintf_r+0x900>
1a00487c:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a00487e:	4a89      	ldr	r2, [pc, #548]	; (1a004aa4 <_svfprintf_r+0x11bc>)
1a004880:	6022      	str	r2, [r4, #0]
1a004882:	3301      	adds	r3, #1
1a004884:	f10b 0b01 	add.w	fp, fp, #1
1a004888:	2201      	movs	r2, #1
1a00488a:	2b07      	cmp	r3, #7
1a00488c:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004890:	9322      	str	r3, [sp, #136]	; 0x88
1a004892:	6062      	str	r2, [r4, #4]
1a004894:	f300 80f1 	bgt.w	1a004a7a <_svfprintf_r+0x1192>
1a004898:	3408      	adds	r4, #8
1a00489a:	b92d      	cbnz	r5, 1a0048a8 <_svfprintf_r+0xfc0>
1a00489c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00489e:	b91b      	cbnz	r3, 1a0048a8 <_svfprintf_r+0xfc0>
1a0048a0:	9b03      	ldr	r3, [sp, #12]
1a0048a2:	07db      	lsls	r3, r3, #31
1a0048a4:	f57f aa23 	bpl.w	1a003cee <_svfprintf_r+0x406>
1a0048a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a0048aa:	9814      	ldr	r0, [sp, #80]	; 0x50
1a0048ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0048ae:	6022      	str	r2, [r4, #0]
1a0048b0:	3301      	adds	r3, #1
1a0048b2:	eb0b 0100 	add.w	r1, fp, r0
1a0048b6:	2b07      	cmp	r3, #7
1a0048b8:	9123      	str	r1, [sp, #140]	; 0x8c
1a0048ba:	6060      	str	r0, [r4, #4]
1a0048bc:	9322      	str	r3, [sp, #136]	; 0x88
1a0048be:	f300 81ef 	bgt.w	1a004ca0 <_svfprintf_r+0x13b8>
1a0048c2:	f104 0208 	add.w	r2, r4, #8
1a0048c6:	426d      	negs	r5, r5
1a0048c8:	2d00      	cmp	r5, #0
1a0048ca:	f340 80fa 	ble.w	1a004ac2 <_svfprintf_r+0x11da>
1a0048ce:	2d10      	cmp	r5, #16
1a0048d0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 1a004aa8 <_svfprintf_r+0x11c0>
1a0048d4:	f340 8146 	ble.w	1a004b64 <_svfprintf_r+0x127c>
1a0048d8:	2410      	movs	r4, #16
1a0048da:	f8dd 8010 	ldr.w	r8, [sp, #16]
1a0048de:	e004      	b.n	1a0048ea <_svfprintf_r+0x1002>
1a0048e0:	3208      	adds	r2, #8
1a0048e2:	3d10      	subs	r5, #16
1a0048e4:	2d10      	cmp	r5, #16
1a0048e6:	f340 813d 	ble.w	1a004b64 <_svfprintf_r+0x127c>
1a0048ea:	3301      	adds	r3, #1
1a0048ec:	3110      	adds	r1, #16
1a0048ee:	2b07      	cmp	r3, #7
1a0048f0:	9123      	str	r1, [sp, #140]	; 0x8c
1a0048f2:	9322      	str	r3, [sp, #136]	; 0x88
1a0048f4:	f8c2 9000 	str.w	r9, [r2]
1a0048f8:	6054      	str	r4, [r2, #4]
1a0048fa:	ddf1      	ble.n	1a0048e0 <_svfprintf_r+0xff8>
1a0048fc:	4640      	mov	r0, r8
1a0048fe:	4631      	mov	r1, r6
1a004900:	aa21      	add	r2, sp, #132	; 0x84
1a004902:	f002 f84d 	bl	1a0069a0 <__ssprint_r>
1a004906:	2800      	cmp	r0, #0
1a004908:	f47f a8b6 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a00490c:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a00490e:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004910:	463a      	mov	r2, r7
1a004912:	e7e6      	b.n	1a0048e2 <_svfprintf_r+0xffa>
1a004914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004916:	46b1      	mov	r9, r6
1a004918:	2b00      	cmp	r3, #0
1a00491a:	f43f a8ae 	beq.w	1a003a7a <_svfprintf_r+0x192>
1a00491e:	9804      	ldr	r0, [sp, #16]
1a004920:	4631      	mov	r1, r6
1a004922:	aa21      	add	r2, sp, #132	; 0x84
1a004924:	f002 f83c 	bl	1a0069a0 <__ssprint_r>
1a004928:	f7ff b8a7 	b.w	1a003a7a <_svfprintf_r+0x192>
1a00492c:	f041 0120 	orr.w	r1, r1, #32
1a004930:	9103      	str	r1, [sp, #12]
1a004932:	785d      	ldrb	r5, [r3, #1]
1a004934:	1c59      	adds	r1, r3, #1
1a004936:	f7ff b82c 	b.w	1a003992 <_svfprintf_r+0xaa>
1a00493a:	9808      	ldr	r0, [sp, #32]
1a00493c:	910a      	str	r1, [sp, #40]	; 0x28
1a00493e:	4240      	negs	r0, r0
1a004940:	9008      	str	r0, [sp, #32]
1a004942:	4619      	mov	r1, r3
1a004944:	f7ff ba29 	b.w	1a003d9a <_svfprintf_r+0x4b2>
1a004948:	9804      	ldr	r0, [sp, #16]
1a00494a:	4631      	mov	r1, r6
1a00494c:	aa21      	add	r2, sp, #132	; 0x84
1a00494e:	f002 f827 	bl	1a0069a0 <__ssprint_r>
1a004952:	2800      	cmp	r0, #0
1a004954:	f47f a890 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004958:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a00495c:	463c      	mov	r4, r7
1a00495e:	e459      	b.n	1a004214 <_svfprintf_r+0x92c>
1a004960:	f025 0320 	bic.w	r3, r5, #32
1a004964:	f1ba 3fff 	cmp.w	sl, #4294967295
1a004968:	9305      	str	r3, [sp, #20]
1a00496a:	f000 8093 	beq.w	1a004a94 <_svfprintf_r+0x11ac>
1a00496e:	2b47      	cmp	r3, #71	; 0x47
1a004970:	d105      	bne.n	1a00497e <_svfprintf_r+0x1096>
1a004972:	f1ba 0f00 	cmp.w	sl, #0
1a004976:	bf14      	ite	ne
1a004978:	46d3      	movne	fp, sl
1a00497a:	f04f 0b01 	moveq.w	fp, #1
1a00497e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004980:	9a03      	ldr	r2, [sp, #12]
1a004982:	2b00      	cmp	r3, #0
1a004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a004988:	920b      	str	r2, [sp, #44]	; 0x2c
1a00498a:	f2c0 81a4 	blt.w	1a004cd6 <_svfprintf_r+0x13ee>
1a00498e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004992:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
1a004996:	f04f 0a00 	mov.w	sl, #0
1a00499a:	2d66      	cmp	r5, #102	; 0x66
1a00499c:	f000 80ac 	beq.w	1a004af8 <_svfprintf_r+0x1210>
1a0049a0:	2d46      	cmp	r5, #70	; 0x46
1a0049a2:	f000 80a9 	beq.w	1a004af8 <_svfprintf_r+0x1210>
1a0049a6:	9b05      	ldr	r3, [sp, #20]
1a0049a8:	9804      	ldr	r0, [sp, #16]
1a0049aa:	2b45      	cmp	r3, #69	; 0x45
1a0049ac:	bf0c      	ite	eq
1a0049ae:	f10b 0901 	addeq.w	r9, fp, #1
1a0049b2:	46d9      	movne	r9, fp
1a0049b4:	aa1c      	add	r2, sp, #112	; 0x70
1a0049b6:	ab1f      	add	r3, sp, #124	; 0x7c
1a0049b8:	e88d 000c 	stmia.w	sp, {r2, r3}
1a0049bc:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a0049c0:	2102      	movs	r1, #2
1a0049c2:	464a      	mov	r2, r9
1a0049c4:	ab1b      	add	r3, sp, #108	; 0x6c
1a0049c6:	f000 fa8f 	bl	1a004ee8 <_dtoa_r>
1a0049ca:	2d67      	cmp	r5, #103	; 0x67
1a0049cc:	900c      	str	r0, [sp, #48]	; 0x30
1a0049ce:	d002      	beq.n	1a0049d6 <_svfprintf_r+0x10ee>
1a0049d0:	2d47      	cmp	r5, #71	; 0x47
1a0049d2:	f040 809f 	bne.w	1a004b14 <_svfprintf_r+0x122c>
1a0049d6:	9b03      	ldr	r3, [sp, #12]
1a0049d8:	07db      	lsls	r3, r3, #31
1a0049da:	f140 8192 	bpl.w	1a004d02 <_svfprintf_r+0x141a>
1a0049de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0049e0:	eb03 0809 	add.w	r8, r3, r9
1a0049e4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a0049e8:	2200      	movs	r2, #0
1a0049ea:	2300      	movs	r3, #0
1a0049ec:	f002 fc60 	bl	1a0072b0 <__aeabi_dcmpeq>
1a0049f0:	2800      	cmp	r0, #0
1a0049f2:	f040 80fd 	bne.w	1a004bf0 <_svfprintf_r+0x1308>
1a0049f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a0049f8:	4598      	cmp	r8, r3
1a0049fa:	d906      	bls.n	1a004a0a <_svfprintf_r+0x1122>
1a0049fc:	2130      	movs	r1, #48	; 0x30
1a0049fe:	1c5a      	adds	r2, r3, #1
1a004a00:	921f      	str	r2, [sp, #124]	; 0x7c
1a004a02:	7019      	strb	r1, [r3, #0]
1a004a04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a004a06:	4598      	cmp	r8, r3
1a004a08:	d8f9      	bhi.n	1a0049fe <_svfprintf_r+0x1116>
1a004a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004a0c:	1a9b      	subs	r3, r3, r2
1a004a0e:	930f      	str	r3, [sp, #60]	; 0x3c
1a004a10:	9b05      	ldr	r3, [sp, #20]
1a004a12:	2b47      	cmp	r3, #71	; 0x47
1a004a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004a16:	f000 80de 	beq.w	1a004bd6 <_svfprintf_r+0x12ee>
1a004a1a:	2d65      	cmp	r5, #101	; 0x65
1a004a1c:	f340 80f8 	ble.w	1a004c10 <_svfprintf_r+0x1328>
1a004a20:	2d66      	cmp	r5, #102	; 0x66
1a004a22:	930e      	str	r3, [sp, #56]	; 0x38
1a004a24:	f000 8160 	beq.w	1a004ce8 <_svfprintf_r+0x1400>
1a004a28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004a2c:	4293      	cmp	r3, r2
1a004a2e:	f300 8144 	bgt.w	1a004cba <_svfprintf_r+0x13d2>
1a004a32:	9b03      	ldr	r3, [sp, #12]
1a004a34:	07d9      	lsls	r1, r3, #31
1a004a36:	f100 8166 	bmi.w	1a004d06 <_svfprintf_r+0x141e>
1a004a3a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004a3e:	9209      	str	r2, [sp, #36]	; 0x24
1a004a40:	f1ba 0f00 	cmp.w	sl, #0
1a004a44:	f040 80bc 	bne.w	1a004bc0 <_svfprintf_r+0x12d8>
1a004a48:	9305      	str	r3, [sp, #20]
1a004a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004a4c:	9303      	str	r3, [sp, #12]
1a004a4e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
1a004a52:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a004a56:	f7ff b869 	b.w	1a003b2c <_svfprintf_r+0x244>
1a004a5a:	9804      	ldr	r0, [sp, #16]
1a004a5c:	2140      	movs	r1, #64	; 0x40
1a004a5e:	f001 f99b 	bl	1a005d98 <_malloc_r>
1a004a62:	f8c9 0000 	str.w	r0, [r9]
1a004a66:	f8c9 0010 	str.w	r0, [r9, #16]
1a004a6a:	2800      	cmp	r0, #0
1a004a6c:	f000 8197 	beq.w	1a004d9e <_svfprintf_r+0x14b6>
1a004a70:	2340      	movs	r3, #64	; 0x40
1a004a72:	f8c9 3014 	str.w	r3, [r9, #20]
1a004a76:	f7fe bf4f 	b.w	1a003918 <_svfprintf_r+0x30>
1a004a7a:	9804      	ldr	r0, [sp, #16]
1a004a7c:	4631      	mov	r1, r6
1a004a7e:	aa21      	add	r2, sp, #132	; 0x84
1a004a80:	f001 ff8e 	bl	1a0069a0 <__ssprint_r>
1a004a84:	2800      	cmp	r0, #0
1a004a86:	f47e aff7 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004a8a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a004a8c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004a90:	463c      	mov	r4, r7
1a004a92:	e702      	b.n	1a00489a <_svfprintf_r+0xfb2>
1a004a94:	f04f 0b06 	mov.w	fp, #6
1a004a98:	e771      	b.n	1a00497e <_svfprintf_r+0x1096>
1a004a9a:	bf00      	nop
1a004a9c:	1a00796c 	.word	0x1a00796c
1a004aa0:	1a007968 	.word	0x1a007968
1a004aa4:	1a00798c 	.word	0x1a00798c
1a004aa8:	1a007950 	.word	0x1a007950
1a004aac:	9804      	ldr	r0, [sp, #16]
1a004aae:	4631      	mov	r1, r6
1a004ab0:	aa21      	add	r2, sp, #132	; 0x84
1a004ab2:	f001 ff75 	bl	1a0069a0 <__ssprint_r>
1a004ab6:	2800      	cmp	r0, #0
1a004ab8:	f47e afde 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004abc:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a004abe:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004ac0:	463a      	mov	r2, r7
1a004ac2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
1a004ac4:	6054      	str	r4, [r2, #4]
1a004ac6:	3301      	adds	r3, #1
1a004ac8:	eb01 0b04 	add.w	fp, r1, r4
1a004acc:	2b07      	cmp	r3, #7
1a004ace:	990c      	ldr	r1, [sp, #48]	; 0x30
1a004ad0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
1a004ad4:	9322      	str	r3, [sp, #136]	; 0x88
1a004ad6:	6011      	str	r1, [r2, #0]
1a004ad8:	f73f ac52 	bgt.w	1a004380 <_svfprintf_r+0xa98>
1a004adc:	f102 0408 	add.w	r4, r2, #8
1a004ae0:	f7ff b905 	b.w	1a003cee <_svfprintf_r+0x406>
1a004ae4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
1a004ae8:	f7fe fed0 	bl	1a00388c <strlen>
1a004aec:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004af0:	9009      	str	r0, [sp, #36]	; 0x24
1a004af2:	4603      	mov	r3, r0
1a004af4:	f7ff ba0e 	b.w	1a003f14 <_svfprintf_r+0x62c>
1a004af8:	aa1c      	add	r2, sp, #112	; 0x70
1a004afa:	ab1f      	add	r3, sp, #124	; 0x7c
1a004afc:	e88d 000c 	stmia.w	sp, {r2, r3}
1a004b00:	9804      	ldr	r0, [sp, #16]
1a004b02:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
1a004b06:	2103      	movs	r1, #3
1a004b08:	465a      	mov	r2, fp
1a004b0a:	ab1b      	add	r3, sp, #108	; 0x6c
1a004b0c:	f000 f9ec 	bl	1a004ee8 <_dtoa_r>
1a004b10:	46d9      	mov	r9, fp
1a004b12:	900c      	str	r0, [sp, #48]	; 0x30
1a004b14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004b16:	eb03 0809 	add.w	r8, r3, r9
1a004b1a:	9b05      	ldr	r3, [sp, #20]
1a004b1c:	2b46      	cmp	r3, #70	; 0x46
1a004b1e:	f47f af61 	bne.w	1a0049e4 <_svfprintf_r+0x10fc>
1a004b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a004b24:	781b      	ldrb	r3, [r3, #0]
1a004b26:	2b30      	cmp	r3, #48	; 0x30
1a004b28:	f000 8103 	beq.w	1a004d32 <_svfprintf_r+0x144a>
1a004b2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004b2e:	4498      	add	r8, r3
1a004b30:	e758      	b.n	1a0049e4 <_svfprintf_r+0x10fc>
1a004b32:	9804      	ldr	r0, [sp, #16]
1a004b34:	4631      	mov	r1, r6
1a004b36:	aa21      	add	r2, sp, #132	; 0x84
1a004b38:	f001 ff32 	bl	1a0069a0 <__ssprint_r>
1a004b3c:	2800      	cmp	r0, #0
1a004b3e:	f47e af9b 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004b42:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004b46:	463c      	mov	r4, r7
1a004b48:	e49f      	b.n	1a00448a <_svfprintf_r+0xba2>
1a004b4a:	9804      	ldr	r0, [sp, #16]
1a004b4c:	4631      	mov	r1, r6
1a004b4e:	aa21      	add	r2, sp, #132	; 0x84
1a004b50:	f001 ff26 	bl	1a0069a0 <__ssprint_r>
1a004b54:	2800      	cmp	r0, #0
1a004b56:	f47e af8f 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004b5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004b5c:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004b60:	463c      	mov	r4, r7
1a004b62:	e59a      	b.n	1a00469a <_svfprintf_r+0xdb2>
1a004b64:	3301      	adds	r3, #1
1a004b66:	4429      	add	r1, r5
1a004b68:	2b07      	cmp	r3, #7
1a004b6a:	9123      	str	r1, [sp, #140]	; 0x8c
1a004b6c:	9322      	str	r3, [sp, #136]	; 0x88
1a004b6e:	f8c2 9000 	str.w	r9, [r2]
1a004b72:	6055      	str	r5, [r2, #4]
1a004b74:	dc9a      	bgt.n	1a004aac <_svfprintf_r+0x11c4>
1a004b76:	3208      	adds	r2, #8
1a004b78:	e7a3      	b.n	1a004ac2 <_svfprintf_r+0x11da>
1a004b7a:	4653      	mov	r3, sl
1a004b7c:	2b06      	cmp	r3, #6
1a004b7e:	bf28      	it	cs
1a004b80:	2306      	movcs	r3, #6
1a004b82:	9309      	str	r3, [sp, #36]	; 0x24
1a004b84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004b88:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
1a004b8c:	9305      	str	r3, [sp, #20]
1a004b8e:	4b87      	ldr	r3, [pc, #540]	; (1a004dac <_svfprintf_r+0x14c4>)
1a004b90:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004b94:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
1a004b98:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
1a004b9c:	930c      	str	r3, [sp, #48]	; 0x30
1a004b9e:	f7fe bfc5 	b.w	1a003b2c <_svfprintf_r+0x244>
1a004ba2:	9804      	ldr	r0, [sp, #16]
1a004ba4:	4631      	mov	r1, r6
1a004ba6:	aa21      	add	r2, sp, #132	; 0x84
1a004ba8:	f001 fefa 	bl	1a0069a0 <__ssprint_r>
1a004bac:	2800      	cmp	r0, #0
1a004bae:	f47e af63 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004bb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a004bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004bb6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
1a004bba:	1ad3      	subs	r3, r2, r3
1a004bbc:	463c      	mov	r4, r7
1a004bbe:	e582      	b.n	1a0046c6 <_svfprintf_r+0xdde>
1a004bc0:	9305      	str	r3, [sp, #20]
1a004bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004bc4:	9303      	str	r3, [sp, #12]
1a004bc6:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004bca:	2300      	movs	r3, #0
1a004bcc:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a004bd0:	930d      	str	r3, [sp, #52]	; 0x34
1a004bd2:	f7fe bfae 	b.w	1a003b32 <_svfprintf_r+0x24a>
1a004bd6:	1cda      	adds	r2, r3, #3
1a004bd8:	db19      	blt.n	1a004c0e <_svfprintf_r+0x1326>
1a004bda:	459b      	cmp	fp, r3
1a004bdc:	db17      	blt.n	1a004c0e <_svfprintf_r+0x1326>
1a004bde:	930e      	str	r3, [sp, #56]	; 0x38
1a004be0:	2567      	movs	r5, #103	; 0x67
1a004be2:	e721      	b.n	1a004a28 <_svfprintf_r+0x1140>
1a004be4:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a004be8:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
1a004bec:	f7ff ba91 	b.w	1a004112 <_svfprintf_r+0x82a>
1a004bf0:	4643      	mov	r3, r8
1a004bf2:	e70a      	b.n	1a004a0a <_svfprintf_r+0x1122>
1a004bf4:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
1a004bf8:	900d      	str	r0, [sp, #52]	; 0x34
1a004bfa:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004bfe:	900e      	str	r0, [sp, #56]	; 0x38
1a004c00:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
1a004c04:	9305      	str	r3, [sp, #20]
1a004c06:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
1a004c0a:	f7fe bf8f 	b.w	1a003b2c <_svfprintf_r+0x244>
1a004c0e:	3d02      	subs	r5, #2
1a004c10:	3b01      	subs	r3, #1
1a004c12:	2b00      	cmp	r3, #0
1a004c14:	931b      	str	r3, [sp, #108]	; 0x6c
1a004c16:	bfba      	itte	lt
1a004c18:	425b      	neglt	r3, r3
1a004c1a:	222d      	movlt	r2, #45	; 0x2d
1a004c1c:	222b      	movge	r2, #43	; 0x2b
1a004c1e:	2b09      	cmp	r3, #9
1a004c20:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
1a004c24:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
1a004c28:	dd7b      	ble.n	1a004d22 <_svfprintf_r+0x143a>
1a004c2a:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
1a004c2e:	4670      	mov	r0, lr
1a004c30:	4a5f      	ldr	r2, [pc, #380]	; (1a004db0 <_svfprintf_r+0x14c8>)
1a004c32:	fb82 2103 	smull	r2, r1, r2, r3
1a004c36:	17da      	asrs	r2, r3, #31
1a004c38:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
1a004c3c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a004c40:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a004c44:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a004c48:	2a09      	cmp	r2, #9
1a004c4a:	4613      	mov	r3, r2
1a004c4c:	f800 1d01 	strb.w	r1, [r0, #-1]!
1a004c50:	dcee      	bgt.n	1a004c30 <_svfprintf_r+0x1348>
1a004c52:	4602      	mov	r2, r0
1a004c54:	3330      	adds	r3, #48	; 0x30
1a004c56:	b2d9      	uxtb	r1, r3
1a004c58:	f802 1d01 	strb.w	r1, [r2, #-1]!
1a004c5c:	4596      	cmp	lr, r2
1a004c5e:	f240 809b 	bls.w	1a004d98 <_svfprintf_r+0x14b0>
1a004c62:	f10d 0276 	add.w	r2, sp, #118	; 0x76
1a004c66:	4603      	mov	r3, r0
1a004c68:	e001      	b.n	1a004c6e <_svfprintf_r+0x1386>
1a004c6a:	f813 1b01 	ldrb.w	r1, [r3], #1
1a004c6e:	f802 1b01 	strb.w	r1, [r2], #1
1a004c72:	4573      	cmp	r3, lr
1a004c74:	d1f9      	bne.n	1a004c6a <_svfprintf_r+0x1382>
1a004c76:	ab21      	add	r3, sp, #132	; 0x84
1a004c78:	1a1b      	subs	r3, r3, r0
1a004c7a:	f10d 0276 	add.w	r2, sp, #118	; 0x76
1a004c7e:	4413      	add	r3, r2
1a004c80:	aa1d      	add	r2, sp, #116	; 0x74
1a004c82:	1a9b      	subs	r3, r3, r2
1a004c84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004c86:	9315      	str	r3, [sp, #84]	; 0x54
1a004c88:	2a01      	cmp	r2, #1
1a004c8a:	4413      	add	r3, r2
1a004c8c:	9309      	str	r3, [sp, #36]	; 0x24
1a004c8e:	dd74      	ble.n	1a004d7a <_svfprintf_r+0x1492>
1a004c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004c92:	2200      	movs	r2, #0
1a004c94:	3301      	adds	r3, #1
1a004c96:	9309      	str	r3, [sp, #36]	; 0x24
1a004c98:	920e      	str	r2, [sp, #56]	; 0x38
1a004c9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004c9e:	e6cf      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004ca0:	9804      	ldr	r0, [sp, #16]
1a004ca2:	4631      	mov	r1, r6
1a004ca4:	aa21      	add	r2, sp, #132	; 0x84
1a004ca6:	f001 fe7b 	bl	1a0069a0 <__ssprint_r>
1a004caa:	2800      	cmp	r0, #0
1a004cac:	f47e aee4 	bne.w	1a003a78 <_svfprintf_r+0x190>
1a004cb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
1a004cb2:	9923      	ldr	r1, [sp, #140]	; 0x8c
1a004cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
1a004cb6:	463a      	mov	r2, r7
1a004cb8:	e605      	b.n	1a0048c6 <_svfprintf_r+0xfde>
1a004cba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004cbc:	2b00      	cmp	r3, #0
1a004cbe:	bfd8      	it	le
1a004cc0:	f1c3 0802 	rsble	r8, r3, #2
1a004cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004cc6:	bfc8      	it	gt
1a004cc8:	f04f 0801 	movgt.w	r8, #1
1a004ccc:	4443      	add	r3, r8
1a004cce:	9309      	str	r3, [sp, #36]	; 0x24
1a004cd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004cd4:	e6b4      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004cd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a004cde:	9016      	str	r0, [sp, #88]	; 0x58
1a004ce0:	9317      	str	r3, [sp, #92]	; 0x5c
1a004ce2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a004ce6:	e658      	b.n	1a00499a <_svfprintf_r+0x10b2>
1a004ce8:	2b00      	cmp	r3, #0
1a004cea:	dd3d      	ble.n	1a004d68 <_svfprintf_r+0x1480>
1a004cec:	f1bb 0f00 	cmp.w	fp, #0
1a004cf0:	d10f      	bne.n	1a004d12 <_svfprintf_r+0x142a>
1a004cf2:	9b03      	ldr	r3, [sp, #12]
1a004cf4:	07db      	lsls	r3, r3, #31
1a004cf6:	d40c      	bmi.n	1a004d12 <_svfprintf_r+0x142a>
1a004cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a004cfa:	9209      	str	r2, [sp, #36]	; 0x24
1a004cfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004d00:	e69e      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
1a004d04:	e681      	b.n	1a004a0a <_svfprintf_r+0x1122>
1a004d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d08:	3301      	adds	r3, #1
1a004d0a:	9309      	str	r3, [sp, #36]	; 0x24
1a004d0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004d10:	e696      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d14:	f10b 0801 	add.w	r8, fp, #1
1a004d18:	4443      	add	r3, r8
1a004d1a:	9309      	str	r3, [sp, #36]	; 0x24
1a004d1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004d20:	e68e      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004d22:	3330      	adds	r3, #48	; 0x30
1a004d24:	2230      	movs	r2, #48	; 0x30
1a004d26:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
1a004d2a:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
1a004d2e:	ab1e      	add	r3, sp, #120	; 0x78
1a004d30:	e7a6      	b.n	1a004c80 <_svfprintf_r+0x1398>
1a004d32:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
1a004d36:	2200      	movs	r2, #0
1a004d38:	2300      	movs	r3, #0
1a004d3a:	f002 fab9 	bl	1a0072b0 <__aeabi_dcmpeq>
1a004d3e:	2800      	cmp	r0, #0
1a004d40:	f47f aef4 	bne.w	1a004b2c <_svfprintf_r+0x1244>
1a004d44:	f1c9 0301 	rsb	r3, r9, #1
1a004d48:	931b      	str	r3, [sp, #108]	; 0x6c
1a004d4a:	4498      	add	r8, r3
1a004d4c:	e64a      	b.n	1a0049e4 <_svfprintf_r+0x10fc>
1a004d4e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a004d50:	f8d5 a000 	ldr.w	sl, [r5]
1a004d54:	4628      	mov	r0, r5
1a004d56:	3004      	adds	r0, #4
1a004d58:	f1ba 0f00 	cmp.w	sl, #0
1a004d5c:	785d      	ldrb	r5, [r3, #1]
1a004d5e:	900a      	str	r0, [sp, #40]	; 0x28
1a004d60:	f6be ae17 	bge.w	1a003992 <_svfprintf_r+0xaa>
1a004d64:	f7fe be13 	b.w	1a00398e <_svfprintf_r+0xa6>
1a004d68:	f1bb 0f00 	cmp.w	fp, #0
1a004d6c:	d10e      	bne.n	1a004d8c <_svfprintf_r+0x14a4>
1a004d6e:	9b03      	ldr	r3, [sp, #12]
1a004d70:	07d8      	lsls	r0, r3, #31
1a004d72:	d40b      	bmi.n	1a004d8c <_svfprintf_r+0x14a4>
1a004d74:	2301      	movs	r3, #1
1a004d76:	9309      	str	r3, [sp, #36]	; 0x24
1a004d78:	e662      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004d7a:	9b03      	ldr	r3, [sp, #12]
1a004d7c:	f013 0301 	ands.w	r3, r3, #1
1a004d80:	d186      	bne.n	1a004c90 <_svfprintf_r+0x13a8>
1a004d82:	930e      	str	r3, [sp, #56]	; 0x38
1a004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004d86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004d8a:	e659      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004d8c:	f10b 0302 	add.w	r3, fp, #2
1a004d90:	9309      	str	r3, [sp, #36]	; 0x24
1a004d92:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004d96:	e653      	b.n	1a004a40 <_svfprintf_r+0x1158>
1a004d98:	f10d 0376 	add.w	r3, sp, #118	; 0x76
1a004d9c:	e770      	b.n	1a004c80 <_svfprintf_r+0x1398>
1a004d9e:	9a04      	ldr	r2, [sp, #16]
1a004da0:	230c      	movs	r3, #12
1a004da2:	6013      	str	r3, [r2, #0]
1a004da4:	f04f 30ff 	mov.w	r0, #4294967295
1a004da8:	f7fe be70 	b.w	1a003a8c <_svfprintf_r+0x1a4>
1a004dac:	1a007984 	.word	0x1a007984
1a004db0:	66666667 	.word	0x66666667
1a004db4:	f3af 8000 	nop.w

1a004db8 <quorem>:
1a004db8:	6902      	ldr	r2, [r0, #16]
1a004dba:	690b      	ldr	r3, [r1, #16]
1a004dbc:	4293      	cmp	r3, r2
1a004dbe:	f300 808f 	bgt.w	1a004ee0 <quorem+0x128>
1a004dc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004dc6:	f103 38ff 	add.w	r8, r3, #4294967295
1a004dca:	f101 0714 	add.w	r7, r1, #20
1a004dce:	f100 0b14 	add.w	fp, r0, #20
1a004dd2:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
1a004dd6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
1a004dda:	ea4f 0488 	mov.w	r4, r8, lsl #2
1a004dde:	b083      	sub	sp, #12
1a004de0:	3201      	adds	r2, #1
1a004de2:	fbb3 f9f2 	udiv	r9, r3, r2
1a004de6:	eb0b 0304 	add.w	r3, fp, r4
1a004dea:	9400      	str	r4, [sp, #0]
1a004dec:	eb07 0a04 	add.w	sl, r7, r4
1a004df0:	9301      	str	r3, [sp, #4]
1a004df2:	f1b9 0f00 	cmp.w	r9, #0
1a004df6:	d03b      	beq.n	1a004e70 <quorem+0xb8>
1a004df8:	2600      	movs	r6, #0
1a004dfa:	4632      	mov	r2, r6
1a004dfc:	46bc      	mov	ip, r7
1a004dfe:	46de      	mov	lr, fp
1a004e00:	4634      	mov	r4, r6
1a004e02:	f85c 6b04 	ldr.w	r6, [ip], #4
1a004e06:	f8de 5000 	ldr.w	r5, [lr]
1a004e0a:	b2b3      	uxth	r3, r6
1a004e0c:	0c36      	lsrs	r6, r6, #16
1a004e0e:	fb03 4409 	mla	r4, r3, r9, r4
1a004e12:	fb06 f609 	mul.w	r6, r6, r9
1a004e16:	eb06 4614 	add.w	r6, r6, r4, lsr #16
1a004e1a:	b2a3      	uxth	r3, r4
1a004e1c:	1ad3      	subs	r3, r2, r3
1a004e1e:	b2b4      	uxth	r4, r6
1a004e20:	fa13 f385 	uxtah	r3, r3, r5
1a004e24:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1a004e28:	eb04 4423 	add.w	r4, r4, r3, asr #16
1a004e2c:	b29b      	uxth	r3, r3
1a004e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1a004e32:	45e2      	cmp	sl, ip
1a004e34:	ea4f 4224 	mov.w	r2, r4, asr #16
1a004e38:	f84e 3b04 	str.w	r3, [lr], #4
1a004e3c:	ea4f 4416 	mov.w	r4, r6, lsr #16
1a004e40:	d2df      	bcs.n	1a004e02 <quorem+0x4a>
1a004e42:	9b00      	ldr	r3, [sp, #0]
1a004e44:	f85b 3003 	ldr.w	r3, [fp, r3]
1a004e48:	b993      	cbnz	r3, 1a004e70 <quorem+0xb8>
1a004e4a:	9c01      	ldr	r4, [sp, #4]
1a004e4c:	1f23      	subs	r3, r4, #4
1a004e4e:	459b      	cmp	fp, r3
1a004e50:	d20c      	bcs.n	1a004e6c <quorem+0xb4>
1a004e52:	f854 3c04 	ldr.w	r3, [r4, #-4]
1a004e56:	b94b      	cbnz	r3, 1a004e6c <quorem+0xb4>
1a004e58:	f1a4 0308 	sub.w	r3, r4, #8
1a004e5c:	e002      	b.n	1a004e64 <quorem+0xac>
1a004e5e:	681a      	ldr	r2, [r3, #0]
1a004e60:	3b04      	subs	r3, #4
1a004e62:	b91a      	cbnz	r2, 1a004e6c <quorem+0xb4>
1a004e64:	459b      	cmp	fp, r3
1a004e66:	f108 38ff 	add.w	r8, r8, #4294967295
1a004e6a:	d3f8      	bcc.n	1a004e5e <quorem+0xa6>
1a004e6c:	f8c0 8010 	str.w	r8, [r0, #16]
1a004e70:	4604      	mov	r4, r0
1a004e72:	f001 fc7b 	bl	1a00676c <__mcmp>
1a004e76:	2800      	cmp	r0, #0
1a004e78:	db2e      	blt.n	1a004ed8 <quorem+0x120>
1a004e7a:	f109 0901 	add.w	r9, r9, #1
1a004e7e:	465d      	mov	r5, fp
1a004e80:	2300      	movs	r3, #0
1a004e82:	f857 1b04 	ldr.w	r1, [r7], #4
1a004e86:	6828      	ldr	r0, [r5, #0]
1a004e88:	b28a      	uxth	r2, r1
1a004e8a:	1a9a      	subs	r2, r3, r2
1a004e8c:	0c09      	lsrs	r1, r1, #16
1a004e8e:	fa12 f280 	uxtah	r2, r2, r0
1a004e92:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
1a004e96:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a004e9a:	b291      	uxth	r1, r2
1a004e9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a004ea0:	45ba      	cmp	sl, r7
1a004ea2:	f845 1b04 	str.w	r1, [r5], #4
1a004ea6:	ea4f 4323 	mov.w	r3, r3, asr #16
1a004eaa:	d2ea      	bcs.n	1a004e82 <quorem+0xca>
1a004eac:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
1a004eb0:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
1a004eb4:	b982      	cbnz	r2, 1a004ed8 <quorem+0x120>
1a004eb6:	1f1a      	subs	r2, r3, #4
1a004eb8:	4593      	cmp	fp, r2
1a004eba:	d20b      	bcs.n	1a004ed4 <quorem+0x11c>
1a004ebc:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a004ec0:	b942      	cbnz	r2, 1a004ed4 <quorem+0x11c>
1a004ec2:	3b08      	subs	r3, #8
1a004ec4:	e002      	b.n	1a004ecc <quorem+0x114>
1a004ec6:	681a      	ldr	r2, [r3, #0]
1a004ec8:	3b04      	subs	r3, #4
1a004eca:	b91a      	cbnz	r2, 1a004ed4 <quorem+0x11c>
1a004ecc:	459b      	cmp	fp, r3
1a004ece:	f108 38ff 	add.w	r8, r8, #4294967295
1a004ed2:	d3f8      	bcc.n	1a004ec6 <quorem+0x10e>
1a004ed4:	f8c4 8010 	str.w	r8, [r4, #16]
1a004ed8:	4648      	mov	r0, r9
1a004eda:	b003      	add	sp, #12
1a004edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004ee0:	2000      	movs	r0, #0
1a004ee2:	4770      	bx	lr
1a004ee4:	0000      	movs	r0, r0
	...

1a004ee8 <_dtoa_r>:
1a004ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004eec:	b099      	sub	sp, #100	; 0x64
1a004eee:	4604      	mov	r4, r0
1a004ef0:	9103      	str	r1, [sp, #12]
1a004ef2:	6c01      	ldr	r1, [r0, #64]	; 0x40
1a004ef4:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a004ef6:	9304      	str	r3, [sp, #16]
1a004ef8:	4692      	mov	sl, r2
1a004efa:	ed8d 0b00 	vstr	d0, [sp]
1a004efe:	b141      	cbz	r1, 1a004f12 <_dtoa_r+0x2a>
1a004f00:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a004f02:	604a      	str	r2, [r1, #4]
1a004f04:	2301      	movs	r3, #1
1a004f06:	4093      	lsls	r3, r2
1a004f08:	608b      	str	r3, [r1, #8]
1a004f0a:	f001 fa4b 	bl	1a0063a4 <_Bfree>
1a004f0e:	2300      	movs	r3, #0
1a004f10:	6423      	str	r3, [r4, #64]	; 0x40
1a004f12:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004f16:	2b00      	cmp	r3, #0
1a004f18:	4699      	mov	r9, r3
1a004f1a:	db36      	blt.n	1a004f8a <_dtoa_r+0xa2>
1a004f1c:	2300      	movs	r3, #0
1a004f1e:	602b      	str	r3, [r5, #0]
1a004f20:	4ba5      	ldr	r3, [pc, #660]	; (1a0051b8 <_dtoa_r+0x2d0>)
1a004f22:	461a      	mov	r2, r3
1a004f24:	ea09 0303 	and.w	r3, r9, r3
1a004f28:	4293      	cmp	r3, r2
1a004f2a:	d017      	beq.n	1a004f5c <_dtoa_r+0x74>
1a004f2c:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004f30:	2200      	movs	r2, #0
1a004f32:	2300      	movs	r3, #0
1a004f34:	4630      	mov	r0, r6
1a004f36:	4639      	mov	r1, r7
1a004f38:	f002 f9ba 	bl	1a0072b0 <__aeabi_dcmpeq>
1a004f3c:	4680      	mov	r8, r0
1a004f3e:	2800      	cmp	r0, #0
1a004f40:	d02b      	beq.n	1a004f9a <_dtoa_r+0xb2>
1a004f42:	9a04      	ldr	r2, [sp, #16]
1a004f44:	2301      	movs	r3, #1
1a004f46:	6013      	str	r3, [r2, #0]
1a004f48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004f4a:	2b00      	cmp	r3, #0
1a004f4c:	f000 80cc 	beq.w	1a0050e8 <_dtoa_r+0x200>
1a004f50:	489a      	ldr	r0, [pc, #616]	; (1a0051bc <_dtoa_r+0x2d4>)
1a004f52:	6018      	str	r0, [r3, #0]
1a004f54:	3801      	subs	r0, #1
1a004f56:	b019      	add	sp, #100	; 0x64
1a004f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004f5c:	9a04      	ldr	r2, [sp, #16]
1a004f5e:	f242 730f 	movw	r3, #9999	; 0x270f
1a004f62:	6013      	str	r3, [r2, #0]
1a004f64:	9b00      	ldr	r3, [sp, #0]
1a004f66:	2b00      	cmp	r3, #0
1a004f68:	f000 80a7 	beq.w	1a0050ba <_dtoa_r+0x1d2>
1a004f6c:	4894      	ldr	r0, [pc, #592]	; (1a0051c0 <_dtoa_r+0x2d8>)
1a004f6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a004f70:	2b00      	cmp	r3, #0
1a004f72:	d0f0      	beq.n	1a004f56 <_dtoa_r+0x6e>
1a004f74:	78c3      	ldrb	r3, [r0, #3]
1a004f76:	2b00      	cmp	r3, #0
1a004f78:	f000 80b8 	beq.w	1a0050ec <_dtoa_r+0x204>
1a004f7c:	f100 0308 	add.w	r3, r0, #8
1a004f80:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a004f82:	6013      	str	r3, [r2, #0]
1a004f84:	b019      	add	sp, #100	; 0x64
1a004f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004f8a:	9a01      	ldr	r2, [sp, #4]
1a004f8c:	2301      	movs	r3, #1
1a004f8e:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
1a004f92:	602b      	str	r3, [r5, #0]
1a004f94:	f8cd 9004 	str.w	r9, [sp, #4]
1a004f98:	e7c2      	b.n	1a004f20 <_dtoa_r+0x38>
1a004f9a:	4620      	mov	r0, r4
1a004f9c:	ec47 6b10 	vmov	d0, r6, r7
1a004fa0:	a917      	add	r1, sp, #92	; 0x5c
1a004fa2:	aa16      	add	r2, sp, #88	; 0x58
1a004fa4:	f001 fc70 	bl	1a006888 <__d2b>
1a004fa8:	ea5f 5519 	movs.w	r5, r9, lsr #20
1a004fac:	4683      	mov	fp, r0
1a004fae:	f040 808d 	bne.w	1a0050cc <_dtoa_r+0x1e4>
1a004fb2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a004fb6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1a004fb8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
1a004fbc:	4445      	add	r5, r8
1a004fbe:	429d      	cmp	r5, r3
1a004fc0:	f2c0 829e 	blt.w	1a005500 <_dtoa_r+0x618>
1a004fc4:	4a7f      	ldr	r2, [pc, #508]	; (1a0051c4 <_dtoa_r+0x2dc>)
1a004fc6:	1b52      	subs	r2, r2, r5
1a004fc8:	fa09 f902 	lsl.w	r9, r9, r2
1a004fcc:	9a00      	ldr	r2, [sp, #0]
1a004fce:	f205 4312 	addw	r3, r5, #1042	; 0x412
1a004fd2:	fa22 f003 	lsr.w	r0, r2, r3
1a004fd6:	ea49 0000 	orr.w	r0, r9, r0
1a004fda:	f7fd fd51 	bl	1a002a80 <__aeabi_ui2d>
1a004fde:	2301      	movs	r3, #1
1a004fe0:	3d01      	subs	r5, #1
1a004fe2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
1a004fe6:	930f      	str	r3, [sp, #60]	; 0x3c
1a004fe8:	2200      	movs	r2, #0
1a004fea:	4b77      	ldr	r3, [pc, #476]	; (1a0051c8 <_dtoa_r+0x2e0>)
1a004fec:	f7fd fc0a 	bl	1a002804 <__aeabi_dsub>
1a004ff0:	a36b      	add	r3, pc, #428	; (adr r3, 1a0051a0 <_dtoa_r+0x2b8>)
1a004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004ff6:	f7fd fe1f 	bl	1a002c38 <__aeabi_dmul>
1a004ffa:	a36b      	add	r3, pc, #428	; (adr r3, 1a0051a8 <_dtoa_r+0x2c0>)
1a004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005000:	f7fd fc02 	bl	1a002808 <__adddf3>
1a005004:	4606      	mov	r6, r0
1a005006:	4628      	mov	r0, r5
1a005008:	460f      	mov	r7, r1
1a00500a:	f7fd fd49 	bl	1a002aa0 <__aeabi_i2d>
1a00500e:	a368      	add	r3, pc, #416	; (adr r3, 1a0051b0 <_dtoa_r+0x2c8>)
1a005010:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005014:	f7fd fe10 	bl	1a002c38 <__aeabi_dmul>
1a005018:	4602      	mov	r2, r0
1a00501a:	460b      	mov	r3, r1
1a00501c:	4630      	mov	r0, r6
1a00501e:	4639      	mov	r1, r7
1a005020:	f7fd fbf2 	bl	1a002808 <__adddf3>
1a005024:	4606      	mov	r6, r0
1a005026:	460f      	mov	r7, r1
1a005028:	f002 f974 	bl	1a007314 <__aeabi_d2iz>
1a00502c:	4639      	mov	r1, r7
1a00502e:	9005      	str	r0, [sp, #20]
1a005030:	2200      	movs	r2, #0
1a005032:	4630      	mov	r0, r6
1a005034:	2300      	movs	r3, #0
1a005036:	f002 f945 	bl	1a0072c4 <__aeabi_dcmplt>
1a00503a:	2800      	cmp	r0, #0
1a00503c:	f040 81ab 	bne.w	1a005396 <_dtoa_r+0x4ae>
1a005040:	9b05      	ldr	r3, [sp, #20]
1a005042:	2b16      	cmp	r3, #22
1a005044:	f200 81a4 	bhi.w	1a005390 <_dtoa_r+0x4a8>
1a005048:	9a05      	ldr	r2, [sp, #20]
1a00504a:	4b60      	ldr	r3, [pc, #384]	; (1a0051cc <_dtoa_r+0x2e4>)
1a00504c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005050:	e9d3 0100 	ldrd	r0, r1, [r3]
1a005054:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005058:	f002 f952 	bl	1a007300 <__aeabi_dcmpgt>
1a00505c:	2800      	cmp	r0, #0
1a00505e:	f000 8255 	beq.w	1a00550c <_dtoa_r+0x624>
1a005062:	9b05      	ldr	r3, [sp, #20]
1a005064:	3b01      	subs	r3, #1
1a005066:	9305      	str	r3, [sp, #20]
1a005068:	2300      	movs	r3, #0
1a00506a:	930d      	str	r3, [sp, #52]	; 0x34
1a00506c:	ebc5 0508 	rsb	r5, r5, r8
1a005070:	1e6b      	subs	r3, r5, #1
1a005072:	9306      	str	r3, [sp, #24]
1a005074:	f100 81a6 	bmi.w	1a0053c4 <_dtoa_r+0x4dc>
1a005078:	2300      	movs	r3, #0
1a00507a:	9307      	str	r3, [sp, #28]
1a00507c:	9b05      	ldr	r3, [sp, #20]
1a00507e:	2b00      	cmp	r3, #0
1a005080:	f2c0 8197 	blt.w	1a0053b2 <_dtoa_r+0x4ca>
1a005084:	9a06      	ldr	r2, [sp, #24]
1a005086:	930c      	str	r3, [sp, #48]	; 0x30
1a005088:	4611      	mov	r1, r2
1a00508a:	4419      	add	r1, r3
1a00508c:	2300      	movs	r3, #0
1a00508e:	9106      	str	r1, [sp, #24]
1a005090:	930a      	str	r3, [sp, #40]	; 0x28
1a005092:	9b03      	ldr	r3, [sp, #12]
1a005094:	2b09      	cmp	r3, #9
1a005096:	d82b      	bhi.n	1a0050f0 <_dtoa_r+0x208>
1a005098:	2b05      	cmp	r3, #5
1a00509a:	f340 8673 	ble.w	1a005d84 <_dtoa_r+0xe9c>
1a00509e:	3b04      	subs	r3, #4
1a0050a0:	9303      	str	r3, [sp, #12]
1a0050a2:	2700      	movs	r7, #0
1a0050a4:	9b03      	ldr	r3, [sp, #12]
1a0050a6:	3b02      	subs	r3, #2
1a0050a8:	2b03      	cmp	r3, #3
1a0050aa:	f200 8651 	bhi.w	1a005d50 <_dtoa_r+0xe68>
1a0050ae:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0050b2:	03d1      	.short	0x03d1
1a0050b4:	02b603c4 	.word	0x02b603c4
1a0050b8:	0666      	.short	0x0666
1a0050ba:	4b41      	ldr	r3, [pc, #260]	; (1a0051c0 <_dtoa_r+0x2d8>)
1a0050bc:	4a44      	ldr	r2, [pc, #272]	; (1a0051d0 <_dtoa_r+0x2e8>)
1a0050be:	f3c9 0013 	ubfx	r0, r9, #0, #20
1a0050c2:	2800      	cmp	r0, #0
1a0050c4:	bf14      	ite	ne
1a0050c6:	4618      	movne	r0, r3
1a0050c8:	4610      	moveq	r0, r2
1a0050ca:	e750      	b.n	1a004f6e <_dtoa_r+0x86>
1a0050cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a0050d0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
1a0050d4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
1a0050d8:	4630      	mov	r0, r6
1a0050da:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1a0050de:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
1a0050e2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a0050e6:	e77f      	b.n	1a004fe8 <_dtoa_r+0x100>
1a0050e8:	483a      	ldr	r0, [pc, #232]	; (1a0051d4 <_dtoa_r+0x2ec>)
1a0050ea:	e734      	b.n	1a004f56 <_dtoa_r+0x6e>
1a0050ec:	1cc3      	adds	r3, r0, #3
1a0050ee:	e747      	b.n	1a004f80 <_dtoa_r+0x98>
1a0050f0:	2100      	movs	r1, #0
1a0050f2:	6461      	str	r1, [r4, #68]	; 0x44
1a0050f4:	4620      	mov	r0, r4
1a0050f6:	468a      	mov	sl, r1
1a0050f8:	9103      	str	r1, [sp, #12]
1a0050fa:	f001 f92d 	bl	1a006358 <_Balloc>
1a0050fe:	f04f 33ff 	mov.w	r3, #4294967295
1a005102:	9308      	str	r3, [sp, #32]
1a005104:	930e      	str	r3, [sp, #56]	; 0x38
1a005106:	2301      	movs	r3, #1
1a005108:	9009      	str	r0, [sp, #36]	; 0x24
1a00510a:	6420      	str	r0, [r4, #64]	; 0x40
1a00510c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00510e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a005110:	2b00      	cmp	r3, #0
1a005112:	f2c0 80d3 	blt.w	1a0052bc <_dtoa_r+0x3d4>
1a005116:	9a05      	ldr	r2, [sp, #20]
1a005118:	2a0e      	cmp	r2, #14
1a00511a:	f300 80cf 	bgt.w	1a0052bc <_dtoa_r+0x3d4>
1a00511e:	4b2b      	ldr	r3, [pc, #172]	; (1a0051cc <_dtoa_r+0x2e4>)
1a005120:	f1ba 0f00 	cmp.w	sl, #0
1a005124:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005128:	e9d3 8900 	ldrd	r8, r9, [r3]
1a00512c:	f2c0 8395 	blt.w	1a00585a <_dtoa_r+0x972>
1a005130:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005134:	4642      	mov	r2, r8
1a005136:	464b      	mov	r3, r9
1a005138:	4630      	mov	r0, r6
1a00513a:	4639      	mov	r1, r7
1a00513c:	f7fd fea6 	bl	1a002e8c <__aeabi_ddiv>
1a005140:	f002 f8e8 	bl	1a007314 <__aeabi_d2iz>
1a005144:	4682      	mov	sl, r0
1a005146:	f7fd fcab 	bl	1a002aa0 <__aeabi_i2d>
1a00514a:	4642      	mov	r2, r8
1a00514c:	464b      	mov	r3, r9
1a00514e:	f7fd fd73 	bl	1a002c38 <__aeabi_dmul>
1a005152:	460b      	mov	r3, r1
1a005154:	4602      	mov	r2, r0
1a005156:	4639      	mov	r1, r7
1a005158:	4630      	mov	r0, r6
1a00515a:	f7fd fb53 	bl	1a002804 <__aeabi_dsub>
1a00515e:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a005160:	f10a 0330 	add.w	r3, sl, #48	; 0x30
1a005164:	702b      	strb	r3, [r5, #0]
1a005166:	9b08      	ldr	r3, [sp, #32]
1a005168:	2b01      	cmp	r3, #1
1a00516a:	4606      	mov	r6, r0
1a00516c:	460f      	mov	r7, r1
1a00516e:	f105 0501 	add.w	r5, r5, #1
1a005172:	d063      	beq.n	1a00523c <_dtoa_r+0x354>
1a005174:	2200      	movs	r2, #0
1a005176:	4b18      	ldr	r3, [pc, #96]	; (1a0051d8 <_dtoa_r+0x2f0>)
1a005178:	f7fd fd5e 	bl	1a002c38 <__aeabi_dmul>
1a00517c:	2200      	movs	r2, #0
1a00517e:	2300      	movs	r3, #0
1a005180:	4606      	mov	r6, r0
1a005182:	460f      	mov	r7, r1
1a005184:	f002 f894 	bl	1a0072b0 <__aeabi_dcmpeq>
1a005188:	2800      	cmp	r0, #0
1a00518a:	f040 8084 	bne.w	1a005296 <_dtoa_r+0x3ae>
1a00518e:	f8cd b000 	str.w	fp, [sp]
1a005192:	9403      	str	r4, [sp, #12]
1a005194:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a005198:	9c08      	ldr	r4, [sp, #32]
1a00519a:	e02a      	b.n	1a0051f2 <_dtoa_r+0x30a>
1a00519c:	f3af 8000 	nop.w
1a0051a0:	636f4361 	.word	0x636f4361
1a0051a4:	3fd287a7 	.word	0x3fd287a7
1a0051a8:	8b60c8b3 	.word	0x8b60c8b3
1a0051ac:	3fc68a28 	.word	0x3fc68a28
1a0051b0:	509f79fb 	.word	0x509f79fb
1a0051b4:	3fd34413 	.word	0x3fd34413
1a0051b8:	7ff00000 	.word	0x7ff00000
1a0051bc:	1a00798d 	.word	0x1a00798d
1a0051c0:	1a0079ac 	.word	0x1a0079ac
1a0051c4:	fffffc0e 	.word	0xfffffc0e
1a0051c8:	3ff80000 	.word	0x3ff80000
1a0051cc:	1a0079d0 	.word	0x1a0079d0
1a0051d0:	1a0079a0 	.word	0x1a0079a0
1a0051d4:	1a00798c 	.word	0x1a00798c
1a0051d8:	40240000 	.word	0x40240000
1a0051dc:	f7fd fd2c 	bl	1a002c38 <__aeabi_dmul>
1a0051e0:	2200      	movs	r2, #0
1a0051e2:	2300      	movs	r3, #0
1a0051e4:	4606      	mov	r6, r0
1a0051e6:	460f      	mov	r7, r1
1a0051e8:	f002 f862 	bl	1a0072b0 <__aeabi_dcmpeq>
1a0051ec:	2800      	cmp	r0, #0
1a0051ee:	f040 83e4 	bne.w	1a0059ba <_dtoa_r+0xad2>
1a0051f2:	4642      	mov	r2, r8
1a0051f4:	464b      	mov	r3, r9
1a0051f6:	4630      	mov	r0, r6
1a0051f8:	4639      	mov	r1, r7
1a0051fa:	f7fd fe47 	bl	1a002e8c <__aeabi_ddiv>
1a0051fe:	f002 f889 	bl	1a007314 <__aeabi_d2iz>
1a005202:	4682      	mov	sl, r0
1a005204:	f7fd fc4c 	bl	1a002aa0 <__aeabi_i2d>
1a005208:	4642      	mov	r2, r8
1a00520a:	464b      	mov	r3, r9
1a00520c:	f7fd fd14 	bl	1a002c38 <__aeabi_dmul>
1a005210:	4602      	mov	r2, r0
1a005212:	460b      	mov	r3, r1
1a005214:	4630      	mov	r0, r6
1a005216:	4639      	mov	r1, r7
1a005218:	f7fd faf4 	bl	1a002804 <__aeabi_dsub>
1a00521c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
1a005220:	f805 eb01 	strb.w	lr, [r5], #1
1a005224:	ebcb 0e05 	rsb	lr, fp, r5
1a005228:	4574      	cmp	r4, lr
1a00522a:	4606      	mov	r6, r0
1a00522c:	460f      	mov	r7, r1
1a00522e:	f04f 0200 	mov.w	r2, #0
1a005232:	4bb7      	ldr	r3, [pc, #732]	; (1a005510 <_dtoa_r+0x628>)
1a005234:	d1d2      	bne.n	1a0051dc <_dtoa_r+0x2f4>
1a005236:	f8dd b000 	ldr.w	fp, [sp]
1a00523a:	9c03      	ldr	r4, [sp, #12]
1a00523c:	4632      	mov	r2, r6
1a00523e:	463b      	mov	r3, r7
1a005240:	4630      	mov	r0, r6
1a005242:	4639      	mov	r1, r7
1a005244:	f7fd fae0 	bl	1a002808 <__adddf3>
1a005248:	4606      	mov	r6, r0
1a00524a:	460f      	mov	r7, r1
1a00524c:	4640      	mov	r0, r8
1a00524e:	4649      	mov	r1, r9
1a005250:	4632      	mov	r2, r6
1a005252:	463b      	mov	r3, r7
1a005254:	f002 f836 	bl	1a0072c4 <__aeabi_dcmplt>
1a005258:	b948      	cbnz	r0, 1a00526e <_dtoa_r+0x386>
1a00525a:	4640      	mov	r0, r8
1a00525c:	4649      	mov	r1, r9
1a00525e:	4632      	mov	r2, r6
1a005260:	463b      	mov	r3, r7
1a005262:	f002 f825 	bl	1a0072b0 <__aeabi_dcmpeq>
1a005266:	b1b0      	cbz	r0, 1a005296 <_dtoa_r+0x3ae>
1a005268:	f01a 0f01 	tst.w	sl, #1
1a00526c:	d013      	beq.n	1a005296 <_dtoa_r+0x3ae>
1a00526e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a005272:	9909      	ldr	r1, [sp, #36]	; 0x24
1a005274:	1e6b      	subs	r3, r5, #1
1a005276:	e004      	b.n	1a005282 <_dtoa_r+0x39a>
1a005278:	428b      	cmp	r3, r1
1a00527a:	f000 8448 	beq.w	1a005b0e <_dtoa_r+0xc26>
1a00527e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
1a005282:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
1a005286:	f103 0501 	add.w	r5, r3, #1
1a00528a:	461a      	mov	r2, r3
1a00528c:	d0f4      	beq.n	1a005278 <_dtoa_r+0x390>
1a00528e:	f108 0301 	add.w	r3, r8, #1
1a005292:	b2db      	uxtb	r3, r3
1a005294:	7013      	strb	r3, [r2, #0]
1a005296:	4620      	mov	r0, r4
1a005298:	4659      	mov	r1, fp
1a00529a:	f001 f883 	bl	1a0063a4 <_Bfree>
1a00529e:	2200      	movs	r2, #0
1a0052a0:	9b05      	ldr	r3, [sp, #20]
1a0052a2:	702a      	strb	r2, [r5, #0]
1a0052a4:	9a04      	ldr	r2, [sp, #16]
1a0052a6:	3301      	adds	r3, #1
1a0052a8:	6013      	str	r3, [r2, #0]
1a0052aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a0052ac:	2b00      	cmp	r3, #0
1a0052ae:	f000 834b 	beq.w	1a005948 <_dtoa_r+0xa60>
1a0052b2:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0052b4:	601d      	str	r5, [r3, #0]
1a0052b6:	b019      	add	sp, #100	; 0x64
1a0052b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0052bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0052be:	2a00      	cmp	r2, #0
1a0052c0:	f000 8085 	beq.w	1a0053ce <_dtoa_r+0x4e6>
1a0052c4:	9a03      	ldr	r2, [sp, #12]
1a0052c6:	2a01      	cmp	r2, #1
1a0052c8:	f340 830a 	ble.w	1a0058e0 <_dtoa_r+0x9f8>
1a0052cc:	9b08      	ldr	r3, [sp, #32]
1a0052ce:	1e5f      	subs	r7, r3, #1
1a0052d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0052d2:	42bb      	cmp	r3, r7
1a0052d4:	f2c0 83a6 	blt.w	1a005a24 <_dtoa_r+0xb3c>
1a0052d8:	1bdf      	subs	r7, r3, r7
1a0052da:	9b08      	ldr	r3, [sp, #32]
1a0052dc:	2b00      	cmp	r3, #0
1a0052de:	f2c0 84a4 	blt.w	1a005c2a <_dtoa_r+0xd42>
1a0052e2:	9d07      	ldr	r5, [sp, #28]
1a0052e4:	9b08      	ldr	r3, [sp, #32]
1a0052e6:	9a07      	ldr	r2, [sp, #28]
1a0052e8:	441a      	add	r2, r3
1a0052ea:	9207      	str	r2, [sp, #28]
1a0052ec:	9a06      	ldr	r2, [sp, #24]
1a0052ee:	4620      	mov	r0, r4
1a0052f0:	441a      	add	r2, r3
1a0052f2:	2101      	movs	r1, #1
1a0052f4:	9206      	str	r2, [sp, #24]
1a0052f6:	f001 f8ef 	bl	1a0064d8 <__i2b>
1a0052fa:	4606      	mov	r6, r0
1a0052fc:	b165      	cbz	r5, 1a005318 <_dtoa_r+0x430>
1a0052fe:	9906      	ldr	r1, [sp, #24]
1a005300:	2900      	cmp	r1, #0
1a005302:	460b      	mov	r3, r1
1a005304:	dd08      	ble.n	1a005318 <_dtoa_r+0x430>
1a005306:	42a9      	cmp	r1, r5
1a005308:	9a07      	ldr	r2, [sp, #28]
1a00530a:	bfa8      	it	ge
1a00530c:	462b      	movge	r3, r5
1a00530e:	1ad2      	subs	r2, r2, r3
1a005310:	1aed      	subs	r5, r5, r3
1a005312:	1acb      	subs	r3, r1, r3
1a005314:	9207      	str	r2, [sp, #28]
1a005316:	9306      	str	r3, [sp, #24]
1a005318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00531a:	2b00      	cmp	r3, #0
1a00531c:	dd1a      	ble.n	1a005354 <_dtoa_r+0x46c>
1a00531e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005320:	2b00      	cmp	r3, #0
1a005322:	f000 8378 	beq.w	1a005a16 <_dtoa_r+0xb2e>
1a005326:	2f00      	cmp	r7, #0
1a005328:	dd10      	ble.n	1a00534c <_dtoa_r+0x464>
1a00532a:	4631      	mov	r1, r6
1a00532c:	463a      	mov	r2, r7
1a00532e:	4620      	mov	r0, r4
1a005330:	f001 f976 	bl	1a006620 <__pow5mult>
1a005334:	4606      	mov	r6, r0
1a005336:	465a      	mov	r2, fp
1a005338:	4631      	mov	r1, r6
1a00533a:	4620      	mov	r0, r4
1a00533c:	f001 f8d6 	bl	1a0064ec <__multiply>
1a005340:	4659      	mov	r1, fp
1a005342:	4680      	mov	r8, r0
1a005344:	4620      	mov	r0, r4
1a005346:	f001 f82d 	bl	1a0063a4 <_Bfree>
1a00534a:	46c3      	mov	fp, r8
1a00534c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00534e:	1bda      	subs	r2, r3, r7
1a005350:	f040 82a5 	bne.w	1a00589e <_dtoa_r+0x9b6>
1a005354:	4620      	mov	r0, r4
1a005356:	2101      	movs	r1, #1
1a005358:	f001 f8be 	bl	1a0064d8 <__i2b>
1a00535c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00535e:	2b00      	cmp	r3, #0
1a005360:	4680      	mov	r8, r0
1a005362:	dd38      	ble.n	1a0053d6 <_dtoa_r+0x4ee>
1a005364:	4601      	mov	r1, r0
1a005366:	461a      	mov	r2, r3
1a005368:	4620      	mov	r0, r4
1a00536a:	f001 f959 	bl	1a006620 <__pow5mult>
1a00536e:	9b03      	ldr	r3, [sp, #12]
1a005370:	2b01      	cmp	r3, #1
1a005372:	4680      	mov	r8, r0
1a005374:	f340 8299 	ble.w	1a0058aa <_dtoa_r+0x9c2>
1a005378:	f04f 0900 	mov.w	r9, #0
1a00537c:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a005380:	eb08 0383 	add.w	r3, r8, r3, lsl #2
1a005384:	6918      	ldr	r0, [r3, #16]
1a005386:	f001 f859 	bl	1a00643c <__hi0bits>
1a00538a:	f1c0 0020 	rsb	r0, r0, #32
1a00538e:	e02c      	b.n	1a0053ea <_dtoa_r+0x502>
1a005390:	2301      	movs	r3, #1
1a005392:	930d      	str	r3, [sp, #52]	; 0x34
1a005394:	e66a      	b.n	1a00506c <_dtoa_r+0x184>
1a005396:	9805      	ldr	r0, [sp, #20]
1a005398:	f7fd fb82 	bl	1a002aa0 <__aeabi_i2d>
1a00539c:	4632      	mov	r2, r6
1a00539e:	463b      	mov	r3, r7
1a0053a0:	f001 ff86 	bl	1a0072b0 <__aeabi_dcmpeq>
1a0053a4:	2800      	cmp	r0, #0
1a0053a6:	f47f ae4b 	bne.w	1a005040 <_dtoa_r+0x158>
1a0053aa:	9b05      	ldr	r3, [sp, #20]
1a0053ac:	3b01      	subs	r3, #1
1a0053ae:	9305      	str	r3, [sp, #20]
1a0053b0:	e646      	b.n	1a005040 <_dtoa_r+0x158>
1a0053b2:	9a07      	ldr	r2, [sp, #28]
1a0053b4:	9b05      	ldr	r3, [sp, #20]
1a0053b6:	1ad2      	subs	r2, r2, r3
1a0053b8:	425b      	negs	r3, r3
1a0053ba:	930a      	str	r3, [sp, #40]	; 0x28
1a0053bc:	2300      	movs	r3, #0
1a0053be:	9207      	str	r2, [sp, #28]
1a0053c0:	930c      	str	r3, [sp, #48]	; 0x30
1a0053c2:	e666      	b.n	1a005092 <_dtoa_r+0x1aa>
1a0053c4:	425b      	negs	r3, r3
1a0053c6:	9307      	str	r3, [sp, #28]
1a0053c8:	2300      	movs	r3, #0
1a0053ca:	9306      	str	r3, [sp, #24]
1a0053cc:	e656      	b.n	1a00507c <_dtoa_r+0x194>
1a0053ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0053d0:	9d07      	ldr	r5, [sp, #28]
1a0053d2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1a0053d4:	e792      	b.n	1a0052fc <_dtoa_r+0x414>
1a0053d6:	9b03      	ldr	r3, [sp, #12]
1a0053d8:	2b01      	cmp	r3, #1
1a0053da:	f340 82b8 	ble.w	1a00594e <_dtoa_r+0xa66>
1a0053de:	f04f 0900 	mov.w	r9, #0
1a0053e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0053e4:	2b00      	cmp	r3, #0
1a0053e6:	d1c9      	bne.n	1a00537c <_dtoa_r+0x494>
1a0053e8:	2001      	movs	r0, #1
1a0053ea:	9b06      	ldr	r3, [sp, #24]
1a0053ec:	4418      	add	r0, r3
1a0053ee:	f010 001f 	ands.w	r0, r0, #31
1a0053f2:	f000 8083 	beq.w	1a0054fc <_dtoa_r+0x614>
1a0053f6:	f1c0 0320 	rsb	r3, r0, #32
1a0053fa:	2b04      	cmp	r3, #4
1a0053fc:	f340 84b9 	ble.w	1a005d72 <_dtoa_r+0xe8a>
1a005400:	f1c0 001c 	rsb	r0, r0, #28
1a005404:	9b07      	ldr	r3, [sp, #28]
1a005406:	4403      	add	r3, r0
1a005408:	9307      	str	r3, [sp, #28]
1a00540a:	9b06      	ldr	r3, [sp, #24]
1a00540c:	4403      	add	r3, r0
1a00540e:	4405      	add	r5, r0
1a005410:	9306      	str	r3, [sp, #24]
1a005412:	9b07      	ldr	r3, [sp, #28]
1a005414:	2b00      	cmp	r3, #0
1a005416:	dd05      	ble.n	1a005424 <_dtoa_r+0x53c>
1a005418:	4659      	mov	r1, fp
1a00541a:	461a      	mov	r2, r3
1a00541c:	4620      	mov	r0, r4
1a00541e:	f001 f94f 	bl	1a0066c0 <__lshift>
1a005422:	4683      	mov	fp, r0
1a005424:	9b06      	ldr	r3, [sp, #24]
1a005426:	2b00      	cmp	r3, #0
1a005428:	dd05      	ble.n	1a005436 <_dtoa_r+0x54e>
1a00542a:	4641      	mov	r1, r8
1a00542c:	461a      	mov	r2, r3
1a00542e:	4620      	mov	r0, r4
1a005430:	f001 f946 	bl	1a0066c0 <__lshift>
1a005434:	4680      	mov	r8, r0
1a005436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a005438:	2b00      	cmp	r3, #0
1a00543a:	f040 826a 	bne.w	1a005912 <_dtoa_r+0xa2a>
1a00543e:	9b08      	ldr	r3, [sp, #32]
1a005440:	2b00      	cmp	r3, #0
1a005442:	f340 8297 	ble.w	1a005974 <_dtoa_r+0xa8c>
1a005446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005448:	2b00      	cmp	r3, #0
1a00544a:	d171      	bne.n	1a005530 <_dtoa_r+0x648>
1a00544c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
1a005450:	9f08      	ldr	r7, [sp, #32]
1a005452:	464d      	mov	r5, r9
1a005454:	e002      	b.n	1a00545c <_dtoa_r+0x574>
1a005456:	f000 ffaf 	bl	1a0063b8 <__multadd>
1a00545a:	4683      	mov	fp, r0
1a00545c:	4641      	mov	r1, r8
1a00545e:	4658      	mov	r0, fp
1a005460:	f7ff fcaa 	bl	1a004db8 <quorem>
1a005464:	f100 0c30 	add.w	ip, r0, #48	; 0x30
1a005468:	f805 cb01 	strb.w	ip, [r5], #1
1a00546c:	ebc9 0305 	rsb	r3, r9, r5
1a005470:	42bb      	cmp	r3, r7
1a005472:	4620      	mov	r0, r4
1a005474:	4659      	mov	r1, fp
1a005476:	f04f 020a 	mov.w	r2, #10
1a00547a:	f04f 0300 	mov.w	r3, #0
1a00547e:	dbea      	blt.n	1a005456 <_dtoa_r+0x56e>
1a005480:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005482:	9a08      	ldr	r2, [sp, #32]
1a005484:	2a01      	cmp	r2, #1
1a005486:	bfac      	ite	ge
1a005488:	189b      	addge	r3, r3, r2
1a00548a:	3301      	addlt	r3, #1
1a00548c:	461d      	mov	r5, r3
1a00548e:	f04f 0a00 	mov.w	sl, #0
1a005492:	4659      	mov	r1, fp
1a005494:	2201      	movs	r2, #1
1a005496:	4620      	mov	r0, r4
1a005498:	f8cd c000 	str.w	ip, [sp]
1a00549c:	f001 f910 	bl	1a0066c0 <__lshift>
1a0054a0:	4641      	mov	r1, r8
1a0054a2:	4683      	mov	fp, r0
1a0054a4:	f001 f962 	bl	1a00676c <__mcmp>
1a0054a8:	2800      	cmp	r0, #0
1a0054aa:	f8dd c000 	ldr.w	ip, [sp]
1a0054ae:	f340 82ef 	ble.w	1a005a90 <_dtoa_r+0xba8>
1a0054b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a0054b6:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0054b8:	1e6b      	subs	r3, r5, #1
1a0054ba:	e004      	b.n	1a0054c6 <_dtoa_r+0x5de>
1a0054bc:	428b      	cmp	r3, r1
1a0054be:	f000 8275 	beq.w	1a0059ac <_dtoa_r+0xac4>
1a0054c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0054c6:	2a39      	cmp	r2, #57	; 0x39
1a0054c8:	f103 0501 	add.w	r5, r3, #1
1a0054cc:	d0f6      	beq.n	1a0054bc <_dtoa_r+0x5d4>
1a0054ce:	3201      	adds	r2, #1
1a0054d0:	701a      	strb	r2, [r3, #0]
1a0054d2:	4641      	mov	r1, r8
1a0054d4:	4620      	mov	r0, r4
1a0054d6:	f000 ff65 	bl	1a0063a4 <_Bfree>
1a0054da:	2e00      	cmp	r6, #0
1a0054dc:	f43f aedb 	beq.w	1a005296 <_dtoa_r+0x3ae>
1a0054e0:	f1ba 0f00 	cmp.w	sl, #0
1a0054e4:	d005      	beq.n	1a0054f2 <_dtoa_r+0x60a>
1a0054e6:	45b2      	cmp	sl, r6
1a0054e8:	d003      	beq.n	1a0054f2 <_dtoa_r+0x60a>
1a0054ea:	4651      	mov	r1, sl
1a0054ec:	4620      	mov	r0, r4
1a0054ee:	f000 ff59 	bl	1a0063a4 <_Bfree>
1a0054f2:	4631      	mov	r1, r6
1a0054f4:	4620      	mov	r0, r4
1a0054f6:	f000 ff55 	bl	1a0063a4 <_Bfree>
1a0054fa:	e6cc      	b.n	1a005296 <_dtoa_r+0x3ae>
1a0054fc:	201c      	movs	r0, #28
1a0054fe:	e781      	b.n	1a005404 <_dtoa_r+0x51c>
1a005500:	4b04      	ldr	r3, [pc, #16]	; (1a005514 <_dtoa_r+0x62c>)
1a005502:	9a00      	ldr	r2, [sp, #0]
1a005504:	1b5b      	subs	r3, r3, r5
1a005506:	fa02 f003 	lsl.w	r0, r2, r3
1a00550a:	e566      	b.n	1a004fda <_dtoa_r+0xf2>
1a00550c:	900d      	str	r0, [sp, #52]	; 0x34
1a00550e:	e5ad      	b.n	1a00506c <_dtoa_r+0x184>
1a005510:	40240000 	.word	0x40240000
1a005514:	fffffbee 	.word	0xfffffbee
1a005518:	4631      	mov	r1, r6
1a00551a:	2300      	movs	r3, #0
1a00551c:	4620      	mov	r0, r4
1a00551e:	220a      	movs	r2, #10
1a005520:	f000 ff4a 	bl	1a0063b8 <__multadd>
1a005524:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005526:	2b00      	cmp	r3, #0
1a005528:	4606      	mov	r6, r0
1a00552a:	f340 840b 	ble.w	1a005d44 <_dtoa_r+0xe5c>
1a00552e:	9308      	str	r3, [sp, #32]
1a005530:	2d00      	cmp	r5, #0
1a005532:	dd05      	ble.n	1a005540 <_dtoa_r+0x658>
1a005534:	4631      	mov	r1, r6
1a005536:	462a      	mov	r2, r5
1a005538:	4620      	mov	r0, r4
1a00553a:	f001 f8c1 	bl	1a0066c0 <__lshift>
1a00553e:	4606      	mov	r6, r0
1a005540:	f1b9 0f00 	cmp.w	r9, #0
1a005544:	f040 82ed 	bne.w	1a005b22 <_dtoa_r+0xc3a>
1a005548:	46b1      	mov	r9, r6
1a00554a:	9b08      	ldr	r3, [sp, #32]
1a00554c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00554e:	3b01      	subs	r3, #1
1a005550:	18d3      	adds	r3, r2, r3
1a005552:	9308      	str	r3, [sp, #32]
1a005554:	9b00      	ldr	r3, [sp, #0]
1a005556:	f003 0301 	and.w	r3, r3, #1
1a00555a:	930a      	str	r3, [sp, #40]	; 0x28
1a00555c:	4617      	mov	r7, r2
1a00555e:	4641      	mov	r1, r8
1a005560:	4658      	mov	r0, fp
1a005562:	f7ff fc29 	bl	1a004db8 <quorem>
1a005566:	4631      	mov	r1, r6
1a005568:	4605      	mov	r5, r0
1a00556a:	4658      	mov	r0, fp
1a00556c:	f001 f8fe 	bl	1a00676c <__mcmp>
1a005570:	464a      	mov	r2, r9
1a005572:	4682      	mov	sl, r0
1a005574:	4641      	mov	r1, r8
1a005576:	4620      	mov	r0, r4
1a005578:	f001 f91c 	bl	1a0067b4 <__mdiff>
1a00557c:	68c2      	ldr	r2, [r0, #12]
1a00557e:	4603      	mov	r3, r0
1a005580:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a005584:	2a00      	cmp	r2, #0
1a005586:	f040 81ba 	bne.w	1a0058fe <_dtoa_r+0xa16>
1a00558a:	4619      	mov	r1, r3
1a00558c:	4658      	mov	r0, fp
1a00558e:	f8cd c01c 	str.w	ip, [sp, #28]
1a005592:	9306      	str	r3, [sp, #24]
1a005594:	f001 f8ea 	bl	1a00676c <__mcmp>
1a005598:	9b06      	ldr	r3, [sp, #24]
1a00559a:	9000      	str	r0, [sp, #0]
1a00559c:	4619      	mov	r1, r3
1a00559e:	4620      	mov	r0, r4
1a0055a0:	f000 ff00 	bl	1a0063a4 <_Bfree>
1a0055a4:	9a00      	ldr	r2, [sp, #0]
1a0055a6:	f8dd c01c 	ldr.w	ip, [sp, #28]
1a0055aa:	b92a      	cbnz	r2, 1a0055b8 <_dtoa_r+0x6d0>
1a0055ac:	9b03      	ldr	r3, [sp, #12]
1a0055ae:	b91b      	cbnz	r3, 1a0055b8 <_dtoa_r+0x6d0>
1a0055b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0055b2:	2b00      	cmp	r3, #0
1a0055b4:	f000 83aa 	beq.w	1a005d0c <_dtoa_r+0xe24>
1a0055b8:	f1ba 0f00 	cmp.w	sl, #0
1a0055bc:	f2c0 824a 	blt.w	1a005a54 <_dtoa_r+0xb6c>
1a0055c0:	d105      	bne.n	1a0055ce <_dtoa_r+0x6e6>
1a0055c2:	9b03      	ldr	r3, [sp, #12]
1a0055c4:	b91b      	cbnz	r3, 1a0055ce <_dtoa_r+0x6e6>
1a0055c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0055c8:	2b00      	cmp	r3, #0
1a0055ca:	f000 8243 	beq.w	1a005a54 <_dtoa_r+0xb6c>
1a0055ce:	2a00      	cmp	r2, #0
1a0055d0:	f300 82bb 	bgt.w	1a005b4a <_dtoa_r+0xc62>
1a0055d4:	9b08      	ldr	r3, [sp, #32]
1a0055d6:	f887 c000 	strb.w	ip, [r7]
1a0055da:	f107 0a01 	add.w	sl, r7, #1
1a0055de:	429f      	cmp	r7, r3
1a0055e0:	4655      	mov	r5, sl
1a0055e2:	f000 82be 	beq.w	1a005b62 <_dtoa_r+0xc7a>
1a0055e6:	4659      	mov	r1, fp
1a0055e8:	220a      	movs	r2, #10
1a0055ea:	2300      	movs	r3, #0
1a0055ec:	4620      	mov	r0, r4
1a0055ee:	f000 fee3 	bl	1a0063b8 <__multadd>
1a0055f2:	454e      	cmp	r6, r9
1a0055f4:	4683      	mov	fp, r0
1a0055f6:	4631      	mov	r1, r6
1a0055f8:	4620      	mov	r0, r4
1a0055fa:	f04f 020a 	mov.w	r2, #10
1a0055fe:	f04f 0300 	mov.w	r3, #0
1a005602:	f000 8176 	beq.w	1a0058f2 <_dtoa_r+0xa0a>
1a005606:	f000 fed7 	bl	1a0063b8 <__multadd>
1a00560a:	4649      	mov	r1, r9
1a00560c:	4606      	mov	r6, r0
1a00560e:	220a      	movs	r2, #10
1a005610:	4620      	mov	r0, r4
1a005612:	2300      	movs	r3, #0
1a005614:	f000 fed0 	bl	1a0063b8 <__multadd>
1a005618:	4657      	mov	r7, sl
1a00561a:	4681      	mov	r9, r0
1a00561c:	e79f      	b.n	1a00555e <_dtoa_r+0x676>
1a00561e:	2301      	movs	r3, #1
1a005620:	930b      	str	r3, [sp, #44]	; 0x2c
1a005622:	f1ba 0f00 	cmp.w	sl, #0
1a005626:	f340 820c 	ble.w	1a005a42 <_dtoa_r+0xb5a>
1a00562a:	4656      	mov	r6, sl
1a00562c:	4655      	mov	r5, sl
1a00562e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a005632:	f8cd a020 	str.w	sl, [sp, #32]
1a005636:	2100      	movs	r1, #0
1a005638:	2e17      	cmp	r6, #23
1a00563a:	6461      	str	r1, [r4, #68]	; 0x44
1a00563c:	d90a      	bls.n	1a005654 <_dtoa_r+0x76c>
1a00563e:	2201      	movs	r2, #1
1a005640:	2304      	movs	r3, #4
1a005642:	005b      	lsls	r3, r3, #1
1a005644:	f103 0014 	add.w	r0, r3, #20
1a005648:	4286      	cmp	r6, r0
1a00564a:	4611      	mov	r1, r2
1a00564c:	f102 0201 	add.w	r2, r2, #1
1a005650:	d2f7      	bcs.n	1a005642 <_dtoa_r+0x75a>
1a005652:	6461      	str	r1, [r4, #68]	; 0x44
1a005654:	4620      	mov	r0, r4
1a005656:	f000 fe7f 	bl	1a006358 <_Balloc>
1a00565a:	2d0e      	cmp	r5, #14
1a00565c:	9009      	str	r0, [sp, #36]	; 0x24
1a00565e:	6420      	str	r0, [r4, #64]	; 0x40
1a005660:	f63f ad55 	bhi.w	1a00510e <_dtoa_r+0x226>
1a005664:	2f00      	cmp	r7, #0
1a005666:	f43f ad52 	beq.w	1a00510e <_dtoa_r+0x226>
1a00566a:	ed9d 7b00 	vldr	d7, [sp]
1a00566e:	9905      	ldr	r1, [sp, #20]
1a005670:	2900      	cmp	r1, #0
1a005672:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005676:	f340 8223 	ble.w	1a005ac0 <_dtoa_r+0xbd8>
1a00567a:	4bb7      	ldr	r3, [pc, #732]	; (1a005958 <_dtoa_r+0xa70>)
1a00567c:	f001 020f 	and.w	r2, r1, #15
1a005680:	110d      	asrs	r5, r1, #4
1a005682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005686:	06e9      	lsls	r1, r5, #27
1a005688:	e9d3 6700 	ldrd	r6, r7, [r3]
1a00568c:	f140 81d2 	bpl.w	1a005a34 <_dtoa_r+0xb4c>
1a005690:	4bb2      	ldr	r3, [pc, #712]	; (1a00595c <_dtoa_r+0xa74>)
1a005692:	ec51 0b17 	vmov	r0, r1, d7
1a005696:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a00569a:	f7fd fbf7 	bl	1a002e8c <__aeabi_ddiv>
1a00569e:	e9cd 0100 	strd	r0, r1, [sp]
1a0056a2:	f005 050f 	and.w	r5, r5, #15
1a0056a6:	f04f 0803 	mov.w	r8, #3
1a0056aa:	b18d      	cbz	r5, 1a0056d0 <_dtoa_r+0x7e8>
1a0056ac:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 1a00595c <_dtoa_r+0xa74>
1a0056b0:	4630      	mov	r0, r6
1a0056b2:	4639      	mov	r1, r7
1a0056b4:	07ea      	lsls	r2, r5, #31
1a0056b6:	d505      	bpl.n	1a0056c4 <_dtoa_r+0x7dc>
1a0056b8:	e9d9 2300 	ldrd	r2, r3, [r9]
1a0056bc:	f7fd fabc 	bl	1a002c38 <__aeabi_dmul>
1a0056c0:	f108 0801 	add.w	r8, r8, #1
1a0056c4:	106d      	asrs	r5, r5, #1
1a0056c6:	f109 0908 	add.w	r9, r9, #8
1a0056ca:	d1f3      	bne.n	1a0056b4 <_dtoa_r+0x7cc>
1a0056cc:	4606      	mov	r6, r0
1a0056ce:	460f      	mov	r7, r1
1a0056d0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0056d4:	4632      	mov	r2, r6
1a0056d6:	463b      	mov	r3, r7
1a0056d8:	f7fd fbd8 	bl	1a002e8c <__aeabi_ddiv>
1a0056dc:	e9cd 0100 	strd	r0, r1, [sp]
1a0056e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0056e2:	b143      	cbz	r3, 1a0056f6 <_dtoa_r+0x80e>
1a0056e4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0056e8:	2200      	movs	r2, #0
1a0056ea:	4b9d      	ldr	r3, [pc, #628]	; (1a005960 <_dtoa_r+0xa78>)
1a0056ec:	f001 fdea 	bl	1a0072c4 <__aeabi_dcmplt>
1a0056f0:	2800      	cmp	r0, #0
1a0056f2:	f040 82ae 	bne.w	1a005c52 <_dtoa_r+0xd6a>
1a0056f6:	4640      	mov	r0, r8
1a0056f8:	f7fd f9d2 	bl	1a002aa0 <__aeabi_i2d>
1a0056fc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005700:	f7fd fa9a 	bl	1a002c38 <__aeabi_dmul>
1a005704:	4b97      	ldr	r3, [pc, #604]	; (1a005964 <_dtoa_r+0xa7c>)
1a005706:	2200      	movs	r2, #0
1a005708:	f7fd f87e 	bl	1a002808 <__adddf3>
1a00570c:	9b08      	ldr	r3, [sp, #32]
1a00570e:	4606      	mov	r6, r0
1a005710:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005714:	2b00      	cmp	r3, #0
1a005716:	f000 8162 	beq.w	1a0059de <_dtoa_r+0xaf6>
1a00571a:	9b05      	ldr	r3, [sp, #20]
1a00571c:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a005720:	9314      	str	r3, [sp, #80]	; 0x50
1a005722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005724:	2b00      	cmp	r3, #0
1a005726:	f000 8223 	beq.w	1a005b70 <_dtoa_r+0xc88>
1a00572a:	4b8b      	ldr	r3, [pc, #556]	; (1a005958 <_dtoa_r+0xa70>)
1a00572c:	498e      	ldr	r1, [pc, #568]	; (1a005968 <_dtoa_r+0xa80>)
1a00572e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a005732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a005736:	2000      	movs	r0, #0
1a005738:	f7fd fba8 	bl	1a002e8c <__aeabi_ddiv>
1a00573c:	4632      	mov	r2, r6
1a00573e:	463b      	mov	r3, r7
1a005740:	f7fd f860 	bl	1a002804 <__aeabi_dsub>
1a005744:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005748:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00574c:	4639      	mov	r1, r7
1a00574e:	4630      	mov	r0, r6
1a005750:	f001 fde0 	bl	1a007314 <__aeabi_d2iz>
1a005754:	4605      	mov	r5, r0
1a005756:	f7fd f9a3 	bl	1a002aa0 <__aeabi_i2d>
1a00575a:	3530      	adds	r5, #48	; 0x30
1a00575c:	4602      	mov	r2, r0
1a00575e:	460b      	mov	r3, r1
1a005760:	4630      	mov	r0, r6
1a005762:	4639      	mov	r1, r7
1a005764:	f7fd f84e 	bl	1a002804 <__aeabi_dsub>
1a005768:	fa5f f885 	uxtb.w	r8, r5
1a00576c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00576e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a005772:	f885 8000 	strb.w	r8, [r5]
1a005776:	4606      	mov	r6, r0
1a005778:	460f      	mov	r7, r1
1a00577a:	3501      	adds	r5, #1
1a00577c:	f001 fda2 	bl	1a0072c4 <__aeabi_dcmplt>
1a005780:	2800      	cmp	r0, #0
1a005782:	f040 82a7 	bne.w	1a005cd4 <_dtoa_r+0xdec>
1a005786:	4632      	mov	r2, r6
1a005788:	463b      	mov	r3, r7
1a00578a:	2000      	movs	r0, #0
1a00578c:	4974      	ldr	r1, [pc, #464]	; (1a005960 <_dtoa_r+0xa78>)
1a00578e:	f7fd f839 	bl	1a002804 <__aeabi_dsub>
1a005792:	4602      	mov	r2, r0
1a005794:	460b      	mov	r3, r1
1a005796:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00579a:	f001 fdb1 	bl	1a007300 <__aeabi_dcmpgt>
1a00579e:	2800      	cmp	r0, #0
1a0057a0:	f040 82ad 	bne.w	1a005cfe <_dtoa_r+0xe16>
1a0057a4:	f1b9 0f01 	cmp.w	r9, #1
1a0057a8:	f340 8184 	ble.w	1a005ab4 <_dtoa_r+0xbcc>
1a0057ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0057ae:	f8cd b000 	str.w	fp, [sp]
1a0057b2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
1a0057b6:	4499      	add	r9, r3
1a0057b8:	46a0      	mov	r8, r4
1a0057ba:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
1a0057be:	e00d      	b.n	1a0057dc <_dtoa_r+0x8f4>
1a0057c0:	2000      	movs	r0, #0
1a0057c2:	4967      	ldr	r1, [pc, #412]	; (1a005960 <_dtoa_r+0xa78>)
1a0057c4:	f7fd f81e 	bl	1a002804 <__aeabi_dsub>
1a0057c8:	4652      	mov	r2, sl
1a0057ca:	465b      	mov	r3, fp
1a0057cc:	f001 fd7a 	bl	1a0072c4 <__aeabi_dcmplt>
1a0057d0:	2800      	cmp	r0, #0
1a0057d2:	f040 828f 	bne.w	1a005cf4 <_dtoa_r+0xe0c>
1a0057d6:	454d      	cmp	r5, r9
1a0057d8:	f000 8167 	beq.w	1a005aaa <_dtoa_r+0xbc2>
1a0057dc:	4650      	mov	r0, sl
1a0057de:	4659      	mov	r1, fp
1a0057e0:	2200      	movs	r2, #0
1a0057e2:	4b62      	ldr	r3, [pc, #392]	; (1a00596c <_dtoa_r+0xa84>)
1a0057e4:	f7fd fa28 	bl	1a002c38 <__aeabi_dmul>
1a0057e8:	2200      	movs	r2, #0
1a0057ea:	4b60      	ldr	r3, [pc, #384]	; (1a00596c <_dtoa_r+0xa84>)
1a0057ec:	4682      	mov	sl, r0
1a0057ee:	468b      	mov	fp, r1
1a0057f0:	4630      	mov	r0, r6
1a0057f2:	4639      	mov	r1, r7
1a0057f4:	f7fd fa20 	bl	1a002c38 <__aeabi_dmul>
1a0057f8:	460f      	mov	r7, r1
1a0057fa:	4606      	mov	r6, r0
1a0057fc:	f001 fd8a 	bl	1a007314 <__aeabi_d2iz>
1a005800:	4604      	mov	r4, r0
1a005802:	f7fd f94d 	bl	1a002aa0 <__aeabi_i2d>
1a005806:	4602      	mov	r2, r0
1a005808:	460b      	mov	r3, r1
1a00580a:	4630      	mov	r0, r6
1a00580c:	4639      	mov	r1, r7
1a00580e:	f7fc fff9 	bl	1a002804 <__aeabi_dsub>
1a005812:	3430      	adds	r4, #48	; 0x30
1a005814:	b2e4      	uxtb	r4, r4
1a005816:	4652      	mov	r2, sl
1a005818:	465b      	mov	r3, fp
1a00581a:	f805 4b01 	strb.w	r4, [r5], #1
1a00581e:	4606      	mov	r6, r0
1a005820:	460f      	mov	r7, r1
1a005822:	f001 fd4f 	bl	1a0072c4 <__aeabi_dcmplt>
1a005826:	4632      	mov	r2, r6
1a005828:	463b      	mov	r3, r7
1a00582a:	2800      	cmp	r0, #0
1a00582c:	d0c8      	beq.n	1a0057c0 <_dtoa_r+0x8d8>
1a00582e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005830:	f8dd b000 	ldr.w	fp, [sp]
1a005834:	9305      	str	r3, [sp, #20]
1a005836:	4644      	mov	r4, r8
1a005838:	e52d      	b.n	1a005296 <_dtoa_r+0x3ae>
1a00583a:	2300      	movs	r3, #0
1a00583c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00583e:	9b05      	ldr	r3, [sp, #20]
1a005840:	4453      	add	r3, sl
1a005842:	930e      	str	r3, [sp, #56]	; 0x38
1a005844:	3301      	adds	r3, #1
1a005846:	2b00      	cmp	r3, #0
1a005848:	9308      	str	r3, [sp, #32]
1a00584a:	f340 8101 	ble.w	1a005a50 <_dtoa_r+0xb68>
1a00584e:	9d08      	ldr	r5, [sp, #32]
1a005850:	462e      	mov	r6, r5
1a005852:	e6f0      	b.n	1a005636 <_dtoa_r+0x74e>
1a005854:	2300      	movs	r3, #0
1a005856:	930b      	str	r3, [sp, #44]	; 0x2c
1a005858:	e6e3      	b.n	1a005622 <_dtoa_r+0x73a>
1a00585a:	9b08      	ldr	r3, [sp, #32]
1a00585c:	2b00      	cmp	r3, #0
1a00585e:	f73f ac67 	bgt.w	1a005130 <_dtoa_r+0x248>
1a005862:	f040 80d4 	bne.w	1a005a0e <_dtoa_r+0xb26>
1a005866:	4640      	mov	r0, r8
1a005868:	2200      	movs	r2, #0
1a00586a:	4b41      	ldr	r3, [pc, #260]	; (1a005970 <_dtoa_r+0xa88>)
1a00586c:	4649      	mov	r1, r9
1a00586e:	f7fd f9e3 	bl	1a002c38 <__aeabi_dmul>
1a005872:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005876:	f001 fd39 	bl	1a0072ec <__aeabi_dcmpge>
1a00587a:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00587e:	4646      	mov	r6, r8
1a005880:	2800      	cmp	r0, #0
1a005882:	f000 808b 	beq.w	1a00599c <_dtoa_r+0xab4>
1a005886:	ea6f 030a 	mvn.w	r3, sl
1a00588a:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00588c:	9305      	str	r3, [sp, #20]
1a00588e:	4641      	mov	r1, r8
1a005890:	4620      	mov	r0, r4
1a005892:	f000 fd87 	bl	1a0063a4 <_Bfree>
1a005896:	2e00      	cmp	r6, #0
1a005898:	f47f ae2b 	bne.w	1a0054f2 <_dtoa_r+0x60a>
1a00589c:	e4fb      	b.n	1a005296 <_dtoa_r+0x3ae>
1a00589e:	4659      	mov	r1, fp
1a0058a0:	4620      	mov	r0, r4
1a0058a2:	f000 febd 	bl	1a006620 <__pow5mult>
1a0058a6:	4683      	mov	fp, r0
1a0058a8:	e554      	b.n	1a005354 <_dtoa_r+0x46c>
1a0058aa:	9b00      	ldr	r3, [sp, #0]
1a0058ac:	2b00      	cmp	r3, #0
1a0058ae:	f47f ad63 	bne.w	1a005378 <_dtoa_r+0x490>
1a0058b2:	9b01      	ldr	r3, [sp, #4]
1a0058b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a0058b8:	2b00      	cmp	r3, #0
1a0058ba:	f47f ad90 	bne.w	1a0053de <_dtoa_r+0x4f6>
1a0058be:	9b01      	ldr	r3, [sp, #4]
1a0058c0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
1a0058c4:	0d3f      	lsrs	r7, r7, #20
1a0058c6:	053f      	lsls	r7, r7, #20
1a0058c8:	2f00      	cmp	r7, #0
1a0058ca:	f000 821c 	beq.w	1a005d06 <_dtoa_r+0xe1e>
1a0058ce:	9b07      	ldr	r3, [sp, #28]
1a0058d0:	3301      	adds	r3, #1
1a0058d2:	9307      	str	r3, [sp, #28]
1a0058d4:	9b06      	ldr	r3, [sp, #24]
1a0058d6:	3301      	adds	r3, #1
1a0058d8:	9306      	str	r3, [sp, #24]
1a0058da:	f04f 0901 	mov.w	r9, #1
1a0058de:	e580      	b.n	1a0053e2 <_dtoa_r+0x4fa>
1a0058e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0058e2:	2a00      	cmp	r2, #0
1a0058e4:	f000 81a7 	beq.w	1a005c36 <_dtoa_r+0xd4e>
1a0058e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0058ec:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0058ee:	9d07      	ldr	r5, [sp, #28]
1a0058f0:	e4f9      	b.n	1a0052e6 <_dtoa_r+0x3fe>
1a0058f2:	f000 fd61 	bl	1a0063b8 <__multadd>
1a0058f6:	4657      	mov	r7, sl
1a0058f8:	4606      	mov	r6, r0
1a0058fa:	4681      	mov	r9, r0
1a0058fc:	e62f      	b.n	1a00555e <_dtoa_r+0x676>
1a0058fe:	4601      	mov	r1, r0
1a005900:	4620      	mov	r0, r4
1a005902:	f8cd c000 	str.w	ip, [sp]
1a005906:	f000 fd4d 	bl	1a0063a4 <_Bfree>
1a00590a:	2201      	movs	r2, #1
1a00590c:	f8dd c000 	ldr.w	ip, [sp]
1a005910:	e652      	b.n	1a0055b8 <_dtoa_r+0x6d0>
1a005912:	4658      	mov	r0, fp
1a005914:	4641      	mov	r1, r8
1a005916:	f000 ff29 	bl	1a00676c <__mcmp>
1a00591a:	2800      	cmp	r0, #0
1a00591c:	f6bf ad8f 	bge.w	1a00543e <_dtoa_r+0x556>
1a005920:	9f05      	ldr	r7, [sp, #20]
1a005922:	4659      	mov	r1, fp
1a005924:	2300      	movs	r3, #0
1a005926:	4620      	mov	r0, r4
1a005928:	220a      	movs	r2, #10
1a00592a:	3f01      	subs	r7, #1
1a00592c:	9705      	str	r7, [sp, #20]
1a00592e:	f000 fd43 	bl	1a0063b8 <__multadd>
1a005932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005934:	4683      	mov	fp, r0
1a005936:	2b00      	cmp	r3, #0
1a005938:	f47f adee 	bne.w	1a005518 <_dtoa_r+0x630>
1a00593c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00593e:	2b00      	cmp	r3, #0
1a005940:	f340 81f5 	ble.w	1a005d2e <_dtoa_r+0xe46>
1a005944:	9308      	str	r3, [sp, #32]
1a005946:	e581      	b.n	1a00544c <_dtoa_r+0x564>
1a005948:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00594a:	f7ff bb04 	b.w	1a004f56 <_dtoa_r+0x6e>
1a00594e:	9b00      	ldr	r3, [sp, #0]
1a005950:	2b00      	cmp	r3, #0
1a005952:	f47f ad44 	bne.w	1a0053de <_dtoa_r+0x4f6>
1a005956:	e7ac      	b.n	1a0058b2 <_dtoa_r+0x9ca>
1a005958:	1a0079d0 	.word	0x1a0079d0
1a00595c:	1a007a98 	.word	0x1a007a98
1a005960:	3ff00000 	.word	0x3ff00000
1a005964:	401c0000 	.word	0x401c0000
1a005968:	3fe00000 	.word	0x3fe00000
1a00596c:	40240000 	.word	0x40240000
1a005970:	40140000 	.word	0x40140000
1a005974:	9b03      	ldr	r3, [sp, #12]
1a005976:	2b02      	cmp	r3, #2
1a005978:	f77f ad65 	ble.w	1a005446 <_dtoa_r+0x55e>
1a00597c:	9b08      	ldr	r3, [sp, #32]
1a00597e:	2b00      	cmp	r3, #0
1a005980:	d181      	bne.n	1a005886 <_dtoa_r+0x99e>
1a005982:	4641      	mov	r1, r8
1a005984:	2205      	movs	r2, #5
1a005986:	4620      	mov	r0, r4
1a005988:	f000 fd16 	bl	1a0063b8 <__multadd>
1a00598c:	4680      	mov	r8, r0
1a00598e:	4641      	mov	r1, r8
1a005990:	4658      	mov	r0, fp
1a005992:	f000 feeb 	bl	1a00676c <__mcmp>
1a005996:	2800      	cmp	r0, #0
1a005998:	f77f af75 	ble.w	1a005886 <_dtoa_r+0x99e>
1a00599c:	9a05      	ldr	r2, [sp, #20]
1a00599e:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0059a0:	2331      	movs	r3, #49	; 0x31
1a0059a2:	3201      	adds	r2, #1
1a0059a4:	9205      	str	r2, [sp, #20]
1a0059a6:	700b      	strb	r3, [r1, #0]
1a0059a8:	1c4d      	adds	r5, r1, #1
1a0059aa:	e770      	b.n	1a00588e <_dtoa_r+0x9a6>
1a0059ac:	9a05      	ldr	r2, [sp, #20]
1a0059ae:	3201      	adds	r2, #1
1a0059b0:	9205      	str	r2, [sp, #20]
1a0059b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0059b4:	2331      	movs	r3, #49	; 0x31
1a0059b6:	7013      	strb	r3, [r2, #0]
1a0059b8:	e58b      	b.n	1a0054d2 <_dtoa_r+0x5ea>
1a0059ba:	f8dd b000 	ldr.w	fp, [sp]
1a0059be:	9c03      	ldr	r4, [sp, #12]
1a0059c0:	e469      	b.n	1a005296 <_dtoa_r+0x3ae>
1a0059c2:	4640      	mov	r0, r8
1a0059c4:	f7fd f86c 	bl	1a002aa0 <__aeabi_i2d>
1a0059c8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0059cc:	f7fd f934 	bl	1a002c38 <__aeabi_dmul>
1a0059d0:	2200      	movs	r2, #0
1a0059d2:	4bc2      	ldr	r3, [pc, #776]	; (1a005cdc <_dtoa_r+0xdf4>)
1a0059d4:	f7fc ff18 	bl	1a002808 <__adddf3>
1a0059d8:	4606      	mov	r6, r0
1a0059da:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0059de:	2200      	movs	r2, #0
1a0059e0:	4bbf      	ldr	r3, [pc, #764]	; (1a005ce0 <_dtoa_r+0xdf8>)
1a0059e2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0059e6:	f7fc ff0d 	bl	1a002804 <__aeabi_dsub>
1a0059ea:	4632      	mov	r2, r6
1a0059ec:	463b      	mov	r3, r7
1a0059ee:	4680      	mov	r8, r0
1a0059f0:	4689      	mov	r9, r1
1a0059f2:	f001 fc85 	bl	1a007300 <__aeabi_dcmpgt>
1a0059f6:	2800      	cmp	r0, #0
1a0059f8:	f040 80b6 	bne.w	1a005b68 <_dtoa_r+0xc80>
1a0059fc:	4632      	mov	r2, r6
1a0059fe:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a005a02:	4640      	mov	r0, r8
1a005a04:	4649      	mov	r1, r9
1a005a06:	f001 fc5d 	bl	1a0072c4 <__aeabi_dcmplt>
1a005a0a:	2800      	cmp	r0, #0
1a005a0c:	d052      	beq.n	1a005ab4 <_dtoa_r+0xbcc>
1a005a0e:	f04f 0800 	mov.w	r8, #0
1a005a12:	4646      	mov	r6, r8
1a005a14:	e737      	b.n	1a005886 <_dtoa_r+0x99e>
1a005a16:	4659      	mov	r1, fp
1a005a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005a1a:	4620      	mov	r0, r4
1a005a1c:	f000 fe00 	bl	1a006620 <__pow5mult>
1a005a20:	4683      	mov	fp, r0
1a005a22:	e497      	b.n	1a005354 <_dtoa_r+0x46c>
1a005a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005a28:	970a      	str	r7, [sp, #40]	; 0x28
1a005a2a:	1afb      	subs	r3, r7, r3
1a005a2c:	441a      	add	r2, r3
1a005a2e:	920c      	str	r2, [sp, #48]	; 0x30
1a005a30:	2700      	movs	r7, #0
1a005a32:	e452      	b.n	1a0052da <_dtoa_r+0x3f2>
1a005a34:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005a38:	f04f 0802 	mov.w	r8, #2
1a005a3c:	ed8d 7b00 	vstr	d7, [sp]
1a005a40:	e633      	b.n	1a0056aa <_dtoa_r+0x7c2>
1a005a42:	2501      	movs	r5, #1
1a005a44:	950e      	str	r5, [sp, #56]	; 0x38
1a005a46:	9508      	str	r5, [sp, #32]
1a005a48:	46aa      	mov	sl, r5
1a005a4a:	2100      	movs	r1, #0
1a005a4c:	6461      	str	r1, [r4, #68]	; 0x44
1a005a4e:	e601      	b.n	1a005654 <_dtoa_r+0x76c>
1a005a50:	461d      	mov	r5, r3
1a005a52:	e7fa      	b.n	1a005a4a <_dtoa_r+0xb62>
1a005a54:	2a00      	cmp	r2, #0
1a005a56:	dd15      	ble.n	1a005a84 <_dtoa_r+0xb9c>
1a005a58:	4659      	mov	r1, fp
1a005a5a:	2201      	movs	r2, #1
1a005a5c:	4620      	mov	r0, r4
1a005a5e:	f8cd c000 	str.w	ip, [sp]
1a005a62:	f000 fe2d 	bl	1a0066c0 <__lshift>
1a005a66:	4641      	mov	r1, r8
1a005a68:	4683      	mov	fp, r0
1a005a6a:	f000 fe7f 	bl	1a00676c <__mcmp>
1a005a6e:	2800      	cmp	r0, #0
1a005a70:	f8dd c000 	ldr.w	ip, [sp]
1a005a74:	f340 8154 	ble.w	1a005d20 <_dtoa_r+0xe38>
1a005a78:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005a7c:	f000 8111 	beq.w	1a005ca2 <_dtoa_r+0xdba>
1a005a80:	f10c 0c01 	add.w	ip, ip, #1
1a005a84:	46b2      	mov	sl, r6
1a005a86:	f887 c000 	strb.w	ip, [r7]
1a005a8a:	1c7d      	adds	r5, r7, #1
1a005a8c:	464e      	mov	r6, r9
1a005a8e:	e520      	b.n	1a0054d2 <_dtoa_r+0x5ea>
1a005a90:	d104      	bne.n	1a005a9c <_dtoa_r+0xbb4>
1a005a92:	f01c 0f01 	tst.w	ip, #1
1a005a96:	d001      	beq.n	1a005a9c <_dtoa_r+0xbb4>
1a005a98:	e50b      	b.n	1a0054b2 <_dtoa_r+0x5ca>
1a005a9a:	4615      	mov	r5, r2
1a005a9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a005aa0:	2b30      	cmp	r3, #48	; 0x30
1a005aa2:	f105 32ff 	add.w	r2, r5, #4294967295
1a005aa6:	d0f8      	beq.n	1a005a9a <_dtoa_r+0xbb2>
1a005aa8:	e513      	b.n	1a0054d2 <_dtoa_r+0x5ea>
1a005aaa:	f8dd b000 	ldr.w	fp, [sp]
1a005aae:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
1a005ab2:	4644      	mov	r4, r8
1a005ab4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005ab8:	e9cd 2300 	strd	r2, r3, [sp]
1a005abc:	f7ff bb27 	b.w	1a00510e <_dtoa_r+0x226>
1a005ac0:	9b05      	ldr	r3, [sp, #20]
1a005ac2:	425d      	negs	r5, r3
1a005ac4:	2d00      	cmp	r5, #0
1a005ac6:	f000 80bd 	beq.w	1a005c44 <_dtoa_r+0xd5c>
1a005aca:	4b86      	ldr	r3, [pc, #536]	; (1a005ce4 <_dtoa_r+0xdfc>)
1a005acc:	f005 020f 	and.w	r2, r5, #15
1a005ad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005ad8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005adc:	f7fd f8ac 	bl	1a002c38 <__aeabi_dmul>
1a005ae0:	112d      	asrs	r5, r5, #4
1a005ae2:	e9cd 0100 	strd	r0, r1, [sp]
1a005ae6:	f000 8127 	beq.w	1a005d38 <_dtoa_r+0xe50>
1a005aea:	4e7f      	ldr	r6, [pc, #508]	; (1a005ce8 <_dtoa_r+0xe00>)
1a005aec:	f04f 0802 	mov.w	r8, #2
1a005af0:	07eb      	lsls	r3, r5, #31
1a005af2:	d505      	bpl.n	1a005b00 <_dtoa_r+0xc18>
1a005af4:	e9d6 2300 	ldrd	r2, r3, [r6]
1a005af8:	f7fd f89e 	bl	1a002c38 <__aeabi_dmul>
1a005afc:	f108 0801 	add.w	r8, r8, #1
1a005b00:	106d      	asrs	r5, r5, #1
1a005b02:	f106 0608 	add.w	r6, r6, #8
1a005b06:	d1f3      	bne.n	1a005af0 <_dtoa_r+0xc08>
1a005b08:	e9cd 0100 	strd	r0, r1, [sp]
1a005b0c:	e5e8      	b.n	1a0056e0 <_dtoa_r+0x7f8>
1a005b0e:	9a05      	ldr	r2, [sp, #20]
1a005b10:	3201      	adds	r2, #1
1a005b12:	9205      	str	r2, [sp, #20]
1a005b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005b16:	2330      	movs	r3, #48	; 0x30
1a005b18:	7013      	strb	r3, [r2, #0]
1a005b1a:	2331      	movs	r3, #49	; 0x31
1a005b1c:	7013      	strb	r3, [r2, #0]
1a005b1e:	f7ff bbba 	b.w	1a005296 <_dtoa_r+0x3ae>
1a005b22:	6871      	ldr	r1, [r6, #4]
1a005b24:	4620      	mov	r0, r4
1a005b26:	f000 fc17 	bl	1a006358 <_Balloc>
1a005b2a:	6933      	ldr	r3, [r6, #16]
1a005b2c:	1c9a      	adds	r2, r3, #2
1a005b2e:	4605      	mov	r5, r0
1a005b30:	0092      	lsls	r2, r2, #2
1a005b32:	f106 010c 	add.w	r1, r6, #12
1a005b36:	300c      	adds	r0, #12
1a005b38:	f7fd fd3c 	bl	1a0035b4 <memcpy>
1a005b3c:	4620      	mov	r0, r4
1a005b3e:	4629      	mov	r1, r5
1a005b40:	2201      	movs	r2, #1
1a005b42:	f000 fdbd 	bl	1a0066c0 <__lshift>
1a005b46:	4681      	mov	r9, r0
1a005b48:	e4ff      	b.n	1a00554a <_dtoa_r+0x662>
1a005b4a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005b4e:	f000 80a8 	beq.w	1a005ca2 <_dtoa_r+0xdba>
1a005b52:	f10c 0c01 	add.w	ip, ip, #1
1a005b56:	46b2      	mov	sl, r6
1a005b58:	f887 c000 	strb.w	ip, [r7]
1a005b5c:	1c7d      	adds	r5, r7, #1
1a005b5e:	464e      	mov	r6, r9
1a005b60:	e4b7      	b.n	1a0054d2 <_dtoa_r+0x5ea>
1a005b62:	46b2      	mov	sl, r6
1a005b64:	464e      	mov	r6, r9
1a005b66:	e494      	b.n	1a005492 <_dtoa_r+0x5aa>
1a005b68:	f04f 0800 	mov.w	r8, #0
1a005b6c:	4646      	mov	r6, r8
1a005b6e:	e715      	b.n	1a00599c <_dtoa_r+0xab4>
1a005b70:	495c      	ldr	r1, [pc, #368]	; (1a005ce4 <_dtoa_r+0xdfc>)
1a005b72:	f109 33ff 	add.w	r3, r9, #4294967295
1a005b76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1a005b7a:	4632      	mov	r2, r6
1a005b7c:	9315      	str	r3, [sp, #84]	; 0x54
1a005b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a005b82:	463b      	mov	r3, r7
1a005b84:	f7fd f858 	bl	1a002c38 <__aeabi_dmul>
1a005b88:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005b8c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a005b90:	4639      	mov	r1, r7
1a005b92:	4630      	mov	r0, r6
1a005b94:	f001 fbbe 	bl	1a007314 <__aeabi_d2iz>
1a005b98:	4605      	mov	r5, r0
1a005b9a:	f7fc ff81 	bl	1a002aa0 <__aeabi_i2d>
1a005b9e:	4602      	mov	r2, r0
1a005ba0:	460b      	mov	r3, r1
1a005ba2:	4630      	mov	r0, r6
1a005ba4:	4639      	mov	r1, r7
1a005ba6:	f7fc fe2d 	bl	1a002804 <__aeabi_dsub>
1a005baa:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a005bac:	3530      	adds	r5, #48	; 0x30
1a005bae:	f1b9 0f01 	cmp.w	r9, #1
1a005bb2:	7015      	strb	r5, [r2, #0]
1a005bb4:	4606      	mov	r6, r0
1a005bb6:	460f      	mov	r7, r1
1a005bb8:	f102 0501 	add.w	r5, r2, #1
1a005bbc:	d023      	beq.n	1a005c06 <_dtoa_r+0xd1e>
1a005bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005bc0:	f8cd b000 	str.w	fp, [sp]
1a005bc4:	444b      	add	r3, r9
1a005bc6:	4698      	mov	r8, r3
1a005bc8:	46a9      	mov	r9, r5
1a005bca:	46ab      	mov	fp, r5
1a005bcc:	2200      	movs	r2, #0
1a005bce:	4b47      	ldr	r3, [pc, #284]	; (1a005cec <_dtoa_r+0xe04>)
1a005bd0:	f7fd f832 	bl	1a002c38 <__aeabi_dmul>
1a005bd4:	460f      	mov	r7, r1
1a005bd6:	4606      	mov	r6, r0
1a005bd8:	f001 fb9c 	bl	1a007314 <__aeabi_d2iz>
1a005bdc:	4605      	mov	r5, r0
1a005bde:	f7fc ff5f 	bl	1a002aa0 <__aeabi_i2d>
1a005be2:	3530      	adds	r5, #48	; 0x30
1a005be4:	4602      	mov	r2, r0
1a005be6:	460b      	mov	r3, r1
1a005be8:	4630      	mov	r0, r6
1a005bea:	4639      	mov	r1, r7
1a005bec:	f7fc fe0a 	bl	1a002804 <__aeabi_dsub>
1a005bf0:	f809 5b01 	strb.w	r5, [r9], #1
1a005bf4:	45c1      	cmp	r9, r8
1a005bf6:	d1e9      	bne.n	1a005bcc <_dtoa_r+0xce4>
1a005bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a005bfa:	465d      	mov	r5, fp
1a005bfc:	f8dd b000 	ldr.w	fp, [sp]
1a005c00:	4606      	mov	r6, r0
1a005c02:	460f      	mov	r7, r1
1a005c04:	441d      	add	r5, r3
1a005c06:	2200      	movs	r2, #0
1a005c08:	4b39      	ldr	r3, [pc, #228]	; (1a005cf0 <_dtoa_r+0xe08>)
1a005c0a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a005c0e:	f7fc fdfb 	bl	1a002808 <__adddf3>
1a005c12:	4632      	mov	r2, r6
1a005c14:	463b      	mov	r3, r7
1a005c16:	f001 fb55 	bl	1a0072c4 <__aeabi_dcmplt>
1a005c1a:	2800      	cmp	r0, #0
1a005c1c:	d047      	beq.n	1a005cae <_dtoa_r+0xdc6>
1a005c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005c20:	9305      	str	r3, [sp, #20]
1a005c22:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a005c26:	f7ff bb24 	b.w	1a005272 <_dtoa_r+0x38a>
1a005c2a:	9b07      	ldr	r3, [sp, #28]
1a005c2c:	9a08      	ldr	r2, [sp, #32]
1a005c2e:	1a9d      	subs	r5, r3, r2
1a005c30:	2300      	movs	r3, #0
1a005c32:	f7ff bb58 	b.w	1a0052e6 <_dtoa_r+0x3fe>
1a005c36:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005c38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a005c3a:	9d07      	ldr	r5, [sp, #28]
1a005c3c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005c40:	f7ff bb51 	b.w	1a0052e6 <_dtoa_r+0x3fe>
1a005c44:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005c48:	f04f 0802 	mov.w	r8, #2
1a005c4c:	ed8d 7b00 	vstr	d7, [sp]
1a005c50:	e546      	b.n	1a0056e0 <_dtoa_r+0x7f8>
1a005c52:	9b08      	ldr	r3, [sp, #32]
1a005c54:	2b00      	cmp	r3, #0
1a005c56:	f43f aeb4 	beq.w	1a0059c2 <_dtoa_r+0xada>
1a005c5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a005c5c:	2d00      	cmp	r5, #0
1a005c5e:	f77f af29 	ble.w	1a005ab4 <_dtoa_r+0xbcc>
1a005c62:	2200      	movs	r2, #0
1a005c64:	4b21      	ldr	r3, [pc, #132]	; (1a005cec <_dtoa_r+0xe04>)
1a005c66:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005c6a:	f7fc ffe5 	bl	1a002c38 <__aeabi_dmul>
1a005c6e:	4606      	mov	r6, r0
1a005c70:	460f      	mov	r7, r1
1a005c72:	f108 0001 	add.w	r0, r8, #1
1a005c76:	e9cd 6700 	strd	r6, r7, [sp]
1a005c7a:	f7fc ff11 	bl	1a002aa0 <__aeabi_i2d>
1a005c7e:	4602      	mov	r2, r0
1a005c80:	460b      	mov	r3, r1
1a005c82:	4630      	mov	r0, r6
1a005c84:	4639      	mov	r1, r7
1a005c86:	f7fc ffd7 	bl	1a002c38 <__aeabi_dmul>
1a005c8a:	4b14      	ldr	r3, [pc, #80]	; (1a005cdc <_dtoa_r+0xdf4>)
1a005c8c:	2200      	movs	r2, #0
1a005c8e:	f7fc fdbb 	bl	1a002808 <__adddf3>
1a005c92:	9b05      	ldr	r3, [sp, #20]
1a005c94:	3b01      	subs	r3, #1
1a005c96:	4606      	mov	r6, r0
1a005c98:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005c9c:	9314      	str	r3, [sp, #80]	; 0x50
1a005c9e:	46a9      	mov	r9, r5
1a005ca0:	e53f      	b.n	1a005722 <_dtoa_r+0x83a>
1a005ca2:	2239      	movs	r2, #57	; 0x39
1a005ca4:	46b2      	mov	sl, r6
1a005ca6:	703a      	strb	r2, [r7, #0]
1a005ca8:	464e      	mov	r6, r9
1a005caa:	1c7d      	adds	r5, r7, #1
1a005cac:	e403      	b.n	1a0054b6 <_dtoa_r+0x5ce>
1a005cae:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a005cb2:	2000      	movs	r0, #0
1a005cb4:	490e      	ldr	r1, [pc, #56]	; (1a005cf0 <_dtoa_r+0xe08>)
1a005cb6:	f7fc fda5 	bl	1a002804 <__aeabi_dsub>
1a005cba:	4632      	mov	r2, r6
1a005cbc:	463b      	mov	r3, r7
1a005cbe:	f001 fb1f 	bl	1a007300 <__aeabi_dcmpgt>
1a005cc2:	b908      	cbnz	r0, 1a005cc8 <_dtoa_r+0xde0>
1a005cc4:	e6f6      	b.n	1a005ab4 <_dtoa_r+0xbcc>
1a005cc6:	4615      	mov	r5, r2
1a005cc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a005ccc:	2b30      	cmp	r3, #48	; 0x30
1a005cce:	f105 32ff 	add.w	r2, r5, #4294967295
1a005cd2:	d0f8      	beq.n	1a005cc6 <_dtoa_r+0xdde>
1a005cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005cd6:	9305      	str	r3, [sp, #20]
1a005cd8:	f7ff badd 	b.w	1a005296 <_dtoa_r+0x3ae>
1a005cdc:	401c0000 	.word	0x401c0000
1a005ce0:	40140000 	.word	0x40140000
1a005ce4:	1a0079d0 	.word	0x1a0079d0
1a005ce8:	1a007a98 	.word	0x1a007a98
1a005cec:	40240000 	.word	0x40240000
1a005cf0:	3fe00000 	.word	0x3fe00000
1a005cf4:	4643      	mov	r3, r8
1a005cf6:	f8dd b000 	ldr.w	fp, [sp]
1a005cfa:	46a0      	mov	r8, r4
1a005cfc:	461c      	mov	r4, r3
1a005cfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a005d00:	9305      	str	r3, [sp, #20]
1a005d02:	f7ff bab6 	b.w	1a005272 <_dtoa_r+0x38a>
1a005d06:	46b9      	mov	r9, r7
1a005d08:	f7ff bb6b 	b.w	1a0053e2 <_dtoa_r+0x4fa>
1a005d0c:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a005d10:	d0c7      	beq.n	1a005ca2 <_dtoa_r+0xdba>
1a005d12:	f1ba 0f00 	cmp.w	sl, #0
1a005d16:	f77f aeb5 	ble.w	1a005a84 <_dtoa_r+0xb9c>
1a005d1a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
1a005d1e:	e6b1      	b.n	1a005a84 <_dtoa_r+0xb9c>
1a005d20:	f47f aeb0 	bne.w	1a005a84 <_dtoa_r+0xb9c>
1a005d24:	f01c 0f01 	tst.w	ip, #1
1a005d28:	f43f aeac 	beq.w	1a005a84 <_dtoa_r+0xb9c>
1a005d2c:	e6a4      	b.n	1a005a78 <_dtoa_r+0xb90>
1a005d2e:	9b03      	ldr	r3, [sp, #12]
1a005d30:	2b02      	cmp	r3, #2
1a005d32:	dc04      	bgt.n	1a005d3e <_dtoa_r+0xe56>
1a005d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005d36:	e605      	b.n	1a005944 <_dtoa_r+0xa5c>
1a005d38:	f04f 0802 	mov.w	r8, #2
1a005d3c:	e4d0      	b.n	1a0056e0 <_dtoa_r+0x7f8>
1a005d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005d40:	9308      	str	r3, [sp, #32]
1a005d42:	e61b      	b.n	1a00597c <_dtoa_r+0xa94>
1a005d44:	9b03      	ldr	r3, [sp, #12]
1a005d46:	2b02      	cmp	r3, #2
1a005d48:	dcf9      	bgt.n	1a005d3e <_dtoa_r+0xe56>
1a005d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005d4c:	f7ff bbef 	b.w	1a00552e <_dtoa_r+0x646>
1a005d50:	2500      	movs	r5, #0
1a005d52:	6465      	str	r5, [r4, #68]	; 0x44
1a005d54:	4629      	mov	r1, r5
1a005d56:	4620      	mov	r0, r4
1a005d58:	f000 fafe 	bl	1a006358 <_Balloc>
1a005d5c:	f04f 33ff 	mov.w	r3, #4294967295
1a005d60:	9308      	str	r3, [sp, #32]
1a005d62:	930e      	str	r3, [sp, #56]	; 0x38
1a005d64:	2301      	movs	r3, #1
1a005d66:	9009      	str	r0, [sp, #36]	; 0x24
1a005d68:	46aa      	mov	sl, r5
1a005d6a:	6420      	str	r0, [r4, #64]	; 0x40
1a005d6c:	930b      	str	r3, [sp, #44]	; 0x2c
1a005d6e:	f7ff b9ce 	b.w	1a00510e <_dtoa_r+0x226>
1a005d72:	f43f ab4e 	beq.w	1a005412 <_dtoa_r+0x52a>
1a005d76:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a005d7a:	f7ff bb43 	b.w	1a005404 <_dtoa_r+0x51c>
1a005d7e:	2301      	movs	r3, #1
1a005d80:	930b      	str	r3, [sp, #44]	; 0x2c
1a005d82:	e55c      	b.n	1a00583e <_dtoa_r+0x956>
1a005d84:	2701      	movs	r7, #1
1a005d86:	f7ff b98d 	b.w	1a0050a4 <_dtoa_r+0x1bc>
1a005d8a:	bf00      	nop
1a005d8c:	f3af 8000 	nop.w

1a005d90 <_localeconv_r>:
1a005d90:	4800      	ldr	r0, [pc, #0]	; (1a005d94 <_localeconv_r+0x4>)
1a005d92:	4770      	bx	lr
1a005d94:	100004ac 	.word	0x100004ac

1a005d98 <_malloc_r>:
1a005d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005d9c:	f101 050b 	add.w	r5, r1, #11
1a005da0:	2d16      	cmp	r5, #22
1a005da2:	b083      	sub	sp, #12
1a005da4:	4606      	mov	r6, r0
1a005da6:	d927      	bls.n	1a005df8 <_malloc_r+0x60>
1a005da8:	f035 0507 	bics.w	r5, r5, #7
1a005dac:	f100 80b6 	bmi.w	1a005f1c <_malloc_r+0x184>
1a005db0:	42a9      	cmp	r1, r5
1a005db2:	f200 80b3 	bhi.w	1a005f1c <_malloc_r+0x184>
1a005db6:	f000 facb 	bl	1a006350 <__malloc_lock>
1a005dba:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a005dbe:	d222      	bcs.n	1a005e06 <_malloc_r+0x6e>
1a005dc0:	4fc2      	ldr	r7, [pc, #776]	; (1a0060cc <_malloc_r+0x334>)
1a005dc2:	08e8      	lsrs	r0, r5, #3
1a005dc4:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
1a005dc8:	68dc      	ldr	r4, [r3, #12]
1a005dca:	429c      	cmp	r4, r3
1a005dcc:	f000 81c8 	beq.w	1a006160 <_malloc_r+0x3c8>
1a005dd0:	6863      	ldr	r3, [r4, #4]
1a005dd2:	68e1      	ldr	r1, [r4, #12]
1a005dd4:	68a5      	ldr	r5, [r4, #8]
1a005dd6:	f023 0303 	bic.w	r3, r3, #3
1a005dda:	4423      	add	r3, r4
1a005ddc:	4630      	mov	r0, r6
1a005dde:	685a      	ldr	r2, [r3, #4]
1a005de0:	60e9      	str	r1, [r5, #12]
1a005de2:	f042 0201 	orr.w	r2, r2, #1
1a005de6:	608d      	str	r5, [r1, #8]
1a005de8:	605a      	str	r2, [r3, #4]
1a005dea:	f000 fab3 	bl	1a006354 <__malloc_unlock>
1a005dee:	3408      	adds	r4, #8
1a005df0:	4620      	mov	r0, r4
1a005df2:	b003      	add	sp, #12
1a005df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005df8:	2910      	cmp	r1, #16
1a005dfa:	f200 808f 	bhi.w	1a005f1c <_malloc_r+0x184>
1a005dfe:	f000 faa7 	bl	1a006350 <__malloc_lock>
1a005e02:	2510      	movs	r5, #16
1a005e04:	e7dc      	b.n	1a005dc0 <_malloc_r+0x28>
1a005e06:	0a68      	lsrs	r0, r5, #9
1a005e08:	f000 808f 	beq.w	1a005f2a <_malloc_r+0x192>
1a005e0c:	2804      	cmp	r0, #4
1a005e0e:	f200 8154 	bhi.w	1a0060ba <_malloc_r+0x322>
1a005e12:	09a8      	lsrs	r0, r5, #6
1a005e14:	3038      	adds	r0, #56	; 0x38
1a005e16:	0041      	lsls	r1, r0, #1
1a005e18:	4fac      	ldr	r7, [pc, #688]	; (1a0060cc <_malloc_r+0x334>)
1a005e1a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
1a005e1e:	68cc      	ldr	r4, [r1, #12]
1a005e20:	42a1      	cmp	r1, r4
1a005e22:	d106      	bne.n	1a005e32 <_malloc_r+0x9a>
1a005e24:	e00c      	b.n	1a005e40 <_malloc_r+0xa8>
1a005e26:	2a00      	cmp	r2, #0
1a005e28:	f280 8082 	bge.w	1a005f30 <_malloc_r+0x198>
1a005e2c:	68e4      	ldr	r4, [r4, #12]
1a005e2e:	42a1      	cmp	r1, r4
1a005e30:	d006      	beq.n	1a005e40 <_malloc_r+0xa8>
1a005e32:	6863      	ldr	r3, [r4, #4]
1a005e34:	f023 0303 	bic.w	r3, r3, #3
1a005e38:	1b5a      	subs	r2, r3, r5
1a005e3a:	2a0f      	cmp	r2, #15
1a005e3c:	ddf3      	ble.n	1a005e26 <_malloc_r+0x8e>
1a005e3e:	3801      	subs	r0, #1
1a005e40:	3001      	adds	r0, #1
1a005e42:	49a2      	ldr	r1, [pc, #648]	; (1a0060cc <_malloc_r+0x334>)
1a005e44:	693c      	ldr	r4, [r7, #16]
1a005e46:	f101 0e08 	add.w	lr, r1, #8
1a005e4a:	4574      	cmp	r4, lr
1a005e4c:	f000 817d 	beq.w	1a00614a <_malloc_r+0x3b2>
1a005e50:	6863      	ldr	r3, [r4, #4]
1a005e52:	f023 0303 	bic.w	r3, r3, #3
1a005e56:	1b5a      	subs	r2, r3, r5
1a005e58:	2a0f      	cmp	r2, #15
1a005e5a:	f300 8163 	bgt.w	1a006124 <_malloc_r+0x38c>
1a005e5e:	2a00      	cmp	r2, #0
1a005e60:	f8c1 e014 	str.w	lr, [r1, #20]
1a005e64:	f8c1 e010 	str.w	lr, [r1, #16]
1a005e68:	da73      	bge.n	1a005f52 <_malloc_r+0x1ba>
1a005e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a005e6e:	f080 8139 	bcs.w	1a0060e4 <_malloc_r+0x34c>
1a005e72:	08db      	lsrs	r3, r3, #3
1a005e74:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
1a005e78:	ea4f 0ca3 	mov.w	ip, r3, asr #2
1a005e7c:	684a      	ldr	r2, [r1, #4]
1a005e7e:	f8d8 9008 	ldr.w	r9, [r8, #8]
1a005e82:	f8c4 9008 	str.w	r9, [r4, #8]
1a005e86:	2301      	movs	r3, #1
1a005e88:	fa03 f30c 	lsl.w	r3, r3, ip
1a005e8c:	4313      	orrs	r3, r2
1a005e8e:	f8c4 800c 	str.w	r8, [r4, #12]
1a005e92:	604b      	str	r3, [r1, #4]
1a005e94:	f8c8 4008 	str.w	r4, [r8, #8]
1a005e98:	f8c9 400c 	str.w	r4, [r9, #12]
1a005e9c:	1082      	asrs	r2, r0, #2
1a005e9e:	2401      	movs	r4, #1
1a005ea0:	4094      	lsls	r4, r2
1a005ea2:	429c      	cmp	r4, r3
1a005ea4:	d862      	bhi.n	1a005f6c <_malloc_r+0x1d4>
1a005ea6:	4223      	tst	r3, r4
1a005ea8:	d106      	bne.n	1a005eb8 <_malloc_r+0x120>
1a005eaa:	f020 0003 	bic.w	r0, r0, #3
1a005eae:	0064      	lsls	r4, r4, #1
1a005eb0:	4223      	tst	r3, r4
1a005eb2:	f100 0004 	add.w	r0, r0, #4
1a005eb6:	d0fa      	beq.n	1a005eae <_malloc_r+0x116>
1a005eb8:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
1a005ebc:	46c4      	mov	ip, r8
1a005ebe:	4681      	mov	r9, r0
1a005ec0:	f8dc 300c 	ldr.w	r3, [ip, #12]
1a005ec4:	459c      	cmp	ip, r3
1a005ec6:	d107      	bne.n	1a005ed8 <_malloc_r+0x140>
1a005ec8:	e141      	b.n	1a00614e <_malloc_r+0x3b6>
1a005eca:	2900      	cmp	r1, #0
1a005ecc:	f280 8151 	bge.w	1a006172 <_malloc_r+0x3da>
1a005ed0:	68db      	ldr	r3, [r3, #12]
1a005ed2:	459c      	cmp	ip, r3
1a005ed4:	f000 813b 	beq.w	1a00614e <_malloc_r+0x3b6>
1a005ed8:	685a      	ldr	r2, [r3, #4]
1a005eda:	f022 0203 	bic.w	r2, r2, #3
1a005ede:	1b51      	subs	r1, r2, r5
1a005ee0:	290f      	cmp	r1, #15
1a005ee2:	ddf2      	ble.n	1a005eca <_malloc_r+0x132>
1a005ee4:	461c      	mov	r4, r3
1a005ee6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
1a005eea:	f854 8f08 	ldr.w	r8, [r4, #8]!
1a005eee:	195a      	adds	r2, r3, r5
1a005ef0:	f045 0901 	orr.w	r9, r5, #1
1a005ef4:	f041 0501 	orr.w	r5, r1, #1
1a005ef8:	f8c3 9004 	str.w	r9, [r3, #4]
1a005efc:	4630      	mov	r0, r6
1a005efe:	f8c8 c00c 	str.w	ip, [r8, #12]
1a005f02:	f8cc 8008 	str.w	r8, [ip, #8]
1a005f06:	617a      	str	r2, [r7, #20]
1a005f08:	613a      	str	r2, [r7, #16]
1a005f0a:	f8c2 e00c 	str.w	lr, [r2, #12]
1a005f0e:	f8c2 e008 	str.w	lr, [r2, #8]
1a005f12:	6055      	str	r5, [r2, #4]
1a005f14:	5051      	str	r1, [r2, r1]
1a005f16:	f000 fa1d 	bl	1a006354 <__malloc_unlock>
1a005f1a:	e769      	b.n	1a005df0 <_malloc_r+0x58>
1a005f1c:	2400      	movs	r4, #0
1a005f1e:	230c      	movs	r3, #12
1a005f20:	4620      	mov	r0, r4
1a005f22:	6033      	str	r3, [r6, #0]
1a005f24:	b003      	add	sp, #12
1a005f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005f2a:	217e      	movs	r1, #126	; 0x7e
1a005f2c:	203f      	movs	r0, #63	; 0x3f
1a005f2e:	e773      	b.n	1a005e18 <_malloc_r+0x80>
1a005f30:	4423      	add	r3, r4
1a005f32:	68e1      	ldr	r1, [r4, #12]
1a005f34:	685a      	ldr	r2, [r3, #4]
1a005f36:	68a5      	ldr	r5, [r4, #8]
1a005f38:	f042 0201 	orr.w	r2, r2, #1
1a005f3c:	60e9      	str	r1, [r5, #12]
1a005f3e:	4630      	mov	r0, r6
1a005f40:	608d      	str	r5, [r1, #8]
1a005f42:	605a      	str	r2, [r3, #4]
1a005f44:	f000 fa06 	bl	1a006354 <__malloc_unlock>
1a005f48:	3408      	adds	r4, #8
1a005f4a:	4620      	mov	r0, r4
1a005f4c:	b003      	add	sp, #12
1a005f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005f52:	4423      	add	r3, r4
1a005f54:	4630      	mov	r0, r6
1a005f56:	685a      	ldr	r2, [r3, #4]
1a005f58:	f042 0201 	orr.w	r2, r2, #1
1a005f5c:	605a      	str	r2, [r3, #4]
1a005f5e:	f000 f9f9 	bl	1a006354 <__malloc_unlock>
1a005f62:	3408      	adds	r4, #8
1a005f64:	4620      	mov	r0, r4
1a005f66:	b003      	add	sp, #12
1a005f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005f6c:	68bc      	ldr	r4, [r7, #8]
1a005f6e:	6863      	ldr	r3, [r4, #4]
1a005f70:	f023 0803 	bic.w	r8, r3, #3
1a005f74:	4545      	cmp	r5, r8
1a005f76:	d804      	bhi.n	1a005f82 <_malloc_r+0x1ea>
1a005f78:	ebc5 0308 	rsb	r3, r5, r8
1a005f7c:	2b0f      	cmp	r3, #15
1a005f7e:	f300 808c 	bgt.w	1a00609a <_malloc_r+0x302>
1a005f82:	4b53      	ldr	r3, [pc, #332]	; (1a0060d0 <_malloc_r+0x338>)
1a005f84:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a0060e0 <_malloc_r+0x348>
1a005f88:	681a      	ldr	r2, [r3, #0]
1a005f8a:	f8da 3000 	ldr.w	r3, [sl]
1a005f8e:	3301      	adds	r3, #1
1a005f90:	442a      	add	r2, r5
1a005f92:	eb04 0b08 	add.w	fp, r4, r8
1a005f96:	f000 8150 	beq.w	1a00623a <_malloc_r+0x4a2>
1a005f9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a005f9e:	320f      	adds	r2, #15
1a005fa0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
1a005fa4:	f022 020f 	bic.w	r2, r2, #15
1a005fa8:	4611      	mov	r1, r2
1a005faa:	4630      	mov	r0, r6
1a005fac:	9201      	str	r2, [sp, #4]
1a005fae:	f7fb fc89 	bl	1a0018c4 <_sbrk_r>
1a005fb2:	f1b0 3fff 	cmp.w	r0, #4294967295
1a005fb6:	4681      	mov	r9, r0
1a005fb8:	9a01      	ldr	r2, [sp, #4]
1a005fba:	f000 8147 	beq.w	1a00624c <_malloc_r+0x4b4>
1a005fbe:	4583      	cmp	fp, r0
1a005fc0:	f200 80ee 	bhi.w	1a0061a0 <_malloc_r+0x408>
1a005fc4:	4b43      	ldr	r3, [pc, #268]	; (1a0060d4 <_malloc_r+0x33c>)
1a005fc6:	6819      	ldr	r1, [r3, #0]
1a005fc8:	45cb      	cmp	fp, r9
1a005fca:	4411      	add	r1, r2
1a005fcc:	6019      	str	r1, [r3, #0]
1a005fce:	f000 8142 	beq.w	1a006256 <_malloc_r+0x4be>
1a005fd2:	f8da 0000 	ldr.w	r0, [sl]
1a005fd6:	f8df e108 	ldr.w	lr, [pc, #264]	; 1a0060e0 <_malloc_r+0x348>
1a005fda:	3001      	adds	r0, #1
1a005fdc:	bf1b      	ittet	ne
1a005fde:	ebcb 0b09 	rsbne	fp, fp, r9
1a005fe2:	4459      	addne	r1, fp
1a005fe4:	f8ce 9000 	streq.w	r9, [lr]
1a005fe8:	6019      	strne	r1, [r3, #0]
1a005fea:	f019 0107 	ands.w	r1, r9, #7
1a005fee:	f000 8107 	beq.w	1a006200 <_malloc_r+0x468>
1a005ff2:	f1c1 0008 	rsb	r0, r1, #8
1a005ff6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
1a005ffa:	4481      	add	r9, r0
1a005ffc:	3108      	adds	r1, #8
1a005ffe:	444a      	add	r2, r9
1a006000:	f3c2 020b 	ubfx	r2, r2, #0, #12
1a006004:	ebc2 0a01 	rsb	sl, r2, r1
1a006008:	4651      	mov	r1, sl
1a00600a:	4630      	mov	r0, r6
1a00600c:	9301      	str	r3, [sp, #4]
1a00600e:	f7fb fc59 	bl	1a0018c4 <_sbrk_r>
1a006012:	1c43      	adds	r3, r0, #1
1a006014:	9b01      	ldr	r3, [sp, #4]
1a006016:	f000 812c 	beq.w	1a006272 <_malloc_r+0x4da>
1a00601a:	ebc9 0200 	rsb	r2, r9, r0
1a00601e:	4452      	add	r2, sl
1a006020:	f042 0201 	orr.w	r2, r2, #1
1a006024:	6819      	ldr	r1, [r3, #0]
1a006026:	f8c7 9008 	str.w	r9, [r7, #8]
1a00602a:	4451      	add	r1, sl
1a00602c:	42bc      	cmp	r4, r7
1a00602e:	f8c9 2004 	str.w	r2, [r9, #4]
1a006032:	6019      	str	r1, [r3, #0]
1a006034:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a0060d4 <_malloc_r+0x33c>
1a006038:	d016      	beq.n	1a006068 <_malloc_r+0x2d0>
1a00603a:	f1b8 0f0f 	cmp.w	r8, #15
1a00603e:	f240 80ee 	bls.w	1a00621e <_malloc_r+0x486>
1a006042:	6862      	ldr	r2, [r4, #4]
1a006044:	f1a8 030c 	sub.w	r3, r8, #12
1a006048:	f023 0307 	bic.w	r3, r3, #7
1a00604c:	18e0      	adds	r0, r4, r3
1a00604e:	f002 0201 	and.w	r2, r2, #1
1a006052:	f04f 0e05 	mov.w	lr, #5
1a006056:	431a      	orrs	r2, r3
1a006058:	2b0f      	cmp	r3, #15
1a00605a:	6062      	str	r2, [r4, #4]
1a00605c:	f8c0 e004 	str.w	lr, [r0, #4]
1a006060:	f8c0 e008 	str.w	lr, [r0, #8]
1a006064:	f200 8109 	bhi.w	1a00627a <_malloc_r+0x4e2>
1a006068:	4b1b      	ldr	r3, [pc, #108]	; (1a0060d8 <_malloc_r+0x340>)
1a00606a:	68bc      	ldr	r4, [r7, #8]
1a00606c:	681a      	ldr	r2, [r3, #0]
1a00606e:	4291      	cmp	r1, r2
1a006070:	bf88      	it	hi
1a006072:	6019      	strhi	r1, [r3, #0]
1a006074:	4b19      	ldr	r3, [pc, #100]	; (1a0060dc <_malloc_r+0x344>)
1a006076:	681a      	ldr	r2, [r3, #0]
1a006078:	4291      	cmp	r1, r2
1a00607a:	6862      	ldr	r2, [r4, #4]
1a00607c:	bf88      	it	hi
1a00607e:	6019      	strhi	r1, [r3, #0]
1a006080:	f022 0203 	bic.w	r2, r2, #3
1a006084:	4295      	cmp	r5, r2
1a006086:	eba2 0305 	sub.w	r3, r2, r5
1a00608a:	d801      	bhi.n	1a006090 <_malloc_r+0x2f8>
1a00608c:	2b0f      	cmp	r3, #15
1a00608e:	dc04      	bgt.n	1a00609a <_malloc_r+0x302>
1a006090:	4630      	mov	r0, r6
1a006092:	f000 f95f 	bl	1a006354 <__malloc_unlock>
1a006096:	2400      	movs	r4, #0
1a006098:	e6aa      	b.n	1a005df0 <_malloc_r+0x58>
1a00609a:	1962      	adds	r2, r4, r5
1a00609c:	f043 0301 	orr.w	r3, r3, #1
1a0060a0:	f045 0501 	orr.w	r5, r5, #1
1a0060a4:	6065      	str	r5, [r4, #4]
1a0060a6:	4630      	mov	r0, r6
1a0060a8:	60ba      	str	r2, [r7, #8]
1a0060aa:	6053      	str	r3, [r2, #4]
1a0060ac:	f000 f952 	bl	1a006354 <__malloc_unlock>
1a0060b0:	3408      	adds	r4, #8
1a0060b2:	4620      	mov	r0, r4
1a0060b4:	b003      	add	sp, #12
1a0060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0060ba:	2814      	cmp	r0, #20
1a0060bc:	d968      	bls.n	1a006190 <_malloc_r+0x3f8>
1a0060be:	2854      	cmp	r0, #84	; 0x54
1a0060c0:	f200 8097 	bhi.w	1a0061f2 <_malloc_r+0x45a>
1a0060c4:	0b28      	lsrs	r0, r5, #12
1a0060c6:	306e      	adds	r0, #110	; 0x6e
1a0060c8:	0041      	lsls	r1, r0, #1
1a0060ca:	e6a5      	b.n	1a005e18 <_malloc_r+0x80>
1a0060cc:	100004e4 	.word	0x100004e4
1a0060d0:	10000b28 	.word	0x10000b28
1a0060d4:	10000b2c 	.word	0x10000b2c
1a0060d8:	10000b24 	.word	0x10000b24
1a0060dc:	10000b20 	.word	0x10000b20
1a0060e0:	100008f0 	.word	0x100008f0
1a0060e4:	0a5a      	lsrs	r2, r3, #9
1a0060e6:	2a04      	cmp	r2, #4
1a0060e8:	d955      	bls.n	1a006196 <_malloc_r+0x3fe>
1a0060ea:	2a14      	cmp	r2, #20
1a0060ec:	f200 80a7 	bhi.w	1a00623e <_malloc_r+0x4a6>
1a0060f0:	325b      	adds	r2, #91	; 0x5b
1a0060f2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a0060f6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
1a0060fa:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a0062b8 <_malloc_r+0x520>
1a0060fe:	f8dc 1008 	ldr.w	r1, [ip, #8]
1a006102:	4561      	cmp	r1, ip
1a006104:	d07f      	beq.n	1a006206 <_malloc_r+0x46e>
1a006106:	684a      	ldr	r2, [r1, #4]
1a006108:	f022 0203 	bic.w	r2, r2, #3
1a00610c:	4293      	cmp	r3, r2
1a00610e:	d202      	bcs.n	1a006116 <_malloc_r+0x37e>
1a006110:	6889      	ldr	r1, [r1, #8]
1a006112:	458c      	cmp	ip, r1
1a006114:	d1f7      	bne.n	1a006106 <_malloc_r+0x36e>
1a006116:	68ca      	ldr	r2, [r1, #12]
1a006118:	687b      	ldr	r3, [r7, #4]
1a00611a:	60e2      	str	r2, [r4, #12]
1a00611c:	60a1      	str	r1, [r4, #8]
1a00611e:	6094      	str	r4, [r2, #8]
1a006120:	60cc      	str	r4, [r1, #12]
1a006122:	e6bb      	b.n	1a005e9c <_malloc_r+0x104>
1a006124:	1963      	adds	r3, r4, r5
1a006126:	f042 0701 	orr.w	r7, r2, #1
1a00612a:	f045 0501 	orr.w	r5, r5, #1
1a00612e:	6065      	str	r5, [r4, #4]
1a006130:	4630      	mov	r0, r6
1a006132:	614b      	str	r3, [r1, #20]
1a006134:	610b      	str	r3, [r1, #16]
1a006136:	f8c3 e00c 	str.w	lr, [r3, #12]
1a00613a:	f8c3 e008 	str.w	lr, [r3, #8]
1a00613e:	605f      	str	r7, [r3, #4]
1a006140:	509a      	str	r2, [r3, r2]
1a006142:	3408      	adds	r4, #8
1a006144:	f000 f906 	bl	1a006354 <__malloc_unlock>
1a006148:	e652      	b.n	1a005df0 <_malloc_r+0x58>
1a00614a:	684b      	ldr	r3, [r1, #4]
1a00614c:	e6a6      	b.n	1a005e9c <_malloc_r+0x104>
1a00614e:	f109 0901 	add.w	r9, r9, #1
1a006152:	f019 0f03 	tst.w	r9, #3
1a006156:	f10c 0c08 	add.w	ip, ip, #8
1a00615a:	f47f aeb1 	bne.w	1a005ec0 <_malloc_r+0x128>
1a00615e:	e02c      	b.n	1a0061ba <_malloc_r+0x422>
1a006160:	f104 0308 	add.w	r3, r4, #8
1a006164:	6964      	ldr	r4, [r4, #20]
1a006166:	42a3      	cmp	r3, r4
1a006168:	bf08      	it	eq
1a00616a:	3002      	addeq	r0, #2
1a00616c:	f43f ae69 	beq.w	1a005e42 <_malloc_r+0xaa>
1a006170:	e62e      	b.n	1a005dd0 <_malloc_r+0x38>
1a006172:	441a      	add	r2, r3
1a006174:	461c      	mov	r4, r3
1a006176:	6851      	ldr	r1, [r2, #4]
1a006178:	68db      	ldr	r3, [r3, #12]
1a00617a:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a00617e:	f041 0101 	orr.w	r1, r1, #1
1a006182:	6051      	str	r1, [r2, #4]
1a006184:	4630      	mov	r0, r6
1a006186:	60eb      	str	r3, [r5, #12]
1a006188:	609d      	str	r5, [r3, #8]
1a00618a:	f000 f8e3 	bl	1a006354 <__malloc_unlock>
1a00618e:	e62f      	b.n	1a005df0 <_malloc_r+0x58>
1a006190:	305b      	adds	r0, #91	; 0x5b
1a006192:	0041      	lsls	r1, r0, #1
1a006194:	e640      	b.n	1a005e18 <_malloc_r+0x80>
1a006196:	099a      	lsrs	r2, r3, #6
1a006198:	3238      	adds	r2, #56	; 0x38
1a00619a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a00619e:	e7aa      	b.n	1a0060f6 <_malloc_r+0x35e>
1a0061a0:	42bc      	cmp	r4, r7
1a0061a2:	4b45      	ldr	r3, [pc, #276]	; (1a0062b8 <_malloc_r+0x520>)
1a0061a4:	f43f af0e 	beq.w	1a005fc4 <_malloc_r+0x22c>
1a0061a8:	689c      	ldr	r4, [r3, #8]
1a0061aa:	6862      	ldr	r2, [r4, #4]
1a0061ac:	f022 0203 	bic.w	r2, r2, #3
1a0061b0:	e768      	b.n	1a006084 <_malloc_r+0x2ec>
1a0061b2:	f8d8 8000 	ldr.w	r8, [r8]
1a0061b6:	4598      	cmp	r8, r3
1a0061b8:	d17c      	bne.n	1a0062b4 <_malloc_r+0x51c>
1a0061ba:	f010 0f03 	tst.w	r0, #3
1a0061be:	f1a8 0308 	sub.w	r3, r8, #8
1a0061c2:	f100 30ff 	add.w	r0, r0, #4294967295
1a0061c6:	d1f4      	bne.n	1a0061b2 <_malloc_r+0x41a>
1a0061c8:	687b      	ldr	r3, [r7, #4]
1a0061ca:	ea23 0304 	bic.w	r3, r3, r4
1a0061ce:	607b      	str	r3, [r7, #4]
1a0061d0:	0064      	lsls	r4, r4, #1
1a0061d2:	429c      	cmp	r4, r3
1a0061d4:	f63f aeca 	bhi.w	1a005f6c <_malloc_r+0x1d4>
1a0061d8:	2c00      	cmp	r4, #0
1a0061da:	f43f aec7 	beq.w	1a005f6c <_malloc_r+0x1d4>
1a0061de:	4223      	tst	r3, r4
1a0061e0:	4648      	mov	r0, r9
1a0061e2:	f47f ae69 	bne.w	1a005eb8 <_malloc_r+0x120>
1a0061e6:	0064      	lsls	r4, r4, #1
1a0061e8:	4223      	tst	r3, r4
1a0061ea:	f100 0004 	add.w	r0, r0, #4
1a0061ee:	d0fa      	beq.n	1a0061e6 <_malloc_r+0x44e>
1a0061f0:	e662      	b.n	1a005eb8 <_malloc_r+0x120>
1a0061f2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
1a0061f6:	d818      	bhi.n	1a00622a <_malloc_r+0x492>
1a0061f8:	0be8      	lsrs	r0, r5, #15
1a0061fa:	3077      	adds	r0, #119	; 0x77
1a0061fc:	0041      	lsls	r1, r0, #1
1a0061fe:	e60b      	b.n	1a005e18 <_malloc_r+0x80>
1a006200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a006204:	e6fb      	b.n	1a005ffe <_malloc_r+0x266>
1a006206:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a00620a:	1092      	asrs	r2, r2, #2
1a00620c:	f04f 0c01 	mov.w	ip, #1
1a006210:	fa0c f202 	lsl.w	r2, ip, r2
1a006214:	4313      	orrs	r3, r2
1a006216:	f8c8 3004 	str.w	r3, [r8, #4]
1a00621a:	460a      	mov	r2, r1
1a00621c:	e77d      	b.n	1a00611a <_malloc_r+0x382>
1a00621e:	2301      	movs	r3, #1
1a006220:	f8c9 3004 	str.w	r3, [r9, #4]
1a006224:	464c      	mov	r4, r9
1a006226:	2200      	movs	r2, #0
1a006228:	e72c      	b.n	1a006084 <_malloc_r+0x2ec>
1a00622a:	f240 5354 	movw	r3, #1364	; 0x554
1a00622e:	4298      	cmp	r0, r3
1a006230:	d81c      	bhi.n	1a00626c <_malloc_r+0x4d4>
1a006232:	0ca8      	lsrs	r0, r5, #18
1a006234:	307c      	adds	r0, #124	; 0x7c
1a006236:	0041      	lsls	r1, r0, #1
1a006238:	e5ee      	b.n	1a005e18 <_malloc_r+0x80>
1a00623a:	3210      	adds	r2, #16
1a00623c:	e6b4      	b.n	1a005fa8 <_malloc_r+0x210>
1a00623e:	2a54      	cmp	r2, #84	; 0x54
1a006240:	d823      	bhi.n	1a00628a <_malloc_r+0x4f2>
1a006242:	0b1a      	lsrs	r2, r3, #12
1a006244:	326e      	adds	r2, #110	; 0x6e
1a006246:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a00624a:	e754      	b.n	1a0060f6 <_malloc_r+0x35e>
1a00624c:	68bc      	ldr	r4, [r7, #8]
1a00624e:	6862      	ldr	r2, [r4, #4]
1a006250:	f022 0203 	bic.w	r2, r2, #3
1a006254:	e716      	b.n	1a006084 <_malloc_r+0x2ec>
1a006256:	f3cb 000b 	ubfx	r0, fp, #0, #12
1a00625a:	2800      	cmp	r0, #0
1a00625c:	f47f aeb9 	bne.w	1a005fd2 <_malloc_r+0x23a>
1a006260:	4442      	add	r2, r8
1a006262:	68bb      	ldr	r3, [r7, #8]
1a006264:	f042 0201 	orr.w	r2, r2, #1
1a006268:	605a      	str	r2, [r3, #4]
1a00626a:	e6fd      	b.n	1a006068 <_malloc_r+0x2d0>
1a00626c:	21fc      	movs	r1, #252	; 0xfc
1a00626e:	207e      	movs	r0, #126	; 0x7e
1a006270:	e5d2      	b.n	1a005e18 <_malloc_r+0x80>
1a006272:	2201      	movs	r2, #1
1a006274:	f04f 0a00 	mov.w	sl, #0
1a006278:	e6d4      	b.n	1a006024 <_malloc_r+0x28c>
1a00627a:	f104 0108 	add.w	r1, r4, #8
1a00627e:	4630      	mov	r0, r6
1a006280:	f000 fc8e 	bl	1a006ba0 <_free_r>
1a006284:	f8da 1000 	ldr.w	r1, [sl]
1a006288:	e6ee      	b.n	1a006068 <_malloc_r+0x2d0>
1a00628a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a00628e:	d804      	bhi.n	1a00629a <_malloc_r+0x502>
1a006290:	0bda      	lsrs	r2, r3, #15
1a006292:	3277      	adds	r2, #119	; 0x77
1a006294:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a006298:	e72d      	b.n	1a0060f6 <_malloc_r+0x35e>
1a00629a:	f240 5154 	movw	r1, #1364	; 0x554
1a00629e:	428a      	cmp	r2, r1
1a0062a0:	d804      	bhi.n	1a0062ac <_malloc_r+0x514>
1a0062a2:	0c9a      	lsrs	r2, r3, #18
1a0062a4:	327c      	adds	r2, #124	; 0x7c
1a0062a6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a0062aa:	e724      	b.n	1a0060f6 <_malloc_r+0x35e>
1a0062ac:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
1a0062b0:	227e      	movs	r2, #126	; 0x7e
1a0062b2:	e720      	b.n	1a0060f6 <_malloc_r+0x35e>
1a0062b4:	687b      	ldr	r3, [r7, #4]
1a0062b6:	e78b      	b.n	1a0061d0 <_malloc_r+0x438>
1a0062b8:	100004e4 	.word	0x100004e4

1a0062bc <memchr>:
1a0062bc:	0783      	lsls	r3, r0, #30
1a0062be:	b470      	push	{r4, r5, r6}
1a0062c0:	b2c9      	uxtb	r1, r1
1a0062c2:	d040      	beq.n	1a006346 <memchr+0x8a>
1a0062c4:	1e54      	subs	r4, r2, #1
1a0062c6:	2a00      	cmp	r2, #0
1a0062c8:	d03f      	beq.n	1a00634a <memchr+0x8e>
1a0062ca:	7803      	ldrb	r3, [r0, #0]
1a0062cc:	428b      	cmp	r3, r1
1a0062ce:	bf18      	it	ne
1a0062d0:	1c43      	addne	r3, r0, #1
1a0062d2:	d106      	bne.n	1a0062e2 <memchr+0x26>
1a0062d4:	e01d      	b.n	1a006312 <memchr+0x56>
1a0062d6:	b1f4      	cbz	r4, 1a006316 <memchr+0x5a>
1a0062d8:	7802      	ldrb	r2, [r0, #0]
1a0062da:	428a      	cmp	r2, r1
1a0062dc:	f104 34ff 	add.w	r4, r4, #4294967295
1a0062e0:	d017      	beq.n	1a006312 <memchr+0x56>
1a0062e2:	f013 0f03 	tst.w	r3, #3
1a0062e6:	4618      	mov	r0, r3
1a0062e8:	f103 0301 	add.w	r3, r3, #1
1a0062ec:	d1f3      	bne.n	1a0062d6 <memchr+0x1a>
1a0062ee:	2c03      	cmp	r4, #3
1a0062f0:	d814      	bhi.n	1a00631c <memchr+0x60>
1a0062f2:	b184      	cbz	r4, 1a006316 <memchr+0x5a>
1a0062f4:	7803      	ldrb	r3, [r0, #0]
1a0062f6:	428b      	cmp	r3, r1
1a0062f8:	d00b      	beq.n	1a006312 <memchr+0x56>
1a0062fa:	1905      	adds	r5, r0, r4
1a0062fc:	1c43      	adds	r3, r0, #1
1a0062fe:	e002      	b.n	1a006306 <memchr+0x4a>
1a006300:	7802      	ldrb	r2, [r0, #0]
1a006302:	428a      	cmp	r2, r1
1a006304:	d005      	beq.n	1a006312 <memchr+0x56>
1a006306:	42ab      	cmp	r3, r5
1a006308:	4618      	mov	r0, r3
1a00630a:	f103 0301 	add.w	r3, r3, #1
1a00630e:	d1f7      	bne.n	1a006300 <memchr+0x44>
1a006310:	2000      	movs	r0, #0
1a006312:	bc70      	pop	{r4, r5, r6}
1a006314:	4770      	bx	lr
1a006316:	4620      	mov	r0, r4
1a006318:	bc70      	pop	{r4, r5, r6}
1a00631a:	4770      	bx	lr
1a00631c:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
1a006320:	4602      	mov	r2, r0
1a006322:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
1a006326:	4610      	mov	r0, r2
1a006328:	3204      	adds	r2, #4
1a00632a:	6803      	ldr	r3, [r0, #0]
1a00632c:	4073      	eors	r3, r6
1a00632e:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
1a006332:	ea25 0303 	bic.w	r3, r5, r3
1a006336:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
1a00633a:	d1da      	bne.n	1a0062f2 <memchr+0x36>
1a00633c:	3c04      	subs	r4, #4
1a00633e:	2c03      	cmp	r4, #3
1a006340:	4610      	mov	r0, r2
1a006342:	d8f0      	bhi.n	1a006326 <memchr+0x6a>
1a006344:	e7d5      	b.n	1a0062f2 <memchr+0x36>
1a006346:	4614      	mov	r4, r2
1a006348:	e7d1      	b.n	1a0062ee <memchr+0x32>
1a00634a:	4610      	mov	r0, r2
1a00634c:	e7e1      	b.n	1a006312 <memchr+0x56>
1a00634e:	bf00      	nop

1a006350 <__malloc_lock>:
1a006350:	4770      	bx	lr
1a006352:	bf00      	nop

1a006354 <__malloc_unlock>:
1a006354:	4770      	bx	lr
1a006356:	bf00      	nop

1a006358 <_Balloc>:
1a006358:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a00635a:	b570      	push	{r4, r5, r6, lr}
1a00635c:	4605      	mov	r5, r0
1a00635e:	460c      	mov	r4, r1
1a006360:	b14b      	cbz	r3, 1a006376 <_Balloc+0x1e>
1a006362:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006366:	b180      	cbz	r0, 1a00638a <_Balloc+0x32>
1a006368:	6802      	ldr	r2, [r0, #0]
1a00636a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a00636e:	2300      	movs	r3, #0
1a006370:	6103      	str	r3, [r0, #16]
1a006372:	60c3      	str	r3, [r0, #12]
1a006374:	bd70      	pop	{r4, r5, r6, pc}
1a006376:	2104      	movs	r1, #4
1a006378:	2221      	movs	r2, #33	; 0x21
1a00637a:	f000 fb93 	bl	1a006aa4 <_calloc_r>
1a00637e:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006380:	4603      	mov	r3, r0
1a006382:	2800      	cmp	r0, #0
1a006384:	d1ed      	bne.n	1a006362 <_Balloc+0xa>
1a006386:	2000      	movs	r0, #0
1a006388:	bd70      	pop	{r4, r5, r6, pc}
1a00638a:	2101      	movs	r1, #1
1a00638c:	fa01 f604 	lsl.w	r6, r1, r4
1a006390:	1d72      	adds	r2, r6, #5
1a006392:	4628      	mov	r0, r5
1a006394:	0092      	lsls	r2, r2, #2
1a006396:	f000 fb85 	bl	1a006aa4 <_calloc_r>
1a00639a:	2800      	cmp	r0, #0
1a00639c:	d0f3      	beq.n	1a006386 <_Balloc+0x2e>
1a00639e:	6044      	str	r4, [r0, #4]
1a0063a0:	6086      	str	r6, [r0, #8]
1a0063a2:	e7e4      	b.n	1a00636e <_Balloc+0x16>

1a0063a4 <_Bfree>:
1a0063a4:	b131      	cbz	r1, 1a0063b4 <_Bfree+0x10>
1a0063a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a0063a8:	684a      	ldr	r2, [r1, #4]
1a0063aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a0063ae:	6008      	str	r0, [r1, #0]
1a0063b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a0063b4:	4770      	bx	lr
1a0063b6:	bf00      	nop

1a0063b8 <__multadd>:
1a0063b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0063ba:	690c      	ldr	r4, [r1, #16]
1a0063bc:	b083      	sub	sp, #12
1a0063be:	460d      	mov	r5, r1
1a0063c0:	4606      	mov	r6, r0
1a0063c2:	f101 0e14 	add.w	lr, r1, #20
1a0063c6:	2700      	movs	r7, #0
1a0063c8:	f8de 1000 	ldr.w	r1, [lr]
1a0063cc:	b288      	uxth	r0, r1
1a0063ce:	0c09      	lsrs	r1, r1, #16
1a0063d0:	fb02 3300 	mla	r3, r2, r0, r3
1a0063d4:	fb02 f101 	mul.w	r1, r2, r1
1a0063d8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
1a0063dc:	3701      	adds	r7, #1
1a0063de:	b29b      	uxth	r3, r3
1a0063e0:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a0063e4:	42bc      	cmp	r4, r7
1a0063e6:	f84e 3b04 	str.w	r3, [lr], #4
1a0063ea:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a0063ee:	dceb      	bgt.n	1a0063c8 <__multadd+0x10>
1a0063f0:	b13b      	cbz	r3, 1a006402 <__multadd+0x4a>
1a0063f2:	68aa      	ldr	r2, [r5, #8]
1a0063f4:	4294      	cmp	r4, r2
1a0063f6:	da07      	bge.n	1a006408 <__multadd+0x50>
1a0063f8:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a0063fc:	3401      	adds	r4, #1
1a0063fe:	6153      	str	r3, [r2, #20]
1a006400:	612c      	str	r4, [r5, #16]
1a006402:	4628      	mov	r0, r5
1a006404:	b003      	add	sp, #12
1a006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006408:	6869      	ldr	r1, [r5, #4]
1a00640a:	9301      	str	r3, [sp, #4]
1a00640c:	3101      	adds	r1, #1
1a00640e:	4630      	mov	r0, r6
1a006410:	f7ff ffa2 	bl	1a006358 <_Balloc>
1a006414:	692a      	ldr	r2, [r5, #16]
1a006416:	3202      	adds	r2, #2
1a006418:	f105 010c 	add.w	r1, r5, #12
1a00641c:	4607      	mov	r7, r0
1a00641e:	0092      	lsls	r2, r2, #2
1a006420:	300c      	adds	r0, #12
1a006422:	f7fd f8c7 	bl	1a0035b4 <memcpy>
1a006426:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a006428:	6869      	ldr	r1, [r5, #4]
1a00642a:	9b01      	ldr	r3, [sp, #4]
1a00642c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a006430:	6028      	str	r0, [r5, #0]
1a006432:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a006436:	463d      	mov	r5, r7
1a006438:	e7de      	b.n	1a0063f8 <__multadd+0x40>
1a00643a:	bf00      	nop

1a00643c <__hi0bits>:
1a00643c:	0c03      	lsrs	r3, r0, #16
1a00643e:	041b      	lsls	r3, r3, #16
1a006440:	b9b3      	cbnz	r3, 1a006470 <__hi0bits+0x34>
1a006442:	0400      	lsls	r0, r0, #16
1a006444:	2310      	movs	r3, #16
1a006446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
1a00644a:	bf04      	itt	eq
1a00644c:	0200      	lsleq	r0, r0, #8
1a00644e:	3308      	addeq	r3, #8
1a006450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
1a006454:	bf04      	itt	eq
1a006456:	0100      	lsleq	r0, r0, #4
1a006458:	3304      	addeq	r3, #4
1a00645a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
1a00645e:	bf04      	itt	eq
1a006460:	0080      	lsleq	r0, r0, #2
1a006462:	3302      	addeq	r3, #2
1a006464:	2800      	cmp	r0, #0
1a006466:	db07      	blt.n	1a006478 <__hi0bits+0x3c>
1a006468:	0042      	lsls	r2, r0, #1
1a00646a:	d403      	bmi.n	1a006474 <__hi0bits+0x38>
1a00646c:	2020      	movs	r0, #32
1a00646e:	4770      	bx	lr
1a006470:	2300      	movs	r3, #0
1a006472:	e7e8      	b.n	1a006446 <__hi0bits+0xa>
1a006474:	1c58      	adds	r0, r3, #1
1a006476:	4770      	bx	lr
1a006478:	4618      	mov	r0, r3
1a00647a:	4770      	bx	lr

1a00647c <__lo0bits>:
1a00647c:	6803      	ldr	r3, [r0, #0]
1a00647e:	f013 0207 	ands.w	r2, r3, #7
1a006482:	d007      	beq.n	1a006494 <__lo0bits+0x18>
1a006484:	07d9      	lsls	r1, r3, #31
1a006486:	d420      	bmi.n	1a0064ca <__lo0bits+0x4e>
1a006488:	079a      	lsls	r2, r3, #30
1a00648a:	d420      	bmi.n	1a0064ce <__lo0bits+0x52>
1a00648c:	089b      	lsrs	r3, r3, #2
1a00648e:	6003      	str	r3, [r0, #0]
1a006490:	2002      	movs	r0, #2
1a006492:	4770      	bx	lr
1a006494:	b299      	uxth	r1, r3
1a006496:	b909      	cbnz	r1, 1a00649c <__lo0bits+0x20>
1a006498:	0c1b      	lsrs	r3, r3, #16
1a00649a:	2210      	movs	r2, #16
1a00649c:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0064a0:	bf04      	itt	eq
1a0064a2:	0a1b      	lsreq	r3, r3, #8
1a0064a4:	3208      	addeq	r2, #8
1a0064a6:	0719      	lsls	r1, r3, #28
1a0064a8:	bf04      	itt	eq
1a0064aa:	091b      	lsreq	r3, r3, #4
1a0064ac:	3204      	addeq	r2, #4
1a0064ae:	0799      	lsls	r1, r3, #30
1a0064b0:	bf04      	itt	eq
1a0064b2:	089b      	lsreq	r3, r3, #2
1a0064b4:	3202      	addeq	r2, #2
1a0064b6:	07d9      	lsls	r1, r3, #31
1a0064b8:	d404      	bmi.n	1a0064c4 <__lo0bits+0x48>
1a0064ba:	085b      	lsrs	r3, r3, #1
1a0064bc:	d101      	bne.n	1a0064c2 <__lo0bits+0x46>
1a0064be:	2020      	movs	r0, #32
1a0064c0:	4770      	bx	lr
1a0064c2:	3201      	adds	r2, #1
1a0064c4:	6003      	str	r3, [r0, #0]
1a0064c6:	4610      	mov	r0, r2
1a0064c8:	4770      	bx	lr
1a0064ca:	2000      	movs	r0, #0
1a0064cc:	4770      	bx	lr
1a0064ce:	085b      	lsrs	r3, r3, #1
1a0064d0:	6003      	str	r3, [r0, #0]
1a0064d2:	2001      	movs	r0, #1
1a0064d4:	4770      	bx	lr
1a0064d6:	bf00      	nop

1a0064d8 <__i2b>:
1a0064d8:	b510      	push	{r4, lr}
1a0064da:	460c      	mov	r4, r1
1a0064dc:	2101      	movs	r1, #1
1a0064de:	f7ff ff3b 	bl	1a006358 <_Balloc>
1a0064e2:	2201      	movs	r2, #1
1a0064e4:	6144      	str	r4, [r0, #20]
1a0064e6:	6102      	str	r2, [r0, #16]
1a0064e8:	bd10      	pop	{r4, pc}
1a0064ea:	bf00      	nop

1a0064ec <__multiply>:
1a0064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0064f0:	690f      	ldr	r7, [r1, #16]
1a0064f2:	6916      	ldr	r6, [r2, #16]
1a0064f4:	42b7      	cmp	r7, r6
1a0064f6:	b083      	sub	sp, #12
1a0064f8:	460d      	mov	r5, r1
1a0064fa:	4614      	mov	r4, r2
1a0064fc:	f2c0 808d 	blt.w	1a00661a <__multiply+0x12e>
1a006500:	4633      	mov	r3, r6
1a006502:	463e      	mov	r6, r7
1a006504:	461f      	mov	r7, r3
1a006506:	68ab      	ldr	r3, [r5, #8]
1a006508:	6869      	ldr	r1, [r5, #4]
1a00650a:	eb06 0807 	add.w	r8, r6, r7
1a00650e:	4598      	cmp	r8, r3
1a006510:	bfc8      	it	gt
1a006512:	3101      	addgt	r1, #1
1a006514:	f7ff ff20 	bl	1a006358 <_Balloc>
1a006518:	f100 0c14 	add.w	ip, r0, #20
1a00651c:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
1a006520:	45cc      	cmp	ip, r9
1a006522:	9000      	str	r0, [sp, #0]
1a006524:	d205      	bcs.n	1a006532 <__multiply+0x46>
1a006526:	4663      	mov	r3, ip
1a006528:	2100      	movs	r1, #0
1a00652a:	f843 1b04 	str.w	r1, [r3], #4
1a00652e:	4599      	cmp	r9, r3
1a006530:	d8fb      	bhi.n	1a00652a <__multiply+0x3e>
1a006532:	f104 0214 	add.w	r2, r4, #20
1a006536:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
1a00653a:	f105 0314 	add.w	r3, r5, #20
1a00653e:	4552      	cmp	r2, sl
1a006540:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
1a006544:	d254      	bcs.n	1a0065f0 <__multiply+0x104>
1a006546:	f8cd 9004 	str.w	r9, [sp, #4]
1a00654a:	4699      	mov	r9, r3
1a00654c:	f852 3b04 	ldr.w	r3, [r2], #4
1a006550:	fa1f fb83 	uxth.w	fp, r3
1a006554:	f1bb 0f00 	cmp.w	fp, #0
1a006558:	d020      	beq.n	1a00659c <__multiply+0xb0>
1a00655a:	2000      	movs	r0, #0
1a00655c:	464f      	mov	r7, r9
1a00655e:	4666      	mov	r6, ip
1a006560:	4605      	mov	r5, r0
1a006562:	e000      	b.n	1a006566 <__multiply+0x7a>
1a006564:	461e      	mov	r6, r3
1a006566:	f857 4b04 	ldr.w	r4, [r7], #4
1a00656a:	6830      	ldr	r0, [r6, #0]
1a00656c:	b2a1      	uxth	r1, r4
1a00656e:	b283      	uxth	r3, r0
1a006570:	fb0b 3101 	mla	r1, fp, r1, r3
1a006574:	0c24      	lsrs	r4, r4, #16
1a006576:	0c00      	lsrs	r0, r0, #16
1a006578:	194b      	adds	r3, r1, r5
1a00657a:	fb0b 0004 	mla	r0, fp, r4, r0
1a00657e:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a006582:	b299      	uxth	r1, r3
1a006584:	4633      	mov	r3, r6
1a006586:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a00658a:	45be      	cmp	lr, r7
1a00658c:	ea4f 4510 	mov.w	r5, r0, lsr #16
1a006590:	f843 1b04 	str.w	r1, [r3], #4
1a006594:	d8e6      	bhi.n	1a006564 <__multiply+0x78>
1a006596:	6075      	str	r5, [r6, #4]
1a006598:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a00659c:	ea5f 4b13 	movs.w	fp, r3, lsr #16
1a0065a0:	d020      	beq.n	1a0065e4 <__multiply+0xf8>
1a0065a2:	f8dc 3000 	ldr.w	r3, [ip]
1a0065a6:	4667      	mov	r7, ip
1a0065a8:	4618      	mov	r0, r3
1a0065aa:	464d      	mov	r5, r9
1a0065ac:	2100      	movs	r1, #0
1a0065ae:	e000      	b.n	1a0065b2 <__multiply+0xc6>
1a0065b0:	4637      	mov	r7, r6
1a0065b2:	882c      	ldrh	r4, [r5, #0]
1a0065b4:	0c00      	lsrs	r0, r0, #16
1a0065b6:	fb0b 0004 	mla	r0, fp, r4, r0
1a0065ba:	4401      	add	r1, r0
1a0065bc:	b29c      	uxth	r4, r3
1a0065be:	463e      	mov	r6, r7
1a0065c0:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
1a0065c4:	f846 3b04 	str.w	r3, [r6], #4
1a0065c8:	6878      	ldr	r0, [r7, #4]
1a0065ca:	f855 4b04 	ldr.w	r4, [r5], #4
1a0065ce:	b283      	uxth	r3, r0
1a0065d0:	0c24      	lsrs	r4, r4, #16
1a0065d2:	fb0b 3404 	mla	r4, fp, r4, r3
1a0065d6:	eb04 4311 	add.w	r3, r4, r1, lsr #16
1a0065da:	45ae      	cmp	lr, r5
1a0065dc:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a0065e0:	d8e6      	bhi.n	1a0065b0 <__multiply+0xc4>
1a0065e2:	607b      	str	r3, [r7, #4]
1a0065e4:	4592      	cmp	sl, r2
1a0065e6:	f10c 0c04 	add.w	ip, ip, #4
1a0065ea:	d8af      	bhi.n	1a00654c <__multiply+0x60>
1a0065ec:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a0065f0:	f1b8 0f00 	cmp.w	r8, #0
1a0065f4:	dd0b      	ble.n	1a00660e <__multiply+0x122>
1a0065f6:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a0065fa:	f1a9 0904 	sub.w	r9, r9, #4
1a0065fe:	b11b      	cbz	r3, 1a006608 <__multiply+0x11c>
1a006600:	e005      	b.n	1a00660e <__multiply+0x122>
1a006602:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a006606:	b913      	cbnz	r3, 1a00660e <__multiply+0x122>
1a006608:	f1b8 0801 	subs.w	r8, r8, #1
1a00660c:	d1f9      	bne.n	1a006602 <__multiply+0x116>
1a00660e:	9800      	ldr	r0, [sp, #0]
1a006610:	f8c0 8010 	str.w	r8, [r0, #16]
1a006614:	b003      	add	sp, #12
1a006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00661a:	4615      	mov	r5, r2
1a00661c:	460c      	mov	r4, r1
1a00661e:	e772      	b.n	1a006506 <__multiply+0x1a>

1a006620 <__pow5mult>:
1a006620:	f012 0303 	ands.w	r3, r2, #3
1a006624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006628:	4614      	mov	r4, r2
1a00662a:	4607      	mov	r7, r0
1a00662c:	460e      	mov	r6, r1
1a00662e:	d12d      	bne.n	1a00668c <__pow5mult+0x6c>
1a006630:	10a4      	asrs	r4, r4, #2
1a006632:	d01c      	beq.n	1a00666e <__pow5mult+0x4e>
1a006634:	6cbd      	ldr	r5, [r7, #72]	; 0x48
1a006636:	b395      	cbz	r5, 1a00669e <__pow5mult+0x7e>
1a006638:	07e3      	lsls	r3, r4, #31
1a00663a:	f04f 0800 	mov.w	r8, #0
1a00663e:	d406      	bmi.n	1a00664e <__pow5mult+0x2e>
1a006640:	1064      	asrs	r4, r4, #1
1a006642:	d014      	beq.n	1a00666e <__pow5mult+0x4e>
1a006644:	6828      	ldr	r0, [r5, #0]
1a006646:	b1a8      	cbz	r0, 1a006674 <__pow5mult+0x54>
1a006648:	4605      	mov	r5, r0
1a00664a:	07e3      	lsls	r3, r4, #31
1a00664c:	d5f8      	bpl.n	1a006640 <__pow5mult+0x20>
1a00664e:	4638      	mov	r0, r7
1a006650:	4631      	mov	r1, r6
1a006652:	462a      	mov	r2, r5
1a006654:	f7ff ff4a 	bl	1a0064ec <__multiply>
1a006658:	b1b6      	cbz	r6, 1a006688 <__pow5mult+0x68>
1a00665a:	6872      	ldr	r2, [r6, #4]
1a00665c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00665e:	1064      	asrs	r4, r4, #1
1a006660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006664:	6031      	str	r1, [r6, #0]
1a006666:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00666a:	4606      	mov	r6, r0
1a00666c:	d1ea      	bne.n	1a006644 <__pow5mult+0x24>
1a00666e:	4630      	mov	r0, r6
1a006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006674:	4629      	mov	r1, r5
1a006676:	462a      	mov	r2, r5
1a006678:	4638      	mov	r0, r7
1a00667a:	f7ff ff37 	bl	1a0064ec <__multiply>
1a00667e:	6028      	str	r0, [r5, #0]
1a006680:	f8c0 8000 	str.w	r8, [r0]
1a006684:	4605      	mov	r5, r0
1a006686:	e7e0      	b.n	1a00664a <__pow5mult+0x2a>
1a006688:	4606      	mov	r6, r0
1a00668a:	e7d9      	b.n	1a006640 <__pow5mult+0x20>
1a00668c:	1e5a      	subs	r2, r3, #1
1a00668e:	4d0b      	ldr	r5, [pc, #44]	; (1a0066bc <__pow5mult+0x9c>)
1a006690:	2300      	movs	r3, #0
1a006692:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
1a006696:	f7ff fe8f 	bl	1a0063b8 <__multadd>
1a00669a:	4606      	mov	r6, r0
1a00669c:	e7c8      	b.n	1a006630 <__pow5mult+0x10>
1a00669e:	2101      	movs	r1, #1
1a0066a0:	4638      	mov	r0, r7
1a0066a2:	f7ff fe59 	bl	1a006358 <_Balloc>
1a0066a6:	f240 2171 	movw	r1, #625	; 0x271
1a0066aa:	2201      	movs	r2, #1
1a0066ac:	2300      	movs	r3, #0
1a0066ae:	6141      	str	r1, [r0, #20]
1a0066b0:	6102      	str	r2, [r0, #16]
1a0066b2:	4605      	mov	r5, r0
1a0066b4:	64b8      	str	r0, [r7, #72]	; 0x48
1a0066b6:	6003      	str	r3, [r0, #0]
1a0066b8:	e7be      	b.n	1a006638 <__pow5mult+0x18>
1a0066ba:	bf00      	nop
1a0066bc:	1a0079c0 	.word	0x1a0079c0

1a0066c0 <__lshift>:
1a0066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0066c4:	690f      	ldr	r7, [r1, #16]
1a0066c6:	688b      	ldr	r3, [r1, #8]
1a0066c8:	ea4f 1962 	mov.w	r9, r2, asr #5
1a0066cc:	444f      	add	r7, r9
1a0066ce:	1c7d      	adds	r5, r7, #1
1a0066d0:	429d      	cmp	r5, r3
1a0066d2:	460e      	mov	r6, r1
1a0066d4:	4614      	mov	r4, r2
1a0066d6:	6849      	ldr	r1, [r1, #4]
1a0066d8:	4680      	mov	r8, r0
1a0066da:	dd04      	ble.n	1a0066e6 <__lshift+0x26>
1a0066dc:	005b      	lsls	r3, r3, #1
1a0066de:	429d      	cmp	r5, r3
1a0066e0:	f101 0101 	add.w	r1, r1, #1
1a0066e4:	dcfa      	bgt.n	1a0066dc <__lshift+0x1c>
1a0066e6:	4640      	mov	r0, r8
1a0066e8:	f7ff fe36 	bl	1a006358 <_Balloc>
1a0066ec:	f1b9 0f00 	cmp.w	r9, #0
1a0066f0:	f100 0114 	add.w	r1, r0, #20
1a0066f4:	dd09      	ble.n	1a00670a <__lshift+0x4a>
1a0066f6:	2300      	movs	r3, #0
1a0066f8:	469e      	mov	lr, r3
1a0066fa:	460a      	mov	r2, r1
1a0066fc:	3301      	adds	r3, #1
1a0066fe:	454b      	cmp	r3, r9
1a006700:	f842 eb04 	str.w	lr, [r2], #4
1a006704:	d1fa      	bne.n	1a0066fc <__lshift+0x3c>
1a006706:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1a00670a:	6932      	ldr	r2, [r6, #16]
1a00670c:	f106 0314 	add.w	r3, r6, #20
1a006710:	f014 0c1f 	ands.w	ip, r4, #31
1a006714:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
1a006718:	d01f      	beq.n	1a00675a <__lshift+0x9a>
1a00671a:	f1cc 0920 	rsb	r9, ip, #32
1a00671e:	2200      	movs	r2, #0
1a006720:	681c      	ldr	r4, [r3, #0]
1a006722:	fa04 f40c 	lsl.w	r4, r4, ip
1a006726:	4314      	orrs	r4, r2
1a006728:	468a      	mov	sl, r1
1a00672a:	f841 4b04 	str.w	r4, [r1], #4
1a00672e:	f853 4b04 	ldr.w	r4, [r3], #4
1a006732:	459e      	cmp	lr, r3
1a006734:	fa24 f209 	lsr.w	r2, r4, r9
1a006738:	d8f2      	bhi.n	1a006720 <__lshift+0x60>
1a00673a:	f8ca 2004 	str.w	r2, [sl, #4]
1a00673e:	b102      	cbz	r2, 1a006742 <__lshift+0x82>
1a006740:	1cbd      	adds	r5, r7, #2
1a006742:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
1a006746:	6872      	ldr	r2, [r6, #4]
1a006748:	3d01      	subs	r5, #1
1a00674a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00674e:	6105      	str	r5, [r0, #16]
1a006750:	6031      	str	r1, [r6, #0]
1a006752:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a006756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00675a:	3904      	subs	r1, #4
1a00675c:	f853 2b04 	ldr.w	r2, [r3], #4
1a006760:	f841 2f04 	str.w	r2, [r1, #4]!
1a006764:	459e      	cmp	lr, r3
1a006766:	d8f9      	bhi.n	1a00675c <__lshift+0x9c>
1a006768:	e7eb      	b.n	1a006742 <__lshift+0x82>
1a00676a:	bf00      	nop

1a00676c <__mcmp>:
1a00676c:	6902      	ldr	r2, [r0, #16]
1a00676e:	690b      	ldr	r3, [r1, #16]
1a006770:	1ad2      	subs	r2, r2, r3
1a006772:	d113      	bne.n	1a00679c <__mcmp+0x30>
1a006774:	009b      	lsls	r3, r3, #2
1a006776:	3014      	adds	r0, #20
1a006778:	3114      	adds	r1, #20
1a00677a:	4419      	add	r1, r3
1a00677c:	b410      	push	{r4}
1a00677e:	4403      	add	r3, r0
1a006780:	e001      	b.n	1a006786 <__mcmp+0x1a>
1a006782:	4298      	cmp	r0, r3
1a006784:	d20c      	bcs.n	1a0067a0 <__mcmp+0x34>
1a006786:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00678a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a00678e:	4294      	cmp	r4, r2
1a006790:	d0f7      	beq.n	1a006782 <__mcmp+0x16>
1a006792:	d309      	bcc.n	1a0067a8 <__mcmp+0x3c>
1a006794:	2001      	movs	r0, #1
1a006796:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00679a:	4770      	bx	lr
1a00679c:	4610      	mov	r0, r2
1a00679e:	4770      	bx	lr
1a0067a0:	2000      	movs	r0, #0
1a0067a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0067a6:	4770      	bx	lr
1a0067a8:	f04f 30ff 	mov.w	r0, #4294967295
1a0067ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0067b0:	4770      	bx	lr
1a0067b2:	bf00      	nop

1a0067b4 <__mdiff>:
1a0067b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0067b8:	460e      	mov	r6, r1
1a0067ba:	4605      	mov	r5, r0
1a0067bc:	4611      	mov	r1, r2
1a0067be:	4630      	mov	r0, r6
1a0067c0:	4614      	mov	r4, r2
1a0067c2:	f7ff ffd3 	bl	1a00676c <__mcmp>
1a0067c6:	1e07      	subs	r7, r0, #0
1a0067c8:	d054      	beq.n	1a006874 <__mdiff+0xc0>
1a0067ca:	db4d      	blt.n	1a006868 <__mdiff+0xb4>
1a0067cc:	f04f 0800 	mov.w	r8, #0
1a0067d0:	6871      	ldr	r1, [r6, #4]
1a0067d2:	4628      	mov	r0, r5
1a0067d4:	f7ff fdc0 	bl	1a006358 <_Balloc>
1a0067d8:	6937      	ldr	r7, [r6, #16]
1a0067da:	6923      	ldr	r3, [r4, #16]
1a0067dc:	f8c0 800c 	str.w	r8, [r0, #12]
1a0067e0:	3614      	adds	r6, #20
1a0067e2:	f104 0214 	add.w	r2, r4, #20
1a0067e6:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
1a0067ea:	f100 0514 	add.w	r5, r0, #20
1a0067ee:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
1a0067f2:	2300      	movs	r3, #0
1a0067f4:	f856 8b04 	ldr.w	r8, [r6], #4
1a0067f8:	f852 4b04 	ldr.w	r4, [r2], #4
1a0067fc:	fa13 f388 	uxtah	r3, r3, r8
1a006800:	b2a1      	uxth	r1, r4
1a006802:	0c24      	lsrs	r4, r4, #16
1a006804:	1a59      	subs	r1, r3, r1
1a006806:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
1a00680a:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a00680e:	b289      	uxth	r1, r1
1a006810:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006814:	4594      	cmp	ip, r2
1a006816:	f845 1b04 	str.w	r1, [r5], #4
1a00681a:	ea4f 4323 	mov.w	r3, r3, asr #16
1a00681e:	4634      	mov	r4, r6
1a006820:	d8e8      	bhi.n	1a0067f4 <__mdiff+0x40>
1a006822:	45b6      	cmp	lr, r6
1a006824:	46ac      	mov	ip, r5
1a006826:	d915      	bls.n	1a006854 <__mdiff+0xa0>
1a006828:	f854 2b04 	ldr.w	r2, [r4], #4
1a00682c:	fa13 f182 	uxtah	r1, r3, r2
1a006830:	0c13      	lsrs	r3, r2, #16
1a006832:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a006836:	b289      	uxth	r1, r1
1a006838:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00683c:	45a6      	cmp	lr, r4
1a00683e:	f845 1b04 	str.w	r1, [r5], #4
1a006842:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006846:	d8ef      	bhi.n	1a006828 <__mdiff+0x74>
1a006848:	43f6      	mvns	r6, r6
1a00684a:	4476      	add	r6, lr
1a00684c:	f026 0503 	bic.w	r5, r6, #3
1a006850:	3504      	adds	r5, #4
1a006852:	4465      	add	r5, ip
1a006854:	3d04      	subs	r5, #4
1a006856:	b921      	cbnz	r1, 1a006862 <__mdiff+0xae>
1a006858:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a00685c:	3f01      	subs	r7, #1
1a00685e:	2b00      	cmp	r3, #0
1a006860:	d0fa      	beq.n	1a006858 <__mdiff+0xa4>
1a006862:	6107      	str	r7, [r0, #16]
1a006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006868:	4633      	mov	r3, r6
1a00686a:	f04f 0801 	mov.w	r8, #1
1a00686e:	4626      	mov	r6, r4
1a006870:	461c      	mov	r4, r3
1a006872:	e7ad      	b.n	1a0067d0 <__mdiff+0x1c>
1a006874:	4628      	mov	r0, r5
1a006876:	4639      	mov	r1, r7
1a006878:	f7ff fd6e 	bl	1a006358 <_Balloc>
1a00687c:	2301      	movs	r3, #1
1a00687e:	6147      	str	r7, [r0, #20]
1a006880:	6103      	str	r3, [r0, #16]
1a006882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006886:	bf00      	nop

1a006888 <__d2b>:
1a006888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00688c:	ec57 6b10 	vmov	r6, r7, d0
1a006890:	b083      	sub	sp, #12
1a006892:	4688      	mov	r8, r1
1a006894:	2101      	movs	r1, #1
1a006896:	463c      	mov	r4, r7
1a006898:	f3c7 550a 	ubfx	r5, r7, #20, #11
1a00689c:	4617      	mov	r7, r2
1a00689e:	f7ff fd5b 	bl	1a006358 <_Balloc>
1a0068a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
1a0068a6:	4681      	mov	r9, r0
1a0068a8:	b10d      	cbz	r5, 1a0068ae <__d2b+0x26>
1a0068aa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
1a0068ae:	9401      	str	r4, [sp, #4]
1a0068b0:	b31e      	cbz	r6, 1a0068fa <__d2b+0x72>
1a0068b2:	a802      	add	r0, sp, #8
1a0068b4:	f840 6d08 	str.w	r6, [r0, #-8]!
1a0068b8:	f7ff fde0 	bl	1a00647c <__lo0bits>
1a0068bc:	2800      	cmp	r0, #0
1a0068be:	d134      	bne.n	1a00692a <__d2b+0xa2>
1a0068c0:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a0068c4:	f8c9 2014 	str.w	r2, [r9, #20]
1a0068c8:	2b00      	cmp	r3, #0
1a0068ca:	bf14      	ite	ne
1a0068cc:	2402      	movne	r4, #2
1a0068ce:	2401      	moveq	r4, #1
1a0068d0:	f8c9 3018 	str.w	r3, [r9, #24]
1a0068d4:	f8c9 4010 	str.w	r4, [r9, #16]
1a0068d8:	b9dd      	cbnz	r5, 1a006912 <__d2b+0x8a>
1a0068da:	eb09 0384 	add.w	r3, r9, r4, lsl #2
1a0068de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0068e2:	f8c8 0000 	str.w	r0, [r8]
1a0068e6:	6918      	ldr	r0, [r3, #16]
1a0068e8:	f7ff fda8 	bl	1a00643c <__hi0bits>
1a0068ec:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
1a0068f0:	6038      	str	r0, [r7, #0]
1a0068f2:	4648      	mov	r0, r9
1a0068f4:	b003      	add	sp, #12
1a0068f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0068fa:	a801      	add	r0, sp, #4
1a0068fc:	f7ff fdbe 	bl	1a00647c <__lo0bits>
1a006900:	2401      	movs	r4, #1
1a006902:	9b01      	ldr	r3, [sp, #4]
1a006904:	f8c9 3014 	str.w	r3, [r9, #20]
1a006908:	3020      	adds	r0, #32
1a00690a:	f8c9 4010 	str.w	r4, [r9, #16]
1a00690e:	2d00      	cmp	r5, #0
1a006910:	d0e3      	beq.n	1a0068da <__d2b+0x52>
1a006912:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
1a006916:	4405      	add	r5, r0
1a006918:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00691c:	f8c8 5000 	str.w	r5, [r8]
1a006920:	6038      	str	r0, [r7, #0]
1a006922:	4648      	mov	r0, r9
1a006924:	b003      	add	sp, #12
1a006926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00692a:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a00692e:	f1c0 0120 	rsb	r1, r0, #32
1a006932:	fa03 f101 	lsl.w	r1, r3, r1
1a006936:	430a      	orrs	r2, r1
1a006938:	40c3      	lsrs	r3, r0
1a00693a:	9301      	str	r3, [sp, #4]
1a00693c:	f8c9 2014 	str.w	r2, [r9, #20]
1a006940:	e7c2      	b.n	1a0068c8 <__d2b+0x40>
1a006942:	bf00      	nop

1a006944 <__fpclassifyd>:
1a006944:	ec53 2b10 	vmov	r2, r3, d0
1a006948:	b410      	push	{r4}
1a00694a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
1a00694e:	d008      	beq.n	1a006962 <__fpclassifyd+0x1e>
1a006950:	4911      	ldr	r1, [pc, #68]	; (1a006998 <__fpclassifyd+0x54>)
1a006952:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
1a006956:	4288      	cmp	r0, r1
1a006958:	d808      	bhi.n	1a00696c <__fpclassifyd+0x28>
1a00695a:	2004      	movs	r0, #4
1a00695c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006960:	4770      	bx	lr
1a006962:	b91a      	cbnz	r2, 1a00696c <__fpclassifyd+0x28>
1a006964:	2002      	movs	r0, #2
1a006966:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00696a:	4770      	bx	lr
1a00696c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
1a006970:	4909      	ldr	r1, [pc, #36]	; (1a006998 <__fpclassifyd+0x54>)
1a006972:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a006976:	428b      	cmp	r3, r1
1a006978:	d9ef      	bls.n	1a00695a <__fpclassifyd+0x16>
1a00697a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
1a00697e:	d201      	bcs.n	1a006984 <__fpclassifyd+0x40>
1a006980:	2003      	movs	r0, #3
1a006982:	e7eb      	b.n	1a00695c <__fpclassifyd+0x18>
1a006984:	4b05      	ldr	r3, [pc, #20]	; (1a00699c <__fpclassifyd+0x58>)
1a006986:	429c      	cmp	r4, r3
1a006988:	d001      	beq.n	1a00698e <__fpclassifyd+0x4a>
1a00698a:	2000      	movs	r0, #0
1a00698c:	e7e6      	b.n	1a00695c <__fpclassifyd+0x18>
1a00698e:	fab2 f082 	clz	r0, r2
1a006992:	0940      	lsrs	r0, r0, #5
1a006994:	e7e2      	b.n	1a00695c <__fpclassifyd+0x18>
1a006996:	bf00      	nop
1a006998:	7fdfffff 	.word	0x7fdfffff
1a00699c:	7ff00000 	.word	0x7ff00000

1a0069a0 <__ssprint_r>:
1a0069a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0069a4:	6893      	ldr	r3, [r2, #8]
1a0069a6:	f8d2 8000 	ldr.w	r8, [r2]
1a0069aa:	b083      	sub	sp, #12
1a0069ac:	4691      	mov	r9, r2
1a0069ae:	2b00      	cmp	r3, #0
1a0069b0:	d072      	beq.n	1a006a98 <__ssprint_r+0xf8>
1a0069b2:	4607      	mov	r7, r0
1a0069b4:	f04f 0b00 	mov.w	fp, #0
1a0069b8:	6808      	ldr	r0, [r1, #0]
1a0069ba:	688b      	ldr	r3, [r1, #8]
1a0069bc:	460d      	mov	r5, r1
1a0069be:	465c      	mov	r4, fp
1a0069c0:	2c00      	cmp	r4, #0
1a0069c2:	d045      	beq.n	1a006a50 <__ssprint_r+0xb0>
1a0069c4:	429c      	cmp	r4, r3
1a0069c6:	461e      	mov	r6, r3
1a0069c8:	469a      	mov	sl, r3
1a0069ca:	d348      	bcc.n	1a006a5e <__ssprint_r+0xbe>
1a0069cc:	89ab      	ldrh	r3, [r5, #12]
1a0069ce:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a0069d2:	d02d      	beq.n	1a006a30 <__ssprint_r+0x90>
1a0069d4:	696e      	ldr	r6, [r5, #20]
1a0069d6:	6929      	ldr	r1, [r5, #16]
1a0069d8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
1a0069dc:	ebc1 0a00 	rsb	sl, r1, r0
1a0069e0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
1a0069e4:	1c60      	adds	r0, r4, #1
1a0069e6:	1076      	asrs	r6, r6, #1
1a0069e8:	4450      	add	r0, sl
1a0069ea:	4286      	cmp	r6, r0
1a0069ec:	4632      	mov	r2, r6
1a0069ee:	bf3c      	itt	cc
1a0069f0:	4606      	movcc	r6, r0
1a0069f2:	4632      	movcc	r2, r6
1a0069f4:	055b      	lsls	r3, r3, #21
1a0069f6:	d535      	bpl.n	1a006a64 <__ssprint_r+0xc4>
1a0069f8:	4611      	mov	r1, r2
1a0069fa:	4638      	mov	r0, r7
1a0069fc:	f7ff f9cc 	bl	1a005d98 <_malloc_r>
1a006a00:	2800      	cmp	r0, #0
1a006a02:	d039      	beq.n	1a006a78 <__ssprint_r+0xd8>
1a006a04:	4652      	mov	r2, sl
1a006a06:	6929      	ldr	r1, [r5, #16]
1a006a08:	9001      	str	r0, [sp, #4]
1a006a0a:	f7fc fdd3 	bl	1a0035b4 <memcpy>
1a006a0e:	89aa      	ldrh	r2, [r5, #12]
1a006a10:	9b01      	ldr	r3, [sp, #4]
1a006a12:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006a16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a006a1a:	81aa      	strh	r2, [r5, #12]
1a006a1c:	ebca 0206 	rsb	r2, sl, r6
1a006a20:	eb03 000a 	add.w	r0, r3, sl
1a006a24:	616e      	str	r6, [r5, #20]
1a006a26:	612b      	str	r3, [r5, #16]
1a006a28:	6028      	str	r0, [r5, #0]
1a006a2a:	60aa      	str	r2, [r5, #8]
1a006a2c:	4626      	mov	r6, r4
1a006a2e:	46a2      	mov	sl, r4
1a006a30:	4652      	mov	r2, sl
1a006a32:	4659      	mov	r1, fp
1a006a34:	f000 f98c 	bl	1a006d50 <memmove>
1a006a38:	f8d9 2008 	ldr.w	r2, [r9, #8]
1a006a3c:	68ab      	ldr	r3, [r5, #8]
1a006a3e:	6828      	ldr	r0, [r5, #0]
1a006a40:	1b9b      	subs	r3, r3, r6
1a006a42:	4450      	add	r0, sl
1a006a44:	1b14      	subs	r4, r2, r4
1a006a46:	60ab      	str	r3, [r5, #8]
1a006a48:	6028      	str	r0, [r5, #0]
1a006a4a:	f8c9 4008 	str.w	r4, [r9, #8]
1a006a4e:	b31c      	cbz	r4, 1a006a98 <__ssprint_r+0xf8>
1a006a50:	f8d8 b000 	ldr.w	fp, [r8]
1a006a54:	f8d8 4004 	ldr.w	r4, [r8, #4]
1a006a58:	f108 0808 	add.w	r8, r8, #8
1a006a5c:	e7b0      	b.n	1a0069c0 <__ssprint_r+0x20>
1a006a5e:	4626      	mov	r6, r4
1a006a60:	46a2      	mov	sl, r4
1a006a62:	e7e5      	b.n	1a006a30 <__ssprint_r+0x90>
1a006a64:	4638      	mov	r0, r7
1a006a66:	f000 f9d7 	bl	1a006e18 <_realloc_r>
1a006a6a:	4603      	mov	r3, r0
1a006a6c:	2800      	cmp	r0, #0
1a006a6e:	d1d5      	bne.n	1a006a1c <__ssprint_r+0x7c>
1a006a70:	4638      	mov	r0, r7
1a006a72:	6929      	ldr	r1, [r5, #16]
1a006a74:	f000 f894 	bl	1a006ba0 <_free_r>
1a006a78:	230c      	movs	r3, #12
1a006a7a:	603b      	str	r3, [r7, #0]
1a006a7c:	89ab      	ldrh	r3, [r5, #12]
1a006a7e:	2200      	movs	r2, #0
1a006a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006a84:	f04f 30ff 	mov.w	r0, #4294967295
1a006a88:	81ab      	strh	r3, [r5, #12]
1a006a8a:	f8c9 2008 	str.w	r2, [r9, #8]
1a006a8e:	f8c9 2004 	str.w	r2, [r9, #4]
1a006a92:	b003      	add	sp, #12
1a006a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006a98:	2000      	movs	r0, #0
1a006a9a:	f8c9 0004 	str.w	r0, [r9, #4]
1a006a9e:	b003      	add	sp, #12
1a006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a006aa4 <_calloc_r>:
1a006aa4:	b510      	push	{r4, lr}
1a006aa6:	fb02 f101 	mul.w	r1, r2, r1
1a006aaa:	f7ff f975 	bl	1a005d98 <_malloc_r>
1a006aae:	4604      	mov	r4, r0
1a006ab0:	b168      	cbz	r0, 1a006ace <_calloc_r+0x2a>
1a006ab2:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a006ab6:	f022 0203 	bic.w	r2, r2, #3
1a006aba:	3a04      	subs	r2, #4
1a006abc:	2a24      	cmp	r2, #36	; 0x24
1a006abe:	d818      	bhi.n	1a006af2 <_calloc_r+0x4e>
1a006ac0:	2a13      	cmp	r2, #19
1a006ac2:	d806      	bhi.n	1a006ad2 <_calloc_r+0x2e>
1a006ac4:	4603      	mov	r3, r0
1a006ac6:	2200      	movs	r2, #0
1a006ac8:	601a      	str	r2, [r3, #0]
1a006aca:	605a      	str	r2, [r3, #4]
1a006acc:	609a      	str	r2, [r3, #8]
1a006ace:	4620      	mov	r0, r4
1a006ad0:	bd10      	pop	{r4, pc}
1a006ad2:	2300      	movs	r3, #0
1a006ad4:	2a1b      	cmp	r2, #27
1a006ad6:	6003      	str	r3, [r0, #0]
1a006ad8:	6043      	str	r3, [r0, #4]
1a006ada:	d90f      	bls.n	1a006afc <_calloc_r+0x58>
1a006adc:	2a24      	cmp	r2, #36	; 0x24
1a006ade:	6083      	str	r3, [r0, #8]
1a006ae0:	60c3      	str	r3, [r0, #12]
1a006ae2:	bf05      	ittet	eq
1a006ae4:	6103      	streq	r3, [r0, #16]
1a006ae6:	6143      	streq	r3, [r0, #20]
1a006ae8:	f100 0310 	addne.w	r3, r0, #16
1a006aec:	f100 0318 	addeq.w	r3, r0, #24
1a006af0:	e7e9      	b.n	1a006ac6 <_calloc_r+0x22>
1a006af2:	2100      	movs	r1, #0
1a006af4:	f7fc fdf8 	bl	1a0036e8 <memset>
1a006af8:	4620      	mov	r0, r4
1a006afa:	bd10      	pop	{r4, pc}
1a006afc:	f100 0308 	add.w	r3, r0, #8
1a006b00:	e7e1      	b.n	1a006ac6 <_calloc_r+0x22>
1a006b02:	bf00      	nop

1a006b04 <_malloc_trim_r>:
1a006b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006b06:	4f23      	ldr	r7, [pc, #140]	; (1a006b94 <_malloc_trim_r+0x90>)
1a006b08:	460c      	mov	r4, r1
1a006b0a:	4606      	mov	r6, r0
1a006b0c:	f7ff fc20 	bl	1a006350 <__malloc_lock>
1a006b10:	68bb      	ldr	r3, [r7, #8]
1a006b12:	685d      	ldr	r5, [r3, #4]
1a006b14:	f025 0503 	bic.w	r5, r5, #3
1a006b18:	1b29      	subs	r1, r5, r4
1a006b1a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
1a006b1e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a006b22:	f021 010f 	bic.w	r1, r1, #15
1a006b26:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a006b2a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a006b2e:	db07      	blt.n	1a006b40 <_malloc_trim_r+0x3c>
1a006b30:	4630      	mov	r0, r6
1a006b32:	2100      	movs	r1, #0
1a006b34:	f7fa fec6 	bl	1a0018c4 <_sbrk_r>
1a006b38:	68bb      	ldr	r3, [r7, #8]
1a006b3a:	442b      	add	r3, r5
1a006b3c:	4298      	cmp	r0, r3
1a006b3e:	d004      	beq.n	1a006b4a <_malloc_trim_r+0x46>
1a006b40:	4630      	mov	r0, r6
1a006b42:	f7ff fc07 	bl	1a006354 <__malloc_unlock>
1a006b46:	2000      	movs	r0, #0
1a006b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006b4a:	4630      	mov	r0, r6
1a006b4c:	4261      	negs	r1, r4
1a006b4e:	f7fa feb9 	bl	1a0018c4 <_sbrk_r>
1a006b52:	3001      	adds	r0, #1
1a006b54:	d00d      	beq.n	1a006b72 <_malloc_trim_r+0x6e>
1a006b56:	4b10      	ldr	r3, [pc, #64]	; (1a006b98 <_malloc_trim_r+0x94>)
1a006b58:	68ba      	ldr	r2, [r7, #8]
1a006b5a:	6819      	ldr	r1, [r3, #0]
1a006b5c:	1b2d      	subs	r5, r5, r4
1a006b5e:	f045 0501 	orr.w	r5, r5, #1
1a006b62:	4630      	mov	r0, r6
1a006b64:	1b09      	subs	r1, r1, r4
1a006b66:	6055      	str	r5, [r2, #4]
1a006b68:	6019      	str	r1, [r3, #0]
1a006b6a:	f7ff fbf3 	bl	1a006354 <__malloc_unlock>
1a006b6e:	2001      	movs	r0, #1
1a006b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006b72:	4630      	mov	r0, r6
1a006b74:	2100      	movs	r1, #0
1a006b76:	f7fa fea5 	bl	1a0018c4 <_sbrk_r>
1a006b7a:	68ba      	ldr	r2, [r7, #8]
1a006b7c:	1a83      	subs	r3, r0, r2
1a006b7e:	2b0f      	cmp	r3, #15
1a006b80:	ddde      	ble.n	1a006b40 <_malloc_trim_r+0x3c>
1a006b82:	4c06      	ldr	r4, [pc, #24]	; (1a006b9c <_malloc_trim_r+0x98>)
1a006b84:	4904      	ldr	r1, [pc, #16]	; (1a006b98 <_malloc_trim_r+0x94>)
1a006b86:	6824      	ldr	r4, [r4, #0]
1a006b88:	f043 0301 	orr.w	r3, r3, #1
1a006b8c:	1b00      	subs	r0, r0, r4
1a006b8e:	6053      	str	r3, [r2, #4]
1a006b90:	6008      	str	r0, [r1, #0]
1a006b92:	e7d5      	b.n	1a006b40 <_malloc_trim_r+0x3c>
1a006b94:	100004e4 	.word	0x100004e4
1a006b98:	10000b2c 	.word	0x10000b2c
1a006b9c:	100008f0 	.word	0x100008f0

1a006ba0 <_free_r>:
1a006ba0:	2900      	cmp	r1, #0
1a006ba2:	d04e      	beq.n	1a006c42 <_free_r+0xa2>
1a006ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006ba8:	460c      	mov	r4, r1
1a006baa:	4680      	mov	r8, r0
1a006bac:	f7ff fbd0 	bl	1a006350 <__malloc_lock>
1a006bb0:	f854 7c04 	ldr.w	r7, [r4, #-4]
1a006bb4:	4962      	ldr	r1, [pc, #392]	; (1a006d40 <_free_r+0x1a0>)
1a006bb6:	f027 0201 	bic.w	r2, r7, #1
1a006bba:	f1a4 0508 	sub.w	r5, r4, #8
1a006bbe:	18ab      	adds	r3, r5, r2
1a006bc0:	688e      	ldr	r6, [r1, #8]
1a006bc2:	6858      	ldr	r0, [r3, #4]
1a006bc4:	429e      	cmp	r6, r3
1a006bc6:	f020 0003 	bic.w	r0, r0, #3
1a006bca:	d05a      	beq.n	1a006c82 <_free_r+0xe2>
1a006bcc:	07fe      	lsls	r6, r7, #31
1a006bce:	6058      	str	r0, [r3, #4]
1a006bd0:	d40b      	bmi.n	1a006bea <_free_r+0x4a>
1a006bd2:	f854 7c08 	ldr.w	r7, [r4, #-8]
1a006bd6:	1bed      	subs	r5, r5, r7
1a006bd8:	f101 0e08 	add.w	lr, r1, #8
1a006bdc:	68ac      	ldr	r4, [r5, #8]
1a006bde:	4574      	cmp	r4, lr
1a006be0:	443a      	add	r2, r7
1a006be2:	d067      	beq.n	1a006cb4 <_free_r+0x114>
1a006be4:	68ef      	ldr	r7, [r5, #12]
1a006be6:	60e7      	str	r7, [r4, #12]
1a006be8:	60bc      	str	r4, [r7, #8]
1a006bea:	181c      	adds	r4, r3, r0
1a006bec:	6864      	ldr	r4, [r4, #4]
1a006bee:	07e4      	lsls	r4, r4, #31
1a006bf0:	d40c      	bmi.n	1a006c0c <_free_r+0x6c>
1a006bf2:	4f54      	ldr	r7, [pc, #336]	; (1a006d44 <_free_r+0x1a4>)
1a006bf4:	689c      	ldr	r4, [r3, #8]
1a006bf6:	42bc      	cmp	r4, r7
1a006bf8:	4402      	add	r2, r0
1a006bfa:	d07c      	beq.n	1a006cf6 <_free_r+0x156>
1a006bfc:	68d8      	ldr	r0, [r3, #12]
1a006bfe:	60e0      	str	r0, [r4, #12]
1a006c00:	f042 0301 	orr.w	r3, r2, #1
1a006c04:	6084      	str	r4, [r0, #8]
1a006c06:	606b      	str	r3, [r5, #4]
1a006c08:	50aa      	str	r2, [r5, r2]
1a006c0a:	e003      	b.n	1a006c14 <_free_r+0x74>
1a006c0c:	f042 0301 	orr.w	r3, r2, #1
1a006c10:	606b      	str	r3, [r5, #4]
1a006c12:	50aa      	str	r2, [r5, r2]
1a006c14:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a006c18:	d214      	bcs.n	1a006c44 <_free_r+0xa4>
1a006c1a:	08d2      	lsrs	r2, r2, #3
1a006c1c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a006c20:	6848      	ldr	r0, [r1, #4]
1a006c22:	689f      	ldr	r7, [r3, #8]
1a006c24:	60af      	str	r7, [r5, #8]
1a006c26:	1092      	asrs	r2, r2, #2
1a006c28:	2401      	movs	r4, #1
1a006c2a:	fa04 f202 	lsl.w	r2, r4, r2
1a006c2e:	4310      	orrs	r0, r2
1a006c30:	60eb      	str	r3, [r5, #12]
1a006c32:	6048      	str	r0, [r1, #4]
1a006c34:	609d      	str	r5, [r3, #8]
1a006c36:	60fd      	str	r5, [r7, #12]
1a006c38:	4640      	mov	r0, r8
1a006c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006c3e:	f7ff bb89 	b.w	1a006354 <__malloc_unlock>
1a006c42:	4770      	bx	lr
1a006c44:	0a53      	lsrs	r3, r2, #9
1a006c46:	2b04      	cmp	r3, #4
1a006c48:	d847      	bhi.n	1a006cda <_free_r+0x13a>
1a006c4a:	0993      	lsrs	r3, r2, #6
1a006c4c:	f103 0438 	add.w	r4, r3, #56	; 0x38
1a006c50:	0060      	lsls	r0, r4, #1
1a006c52:	eb01 0080 	add.w	r0, r1, r0, lsl #2
1a006c56:	493a      	ldr	r1, [pc, #232]	; (1a006d40 <_free_r+0x1a0>)
1a006c58:	6883      	ldr	r3, [r0, #8]
1a006c5a:	4283      	cmp	r3, r0
1a006c5c:	d043      	beq.n	1a006ce6 <_free_r+0x146>
1a006c5e:	6859      	ldr	r1, [r3, #4]
1a006c60:	f021 0103 	bic.w	r1, r1, #3
1a006c64:	4291      	cmp	r1, r2
1a006c66:	d902      	bls.n	1a006c6e <_free_r+0xce>
1a006c68:	689b      	ldr	r3, [r3, #8]
1a006c6a:	4298      	cmp	r0, r3
1a006c6c:	d1f7      	bne.n	1a006c5e <_free_r+0xbe>
1a006c6e:	68da      	ldr	r2, [r3, #12]
1a006c70:	60ea      	str	r2, [r5, #12]
1a006c72:	60ab      	str	r3, [r5, #8]
1a006c74:	4640      	mov	r0, r8
1a006c76:	6095      	str	r5, [r2, #8]
1a006c78:	60dd      	str	r5, [r3, #12]
1a006c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a006c7e:	f7ff bb69 	b.w	1a006354 <__malloc_unlock>
1a006c82:	07ff      	lsls	r7, r7, #31
1a006c84:	4402      	add	r2, r0
1a006c86:	d407      	bmi.n	1a006c98 <_free_r+0xf8>
1a006c88:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a006c8c:	1aed      	subs	r5, r5, r3
1a006c8e:	441a      	add	r2, r3
1a006c90:	68a8      	ldr	r0, [r5, #8]
1a006c92:	68eb      	ldr	r3, [r5, #12]
1a006c94:	60c3      	str	r3, [r0, #12]
1a006c96:	6098      	str	r0, [r3, #8]
1a006c98:	4b2b      	ldr	r3, [pc, #172]	; (1a006d48 <_free_r+0x1a8>)
1a006c9a:	681b      	ldr	r3, [r3, #0]
1a006c9c:	f042 0001 	orr.w	r0, r2, #1
1a006ca0:	429a      	cmp	r2, r3
1a006ca2:	6068      	str	r0, [r5, #4]
1a006ca4:	608d      	str	r5, [r1, #8]
1a006ca6:	d3c7      	bcc.n	1a006c38 <_free_r+0x98>
1a006ca8:	4b28      	ldr	r3, [pc, #160]	; (1a006d4c <_free_r+0x1ac>)
1a006caa:	4640      	mov	r0, r8
1a006cac:	6819      	ldr	r1, [r3, #0]
1a006cae:	f7ff ff29 	bl	1a006b04 <_malloc_trim_r>
1a006cb2:	e7c1      	b.n	1a006c38 <_free_r+0x98>
1a006cb4:	1819      	adds	r1, r3, r0
1a006cb6:	6849      	ldr	r1, [r1, #4]
1a006cb8:	07c9      	lsls	r1, r1, #31
1a006cba:	d409      	bmi.n	1a006cd0 <_free_r+0x130>
1a006cbc:	68d9      	ldr	r1, [r3, #12]
1a006cbe:	689b      	ldr	r3, [r3, #8]
1a006cc0:	4402      	add	r2, r0
1a006cc2:	f042 0001 	orr.w	r0, r2, #1
1a006cc6:	60d9      	str	r1, [r3, #12]
1a006cc8:	608b      	str	r3, [r1, #8]
1a006cca:	6068      	str	r0, [r5, #4]
1a006ccc:	50aa      	str	r2, [r5, r2]
1a006cce:	e7b3      	b.n	1a006c38 <_free_r+0x98>
1a006cd0:	f042 0301 	orr.w	r3, r2, #1
1a006cd4:	606b      	str	r3, [r5, #4]
1a006cd6:	50aa      	str	r2, [r5, r2]
1a006cd8:	e7ae      	b.n	1a006c38 <_free_r+0x98>
1a006cda:	2b14      	cmp	r3, #20
1a006cdc:	d814      	bhi.n	1a006d08 <_free_r+0x168>
1a006cde:	f103 045b 	add.w	r4, r3, #91	; 0x5b
1a006ce2:	0060      	lsls	r0, r4, #1
1a006ce4:	e7b5      	b.n	1a006c52 <_free_r+0xb2>
1a006ce6:	684a      	ldr	r2, [r1, #4]
1a006ce8:	10a4      	asrs	r4, r4, #2
1a006cea:	2001      	movs	r0, #1
1a006cec:	40a0      	lsls	r0, r4
1a006cee:	4302      	orrs	r2, r0
1a006cf0:	604a      	str	r2, [r1, #4]
1a006cf2:	461a      	mov	r2, r3
1a006cf4:	e7bc      	b.n	1a006c70 <_free_r+0xd0>
1a006cf6:	f042 0301 	orr.w	r3, r2, #1
1a006cfa:	614d      	str	r5, [r1, #20]
1a006cfc:	610d      	str	r5, [r1, #16]
1a006cfe:	60ec      	str	r4, [r5, #12]
1a006d00:	60ac      	str	r4, [r5, #8]
1a006d02:	606b      	str	r3, [r5, #4]
1a006d04:	50aa      	str	r2, [r5, r2]
1a006d06:	e797      	b.n	1a006c38 <_free_r+0x98>
1a006d08:	2b54      	cmp	r3, #84	; 0x54
1a006d0a:	d804      	bhi.n	1a006d16 <_free_r+0x176>
1a006d0c:	0b13      	lsrs	r3, r2, #12
1a006d0e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
1a006d12:	0060      	lsls	r0, r4, #1
1a006d14:	e79d      	b.n	1a006c52 <_free_r+0xb2>
1a006d16:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a006d1a:	d804      	bhi.n	1a006d26 <_free_r+0x186>
1a006d1c:	0bd3      	lsrs	r3, r2, #15
1a006d1e:	f103 0477 	add.w	r4, r3, #119	; 0x77
1a006d22:	0060      	lsls	r0, r4, #1
1a006d24:	e795      	b.n	1a006c52 <_free_r+0xb2>
1a006d26:	f240 5054 	movw	r0, #1364	; 0x554
1a006d2a:	4283      	cmp	r3, r0
1a006d2c:	d804      	bhi.n	1a006d38 <_free_r+0x198>
1a006d2e:	0c93      	lsrs	r3, r2, #18
1a006d30:	f103 047c 	add.w	r4, r3, #124	; 0x7c
1a006d34:	0060      	lsls	r0, r4, #1
1a006d36:	e78c      	b.n	1a006c52 <_free_r+0xb2>
1a006d38:	20fc      	movs	r0, #252	; 0xfc
1a006d3a:	247e      	movs	r4, #126	; 0x7e
1a006d3c:	e789      	b.n	1a006c52 <_free_r+0xb2>
1a006d3e:	bf00      	nop
1a006d40:	100004e4 	.word	0x100004e4
1a006d44:	100004ec 	.word	0x100004ec
1a006d48:	100008ec 	.word	0x100008ec
1a006d4c:	10000b28 	.word	0x10000b28

1a006d50 <memmove>:
1a006d50:	4288      	cmp	r0, r1
1a006d52:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006d54:	d90d      	bls.n	1a006d72 <memmove+0x22>
1a006d56:	188b      	adds	r3, r1, r2
1a006d58:	4298      	cmp	r0, r3
1a006d5a:	d20a      	bcs.n	1a006d72 <memmove+0x22>
1a006d5c:	1881      	adds	r1, r0, r2
1a006d5e:	2a00      	cmp	r2, #0
1a006d60:	d054      	beq.n	1a006e0c <memmove+0xbc>
1a006d62:	1a9a      	subs	r2, r3, r2
1a006d64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006d68:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a006d6c:	4293      	cmp	r3, r2
1a006d6e:	d1f9      	bne.n	1a006d64 <memmove+0x14>
1a006d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006d72:	2a0f      	cmp	r2, #15
1a006d74:	d948      	bls.n	1a006e08 <memmove+0xb8>
1a006d76:	ea40 0301 	orr.w	r3, r0, r1
1a006d7a:	079b      	lsls	r3, r3, #30
1a006d7c:	d147      	bne.n	1a006e0e <memmove+0xbe>
1a006d7e:	f100 0410 	add.w	r4, r0, #16
1a006d82:	f101 0310 	add.w	r3, r1, #16
1a006d86:	4615      	mov	r5, r2
1a006d88:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a006d8c:	f844 6c10 	str.w	r6, [r4, #-16]
1a006d90:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a006d94:	f844 6c0c 	str.w	r6, [r4, #-12]
1a006d98:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a006d9c:	f844 6c08 	str.w	r6, [r4, #-8]
1a006da0:	3d10      	subs	r5, #16
1a006da2:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a006da6:	f844 6c04 	str.w	r6, [r4, #-4]
1a006daa:	2d0f      	cmp	r5, #15
1a006dac:	f103 0310 	add.w	r3, r3, #16
1a006db0:	f104 0410 	add.w	r4, r4, #16
1a006db4:	d8e8      	bhi.n	1a006d88 <memmove+0x38>
1a006db6:	f1a2 0310 	sub.w	r3, r2, #16
1a006dba:	f023 030f 	bic.w	r3, r3, #15
1a006dbe:	f002 0e0f 	and.w	lr, r2, #15
1a006dc2:	3310      	adds	r3, #16
1a006dc4:	f1be 0f03 	cmp.w	lr, #3
1a006dc8:	4419      	add	r1, r3
1a006dca:	4403      	add	r3, r0
1a006dcc:	d921      	bls.n	1a006e12 <memmove+0xc2>
1a006dce:	1f1e      	subs	r6, r3, #4
1a006dd0:	460d      	mov	r5, r1
1a006dd2:	4674      	mov	r4, lr
1a006dd4:	3c04      	subs	r4, #4
1a006dd6:	f855 7b04 	ldr.w	r7, [r5], #4
1a006dda:	f846 7f04 	str.w	r7, [r6, #4]!
1a006dde:	2c03      	cmp	r4, #3
1a006de0:	d8f8      	bhi.n	1a006dd4 <memmove+0x84>
1a006de2:	f1ae 0404 	sub.w	r4, lr, #4
1a006de6:	f024 0403 	bic.w	r4, r4, #3
1a006dea:	3404      	adds	r4, #4
1a006dec:	4423      	add	r3, r4
1a006dee:	4421      	add	r1, r4
1a006df0:	f002 0203 	and.w	r2, r2, #3
1a006df4:	b152      	cbz	r2, 1a006e0c <memmove+0xbc>
1a006df6:	3b01      	subs	r3, #1
1a006df8:	440a      	add	r2, r1
1a006dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
1a006dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006e02:	4291      	cmp	r1, r2
1a006e04:	d1f9      	bne.n	1a006dfa <memmove+0xaa>
1a006e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006e08:	4603      	mov	r3, r0
1a006e0a:	e7f3      	b.n	1a006df4 <memmove+0xa4>
1a006e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006e0e:	4603      	mov	r3, r0
1a006e10:	e7f1      	b.n	1a006df6 <memmove+0xa6>
1a006e12:	4672      	mov	r2, lr
1a006e14:	e7ee      	b.n	1a006df4 <memmove+0xa4>
1a006e16:	bf00      	nop

1a006e18 <_realloc_r>:
1a006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006e1c:	4617      	mov	r7, r2
1a006e1e:	b083      	sub	sp, #12
1a006e20:	460e      	mov	r6, r1
1a006e22:	2900      	cmp	r1, #0
1a006e24:	f000 80e7 	beq.w	1a006ff6 <_realloc_r+0x1de>
1a006e28:	4681      	mov	r9, r0
1a006e2a:	f107 050b 	add.w	r5, r7, #11
1a006e2e:	f7ff fa8f 	bl	1a006350 <__malloc_lock>
1a006e32:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a006e36:	2d16      	cmp	r5, #22
1a006e38:	f023 0403 	bic.w	r4, r3, #3
1a006e3c:	f1a6 0808 	sub.w	r8, r6, #8
1a006e40:	d84c      	bhi.n	1a006edc <_realloc_r+0xc4>
1a006e42:	2210      	movs	r2, #16
1a006e44:	4615      	mov	r5, r2
1a006e46:	42af      	cmp	r7, r5
1a006e48:	d84d      	bhi.n	1a006ee6 <_realloc_r+0xce>
1a006e4a:	4294      	cmp	r4, r2
1a006e4c:	f280 8084 	bge.w	1a006f58 <_realloc_r+0x140>
1a006e50:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 1a007200 <_realloc_r+0x3e8>
1a006e54:	f8db 0008 	ldr.w	r0, [fp, #8]
1a006e58:	eb08 0104 	add.w	r1, r8, r4
1a006e5c:	4288      	cmp	r0, r1
1a006e5e:	f000 80d6 	beq.w	1a00700e <_realloc_r+0x1f6>
1a006e62:	6848      	ldr	r0, [r1, #4]
1a006e64:	f020 0e01 	bic.w	lr, r0, #1
1a006e68:	448e      	add	lr, r1
1a006e6a:	f8de e004 	ldr.w	lr, [lr, #4]
1a006e6e:	f01e 0f01 	tst.w	lr, #1
1a006e72:	d13f      	bne.n	1a006ef4 <_realloc_r+0xdc>
1a006e74:	f020 0003 	bic.w	r0, r0, #3
1a006e78:	4420      	add	r0, r4
1a006e7a:	4290      	cmp	r0, r2
1a006e7c:	f280 80c1 	bge.w	1a007002 <_realloc_r+0x1ea>
1a006e80:	07db      	lsls	r3, r3, #31
1a006e82:	f100 808f 	bmi.w	1a006fa4 <_realloc_r+0x18c>
1a006e86:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a006e8a:	ebc3 0a08 	rsb	sl, r3, r8
1a006e8e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006e92:	f023 0303 	bic.w	r3, r3, #3
1a006e96:	eb00 0e03 	add.w	lr, r0, r3
1a006e9a:	4596      	cmp	lr, r2
1a006e9c:	db34      	blt.n	1a006f08 <_realloc_r+0xf0>
1a006e9e:	68cb      	ldr	r3, [r1, #12]
1a006ea0:	688a      	ldr	r2, [r1, #8]
1a006ea2:	4657      	mov	r7, sl
1a006ea4:	60d3      	str	r3, [r2, #12]
1a006ea6:	609a      	str	r2, [r3, #8]
1a006ea8:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a006eac:	f8da 300c 	ldr.w	r3, [sl, #12]
1a006eb0:	60cb      	str	r3, [r1, #12]
1a006eb2:	1f22      	subs	r2, r4, #4
1a006eb4:	2a24      	cmp	r2, #36	; 0x24
1a006eb6:	6099      	str	r1, [r3, #8]
1a006eb8:	f200 8136 	bhi.w	1a007128 <_realloc_r+0x310>
1a006ebc:	2a13      	cmp	r2, #19
1a006ebe:	f240 80fd 	bls.w	1a0070bc <_realloc_r+0x2a4>
1a006ec2:	6833      	ldr	r3, [r6, #0]
1a006ec4:	f8ca 3008 	str.w	r3, [sl, #8]
1a006ec8:	6873      	ldr	r3, [r6, #4]
1a006eca:	f8ca 300c 	str.w	r3, [sl, #12]
1a006ece:	2a1b      	cmp	r2, #27
1a006ed0:	f200 8140 	bhi.w	1a007154 <_realloc_r+0x33c>
1a006ed4:	3608      	adds	r6, #8
1a006ed6:	f10a 0310 	add.w	r3, sl, #16
1a006eda:	e0f0      	b.n	1a0070be <_realloc_r+0x2a6>
1a006edc:	f025 0507 	bic.w	r5, r5, #7
1a006ee0:	2d00      	cmp	r5, #0
1a006ee2:	462a      	mov	r2, r5
1a006ee4:	daaf      	bge.n	1a006e46 <_realloc_r+0x2e>
1a006ee6:	230c      	movs	r3, #12
1a006ee8:	2000      	movs	r0, #0
1a006eea:	f8c9 3000 	str.w	r3, [r9]
1a006eee:	b003      	add	sp, #12
1a006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006ef4:	07d9      	lsls	r1, r3, #31
1a006ef6:	d455      	bmi.n	1a006fa4 <_realloc_r+0x18c>
1a006ef8:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a006efc:	ebc3 0a08 	rsb	sl, r3, r8
1a006f00:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006f04:	f023 0303 	bic.w	r3, r3, #3
1a006f08:	4423      	add	r3, r4
1a006f0a:	4293      	cmp	r3, r2
1a006f0c:	db4a      	blt.n	1a006fa4 <_realloc_r+0x18c>
1a006f0e:	4657      	mov	r7, sl
1a006f10:	f8da 100c 	ldr.w	r1, [sl, #12]
1a006f14:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a006f18:	1f22      	subs	r2, r4, #4
1a006f1a:	2a24      	cmp	r2, #36	; 0x24
1a006f1c:	60c1      	str	r1, [r0, #12]
1a006f1e:	6088      	str	r0, [r1, #8]
1a006f20:	f200 810e 	bhi.w	1a007140 <_realloc_r+0x328>
1a006f24:	2a13      	cmp	r2, #19
1a006f26:	f240 8109 	bls.w	1a00713c <_realloc_r+0x324>
1a006f2a:	6831      	ldr	r1, [r6, #0]
1a006f2c:	f8ca 1008 	str.w	r1, [sl, #8]
1a006f30:	6871      	ldr	r1, [r6, #4]
1a006f32:	f8ca 100c 	str.w	r1, [sl, #12]
1a006f36:	2a1b      	cmp	r2, #27
1a006f38:	f200 8121 	bhi.w	1a00717e <_realloc_r+0x366>
1a006f3c:	3608      	adds	r6, #8
1a006f3e:	f10a 0210 	add.w	r2, sl, #16
1a006f42:	6831      	ldr	r1, [r6, #0]
1a006f44:	6011      	str	r1, [r2, #0]
1a006f46:	6871      	ldr	r1, [r6, #4]
1a006f48:	6051      	str	r1, [r2, #4]
1a006f4a:	68b1      	ldr	r1, [r6, #8]
1a006f4c:	6091      	str	r1, [r2, #8]
1a006f4e:	461c      	mov	r4, r3
1a006f50:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006f54:	463e      	mov	r6, r7
1a006f56:	46d0      	mov	r8, sl
1a006f58:	1b62      	subs	r2, r4, r5
1a006f5a:	2a0f      	cmp	r2, #15
1a006f5c:	f003 0301 	and.w	r3, r3, #1
1a006f60:	d80e      	bhi.n	1a006f80 <_realloc_r+0x168>
1a006f62:	4323      	orrs	r3, r4
1a006f64:	4444      	add	r4, r8
1a006f66:	f8c8 3004 	str.w	r3, [r8, #4]
1a006f6a:	6863      	ldr	r3, [r4, #4]
1a006f6c:	f043 0301 	orr.w	r3, r3, #1
1a006f70:	6063      	str	r3, [r4, #4]
1a006f72:	4648      	mov	r0, r9
1a006f74:	f7ff f9ee 	bl	1a006354 <__malloc_unlock>
1a006f78:	4630      	mov	r0, r6
1a006f7a:	b003      	add	sp, #12
1a006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006f80:	eb08 0105 	add.w	r1, r8, r5
1a006f84:	431d      	orrs	r5, r3
1a006f86:	f042 0301 	orr.w	r3, r2, #1
1a006f8a:	440a      	add	r2, r1
1a006f8c:	f8c8 5004 	str.w	r5, [r8, #4]
1a006f90:	604b      	str	r3, [r1, #4]
1a006f92:	6853      	ldr	r3, [r2, #4]
1a006f94:	f043 0301 	orr.w	r3, r3, #1
1a006f98:	3108      	adds	r1, #8
1a006f9a:	6053      	str	r3, [r2, #4]
1a006f9c:	4648      	mov	r0, r9
1a006f9e:	f7ff fdff 	bl	1a006ba0 <_free_r>
1a006fa2:	e7e6      	b.n	1a006f72 <_realloc_r+0x15a>
1a006fa4:	4639      	mov	r1, r7
1a006fa6:	4648      	mov	r0, r9
1a006fa8:	f7fe fef6 	bl	1a005d98 <_malloc_r>
1a006fac:	4607      	mov	r7, r0
1a006fae:	b1d8      	cbz	r0, 1a006fe8 <_realloc_r+0x1d0>
1a006fb0:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a006fb4:	f023 0201 	bic.w	r2, r3, #1
1a006fb8:	4442      	add	r2, r8
1a006fba:	f1a0 0108 	sub.w	r1, r0, #8
1a006fbe:	4291      	cmp	r1, r2
1a006fc0:	f000 80ac 	beq.w	1a00711c <_realloc_r+0x304>
1a006fc4:	1f22      	subs	r2, r4, #4
1a006fc6:	2a24      	cmp	r2, #36	; 0x24
1a006fc8:	f200 8099 	bhi.w	1a0070fe <_realloc_r+0x2e6>
1a006fcc:	2a13      	cmp	r2, #19
1a006fce:	d86a      	bhi.n	1a0070a6 <_realloc_r+0x28e>
1a006fd0:	4603      	mov	r3, r0
1a006fd2:	4632      	mov	r2, r6
1a006fd4:	6811      	ldr	r1, [r2, #0]
1a006fd6:	6019      	str	r1, [r3, #0]
1a006fd8:	6851      	ldr	r1, [r2, #4]
1a006fda:	6059      	str	r1, [r3, #4]
1a006fdc:	6892      	ldr	r2, [r2, #8]
1a006fde:	609a      	str	r2, [r3, #8]
1a006fe0:	4631      	mov	r1, r6
1a006fe2:	4648      	mov	r0, r9
1a006fe4:	f7ff fddc 	bl	1a006ba0 <_free_r>
1a006fe8:	4648      	mov	r0, r9
1a006fea:	f7ff f9b3 	bl	1a006354 <__malloc_unlock>
1a006fee:	4638      	mov	r0, r7
1a006ff0:	b003      	add	sp, #12
1a006ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006ff6:	4611      	mov	r1, r2
1a006ff8:	b003      	add	sp, #12
1a006ffa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006ffe:	f7fe becb 	b.w	1a005d98 <_malloc_r>
1a007002:	68ca      	ldr	r2, [r1, #12]
1a007004:	6889      	ldr	r1, [r1, #8]
1a007006:	4604      	mov	r4, r0
1a007008:	60ca      	str	r2, [r1, #12]
1a00700a:	6091      	str	r1, [r2, #8]
1a00700c:	e7a4      	b.n	1a006f58 <_realloc_r+0x140>
1a00700e:	6841      	ldr	r1, [r0, #4]
1a007010:	f021 0103 	bic.w	r1, r1, #3
1a007014:	4421      	add	r1, r4
1a007016:	f105 0010 	add.w	r0, r5, #16
1a00701a:	4281      	cmp	r1, r0
1a00701c:	da5b      	bge.n	1a0070d6 <_realloc_r+0x2be>
1a00701e:	07db      	lsls	r3, r3, #31
1a007020:	d4c0      	bmi.n	1a006fa4 <_realloc_r+0x18c>
1a007022:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a007026:	ebc3 0a08 	rsb	sl, r3, r8
1a00702a:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00702e:	f023 0303 	bic.w	r3, r3, #3
1a007032:	eb01 0c03 	add.w	ip, r1, r3
1a007036:	4560      	cmp	r0, ip
1a007038:	f73f af66 	bgt.w	1a006f08 <_realloc_r+0xf0>
1a00703c:	4657      	mov	r7, sl
1a00703e:	f8da 300c 	ldr.w	r3, [sl, #12]
1a007042:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a007046:	1f22      	subs	r2, r4, #4
1a007048:	2a24      	cmp	r2, #36	; 0x24
1a00704a:	60cb      	str	r3, [r1, #12]
1a00704c:	6099      	str	r1, [r3, #8]
1a00704e:	f200 80b8 	bhi.w	1a0071c2 <_realloc_r+0x3aa>
1a007052:	2a13      	cmp	r2, #19
1a007054:	f240 80a9 	bls.w	1a0071aa <_realloc_r+0x392>
1a007058:	6833      	ldr	r3, [r6, #0]
1a00705a:	f8ca 3008 	str.w	r3, [sl, #8]
1a00705e:	6873      	ldr	r3, [r6, #4]
1a007060:	f8ca 300c 	str.w	r3, [sl, #12]
1a007064:	2a1b      	cmp	r2, #27
1a007066:	f200 80b5 	bhi.w	1a0071d4 <_realloc_r+0x3bc>
1a00706a:	3608      	adds	r6, #8
1a00706c:	f10a 0310 	add.w	r3, sl, #16
1a007070:	6832      	ldr	r2, [r6, #0]
1a007072:	601a      	str	r2, [r3, #0]
1a007074:	6872      	ldr	r2, [r6, #4]
1a007076:	605a      	str	r2, [r3, #4]
1a007078:	68b2      	ldr	r2, [r6, #8]
1a00707a:	609a      	str	r2, [r3, #8]
1a00707c:	eb0a 0205 	add.w	r2, sl, r5
1a007080:	ebc5 030c 	rsb	r3, r5, ip
1a007084:	f043 0301 	orr.w	r3, r3, #1
1a007088:	f8cb 2008 	str.w	r2, [fp, #8]
1a00708c:	6053      	str	r3, [r2, #4]
1a00708e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007092:	f003 0301 	and.w	r3, r3, #1
1a007096:	431d      	orrs	r5, r3
1a007098:	4648      	mov	r0, r9
1a00709a:	f8ca 5004 	str.w	r5, [sl, #4]
1a00709e:	f7ff f959 	bl	1a006354 <__malloc_unlock>
1a0070a2:	4638      	mov	r0, r7
1a0070a4:	e769      	b.n	1a006f7a <_realloc_r+0x162>
1a0070a6:	6833      	ldr	r3, [r6, #0]
1a0070a8:	6003      	str	r3, [r0, #0]
1a0070aa:	6873      	ldr	r3, [r6, #4]
1a0070ac:	6043      	str	r3, [r0, #4]
1a0070ae:	2a1b      	cmp	r2, #27
1a0070b0:	d829      	bhi.n	1a007106 <_realloc_r+0x2ee>
1a0070b2:	f100 0308 	add.w	r3, r0, #8
1a0070b6:	f106 0208 	add.w	r2, r6, #8
1a0070ba:	e78b      	b.n	1a006fd4 <_realloc_r+0x1bc>
1a0070bc:	463b      	mov	r3, r7
1a0070be:	6832      	ldr	r2, [r6, #0]
1a0070c0:	601a      	str	r2, [r3, #0]
1a0070c2:	6872      	ldr	r2, [r6, #4]
1a0070c4:	605a      	str	r2, [r3, #4]
1a0070c6:	68b2      	ldr	r2, [r6, #8]
1a0070c8:	609a      	str	r2, [r3, #8]
1a0070ca:	463e      	mov	r6, r7
1a0070cc:	4674      	mov	r4, lr
1a0070ce:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0070d2:	46d0      	mov	r8, sl
1a0070d4:	e740      	b.n	1a006f58 <_realloc_r+0x140>
1a0070d6:	eb08 0205 	add.w	r2, r8, r5
1a0070da:	1b4b      	subs	r3, r1, r5
1a0070dc:	f043 0301 	orr.w	r3, r3, #1
1a0070e0:	f8cb 2008 	str.w	r2, [fp, #8]
1a0070e4:	6053      	str	r3, [r2, #4]
1a0070e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a0070ea:	f003 0301 	and.w	r3, r3, #1
1a0070ee:	431d      	orrs	r5, r3
1a0070f0:	4648      	mov	r0, r9
1a0070f2:	f846 5c04 	str.w	r5, [r6, #-4]
1a0070f6:	f7ff f92d 	bl	1a006354 <__malloc_unlock>
1a0070fa:	4630      	mov	r0, r6
1a0070fc:	e73d      	b.n	1a006f7a <_realloc_r+0x162>
1a0070fe:	4631      	mov	r1, r6
1a007100:	f7ff fe26 	bl	1a006d50 <memmove>
1a007104:	e76c      	b.n	1a006fe0 <_realloc_r+0x1c8>
1a007106:	68b3      	ldr	r3, [r6, #8]
1a007108:	6083      	str	r3, [r0, #8]
1a00710a:	68f3      	ldr	r3, [r6, #12]
1a00710c:	60c3      	str	r3, [r0, #12]
1a00710e:	2a24      	cmp	r2, #36	; 0x24
1a007110:	d02c      	beq.n	1a00716c <_realloc_r+0x354>
1a007112:	f100 0310 	add.w	r3, r0, #16
1a007116:	f106 0210 	add.w	r2, r6, #16
1a00711a:	e75b      	b.n	1a006fd4 <_realloc_r+0x1bc>
1a00711c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007120:	f022 0203 	bic.w	r2, r2, #3
1a007124:	4414      	add	r4, r2
1a007126:	e717      	b.n	1a006f58 <_realloc_r+0x140>
1a007128:	4631      	mov	r1, r6
1a00712a:	4638      	mov	r0, r7
1a00712c:	4674      	mov	r4, lr
1a00712e:	463e      	mov	r6, r7
1a007130:	f7ff fe0e 	bl	1a006d50 <memmove>
1a007134:	46d0      	mov	r8, sl
1a007136:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00713a:	e70d      	b.n	1a006f58 <_realloc_r+0x140>
1a00713c:	463a      	mov	r2, r7
1a00713e:	e700      	b.n	1a006f42 <_realloc_r+0x12a>
1a007140:	4631      	mov	r1, r6
1a007142:	4638      	mov	r0, r7
1a007144:	461c      	mov	r4, r3
1a007146:	463e      	mov	r6, r7
1a007148:	f7ff fe02 	bl	1a006d50 <memmove>
1a00714c:	46d0      	mov	r8, sl
1a00714e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a007152:	e701      	b.n	1a006f58 <_realloc_r+0x140>
1a007154:	68b3      	ldr	r3, [r6, #8]
1a007156:	f8ca 3010 	str.w	r3, [sl, #16]
1a00715a:	68f3      	ldr	r3, [r6, #12]
1a00715c:	f8ca 3014 	str.w	r3, [sl, #20]
1a007160:	2a24      	cmp	r2, #36	; 0x24
1a007162:	d018      	beq.n	1a007196 <_realloc_r+0x37e>
1a007164:	3610      	adds	r6, #16
1a007166:	f10a 0318 	add.w	r3, sl, #24
1a00716a:	e7a8      	b.n	1a0070be <_realloc_r+0x2a6>
1a00716c:	6933      	ldr	r3, [r6, #16]
1a00716e:	6103      	str	r3, [r0, #16]
1a007170:	6973      	ldr	r3, [r6, #20]
1a007172:	6143      	str	r3, [r0, #20]
1a007174:	f106 0218 	add.w	r2, r6, #24
1a007178:	f100 0318 	add.w	r3, r0, #24
1a00717c:	e72a      	b.n	1a006fd4 <_realloc_r+0x1bc>
1a00717e:	68b1      	ldr	r1, [r6, #8]
1a007180:	f8ca 1010 	str.w	r1, [sl, #16]
1a007184:	68f1      	ldr	r1, [r6, #12]
1a007186:	f8ca 1014 	str.w	r1, [sl, #20]
1a00718a:	2a24      	cmp	r2, #36	; 0x24
1a00718c:	d00f      	beq.n	1a0071ae <_realloc_r+0x396>
1a00718e:	3610      	adds	r6, #16
1a007190:	f10a 0218 	add.w	r2, sl, #24
1a007194:	e6d5      	b.n	1a006f42 <_realloc_r+0x12a>
1a007196:	6933      	ldr	r3, [r6, #16]
1a007198:	f8ca 3018 	str.w	r3, [sl, #24]
1a00719c:	6973      	ldr	r3, [r6, #20]
1a00719e:	f8ca 301c 	str.w	r3, [sl, #28]
1a0071a2:	3618      	adds	r6, #24
1a0071a4:	f10a 0320 	add.w	r3, sl, #32
1a0071a8:	e789      	b.n	1a0070be <_realloc_r+0x2a6>
1a0071aa:	463b      	mov	r3, r7
1a0071ac:	e760      	b.n	1a007070 <_realloc_r+0x258>
1a0071ae:	6932      	ldr	r2, [r6, #16]
1a0071b0:	f8ca 2018 	str.w	r2, [sl, #24]
1a0071b4:	6972      	ldr	r2, [r6, #20]
1a0071b6:	f8ca 201c 	str.w	r2, [sl, #28]
1a0071ba:	3618      	adds	r6, #24
1a0071bc:	f10a 0220 	add.w	r2, sl, #32
1a0071c0:	e6bf      	b.n	1a006f42 <_realloc_r+0x12a>
1a0071c2:	4631      	mov	r1, r6
1a0071c4:	4638      	mov	r0, r7
1a0071c6:	f8cd c004 	str.w	ip, [sp, #4]
1a0071ca:	f7ff fdc1 	bl	1a006d50 <memmove>
1a0071ce:	f8dd c004 	ldr.w	ip, [sp, #4]
1a0071d2:	e753      	b.n	1a00707c <_realloc_r+0x264>
1a0071d4:	68b3      	ldr	r3, [r6, #8]
1a0071d6:	f8ca 3010 	str.w	r3, [sl, #16]
1a0071da:	68f3      	ldr	r3, [r6, #12]
1a0071dc:	f8ca 3014 	str.w	r3, [sl, #20]
1a0071e0:	2a24      	cmp	r2, #36	; 0x24
1a0071e2:	d003      	beq.n	1a0071ec <_realloc_r+0x3d4>
1a0071e4:	3610      	adds	r6, #16
1a0071e6:	f10a 0318 	add.w	r3, sl, #24
1a0071ea:	e741      	b.n	1a007070 <_realloc_r+0x258>
1a0071ec:	6933      	ldr	r3, [r6, #16]
1a0071ee:	f8ca 3018 	str.w	r3, [sl, #24]
1a0071f2:	6973      	ldr	r3, [r6, #20]
1a0071f4:	f8ca 301c 	str.w	r3, [sl, #28]
1a0071f8:	3618      	adds	r6, #24
1a0071fa:	f10a 0320 	add.w	r3, sl, #32
1a0071fe:	e737      	b.n	1a007070 <_realloc_r+0x258>
1a007200:	100004e4 	.word	0x100004e4

1a007204 <__gedf2>:
1a007204:	f04f 3cff 	mov.w	ip, #4294967295
1a007208:	e006      	b.n	1a007218 <__cmpdf2+0x4>
1a00720a:	bf00      	nop

1a00720c <__ledf2>:
1a00720c:	f04f 0c01 	mov.w	ip, #1
1a007210:	e002      	b.n	1a007218 <__cmpdf2+0x4>
1a007212:	bf00      	nop

1a007214 <__cmpdf2>:
1a007214:	f04f 0c01 	mov.w	ip, #1
1a007218:	f84d cd04 	str.w	ip, [sp, #-4]!
1a00721c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007224:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007228:	bf18      	it	ne
1a00722a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00722e:	d01b      	beq.n	1a007268 <__cmpdf2+0x54>
1a007230:	b001      	add	sp, #4
1a007232:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a007236:	bf0c      	ite	eq
1a007238:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a00723c:	ea91 0f03 	teqne	r1, r3
1a007240:	bf02      	ittt	eq
1a007242:	ea90 0f02 	teqeq	r0, r2
1a007246:	2000      	moveq	r0, #0
1a007248:	4770      	bxeq	lr
1a00724a:	f110 0f00 	cmn.w	r0, #0
1a00724e:	ea91 0f03 	teq	r1, r3
1a007252:	bf58      	it	pl
1a007254:	4299      	cmppl	r1, r3
1a007256:	bf08      	it	eq
1a007258:	4290      	cmpeq	r0, r2
1a00725a:	bf2c      	ite	cs
1a00725c:	17d8      	asrcs	r0, r3, #31
1a00725e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a007262:	f040 0001 	orr.w	r0, r0, #1
1a007266:	4770      	bx	lr
1a007268:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00726c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007270:	d102      	bne.n	1a007278 <__cmpdf2+0x64>
1a007272:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007276:	d107      	bne.n	1a007288 <__cmpdf2+0x74>
1a007278:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a00727c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007280:	d1d6      	bne.n	1a007230 <__cmpdf2+0x1c>
1a007282:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007286:	d0d3      	beq.n	1a007230 <__cmpdf2+0x1c>
1a007288:	f85d 0b04 	ldr.w	r0, [sp], #4
1a00728c:	4770      	bx	lr
1a00728e:	bf00      	nop

1a007290 <__aeabi_cdrcmple>:
1a007290:	4684      	mov	ip, r0
1a007292:	4610      	mov	r0, r2
1a007294:	4662      	mov	r2, ip
1a007296:	468c      	mov	ip, r1
1a007298:	4619      	mov	r1, r3
1a00729a:	4663      	mov	r3, ip
1a00729c:	e000      	b.n	1a0072a0 <__aeabi_cdcmpeq>
1a00729e:	bf00      	nop

1a0072a0 <__aeabi_cdcmpeq>:
1a0072a0:	b501      	push	{r0, lr}
1a0072a2:	f7ff ffb7 	bl	1a007214 <__cmpdf2>
1a0072a6:	2800      	cmp	r0, #0
1a0072a8:	bf48      	it	mi
1a0072aa:	f110 0f00 	cmnmi.w	r0, #0
1a0072ae:	bd01      	pop	{r0, pc}

1a0072b0 <__aeabi_dcmpeq>:
1a0072b0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0072b4:	f7ff fff4 	bl	1a0072a0 <__aeabi_cdcmpeq>
1a0072b8:	bf0c      	ite	eq
1a0072ba:	2001      	moveq	r0, #1
1a0072bc:	2000      	movne	r0, #0
1a0072be:	f85d fb08 	ldr.w	pc, [sp], #8
1a0072c2:	bf00      	nop

1a0072c4 <__aeabi_dcmplt>:
1a0072c4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0072c8:	f7ff ffea 	bl	1a0072a0 <__aeabi_cdcmpeq>
1a0072cc:	bf34      	ite	cc
1a0072ce:	2001      	movcc	r0, #1
1a0072d0:	2000      	movcs	r0, #0
1a0072d2:	f85d fb08 	ldr.w	pc, [sp], #8
1a0072d6:	bf00      	nop

1a0072d8 <__aeabi_dcmple>:
1a0072d8:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0072dc:	f7ff ffe0 	bl	1a0072a0 <__aeabi_cdcmpeq>
1a0072e0:	bf94      	ite	ls
1a0072e2:	2001      	movls	r0, #1
1a0072e4:	2000      	movhi	r0, #0
1a0072e6:	f85d fb08 	ldr.w	pc, [sp], #8
1a0072ea:	bf00      	nop

1a0072ec <__aeabi_dcmpge>:
1a0072ec:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0072f0:	f7ff ffce 	bl	1a007290 <__aeabi_cdrcmple>
1a0072f4:	bf94      	ite	ls
1a0072f6:	2001      	movls	r0, #1
1a0072f8:	2000      	movhi	r0, #0
1a0072fa:	f85d fb08 	ldr.w	pc, [sp], #8
1a0072fe:	bf00      	nop

1a007300 <__aeabi_dcmpgt>:
1a007300:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007304:	f7ff ffc4 	bl	1a007290 <__aeabi_cdrcmple>
1a007308:	bf34      	ite	cc
1a00730a:	2001      	movcc	r0, #1
1a00730c:	2000      	movcs	r0, #0
1a00730e:	f85d fb08 	ldr.w	pc, [sp], #8
1a007312:	bf00      	nop

1a007314 <__aeabi_d2iz>:
1a007314:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007318:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a00731c:	d215      	bcs.n	1a00734a <__aeabi_d2iz+0x36>
1a00731e:	d511      	bpl.n	1a007344 <__aeabi_d2iz+0x30>
1a007320:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a007324:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007328:	d912      	bls.n	1a007350 <__aeabi_d2iz+0x3c>
1a00732a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00732e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a007332:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a007336:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a00733a:	fa23 f002 	lsr.w	r0, r3, r2
1a00733e:	bf18      	it	ne
1a007340:	4240      	negne	r0, r0
1a007342:	4770      	bx	lr
1a007344:	f04f 0000 	mov.w	r0, #0
1a007348:	4770      	bx	lr
1a00734a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a00734e:	d105      	bne.n	1a00735c <__aeabi_d2iz+0x48>
1a007350:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a007354:	bf08      	it	eq
1a007356:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a00735a:	4770      	bx	lr
1a00735c:	f04f 0000 	mov.w	r0, #0
1a007360:	4770      	bx	lr
1a007362:	bf00      	nop
1a007364:	0a0d5441 	.word	0x0a0d5441
1a007368:	00000000 	.word	0x00000000
1a00736c:	522b5441 	.word	0x522b5441
1a007370:	0a0d5453 	.word	0x0a0d5453
1a007374:	00000000 	.word	0x00000000
1a007378:	432b5441 	.word	0x432b5441
1a00737c:	444f4d57 	.word	0x444f4d57
1a007380:	00003d45 	.word	0x00003d45
1a007384:	00000a0d 	.word	0x00000a0d
1a007388:	432b5441 	.word	0x432b5441
1a00738c:	554d5049 	.word	0x554d5049
1a007390:	00003d58 	.word	0x00003d58
1a007394:	432b5441 	.word	0x432b5441
1a007398:	50414a57 	.word	0x50414a57
1a00739c:	0000223d 	.word	0x0000223d
1a0073a0:	00222c22 	.word	0x00222c22
1a0073a4:	000a0d22 	.word	0x000a0d22
1a0073a8:	00004b4f 	.word	0x00004b4f
1a0073ac:	49464957 	.word	0x49464957
1a0073b0:	4e4f4320 	.word	0x4e4f4320
1a0073b4:	5443454e 	.word	0x5443454e
1a0073b8:	00004445 	.word	0x00004445
1a0073bc:	49464957 	.word	0x49464957
1a0073c0:	544f4720 	.word	0x544f4720
1a0073c4:	00504920 	.word	0x00504920
1a0073c8:	432b5441 	.word	0x432b5441
1a0073cc:	54535049 	.word	0x54535049
1a0073d0:	3d545241 	.word	0x3d545241
1a0073d4:	00000000 	.word	0x00000000
1a0073d8:	0000002c 	.word	0x0000002c
1a0073dc:	00002c22 	.word	0x00002c22
1a0073e0:	432b5441 	.word	0x432b5441
1a0073e4:	45535049 	.word	0x45535049
1a0073e8:	003d444e 	.word	0x003d444e
1a0073ec:	0000003e 	.word	0x0000003e
1a0073f0:	432b5441 	.word	0x432b5441
1a0073f4:	4c435049 	.word	0x4c435049
1a0073f8:	0045534f 	.word	0x0045534f
1a0073fc:	0000003d 	.word	0x0000003d
1a007400:	20202020 	.word	0x20202020
1a007404:	20202020 	.word	0x20202020
1a007408:	20202020 	.word	0x20202020
1a00740c:	20202020 	.word	0x20202020
1a007410:	20202020 	.word	0x20202020
1a007414:	00000000 	.word	0x00000000
1a007418:	796f7250 	.word	0x796f7250
1a00741c:	6f746365 	.word	0x6f746365
1a007420:	6e694620 	.word	0x6e694620
1a007424:	50206c61 	.word	0x50206c61
1a007428:	00455343 	.word	0x00455343
1a00742c:	535f5446 	.word	0x535f5446
1a007430:	48434e41 	.word	0x48434e41
1a007434:	00005a45 	.word	0x00005a45
1a007438:	31343130 	.word	0x31343130
1a00743c:	34383434 	.word	0x34383434
1a007440:	00353131 	.word	0x00353131
1a007444:	706d6554 	.word	0x706d6554
1a007448:	74617265 	.word	0x74617265
1a00744c:	3a657275 	.word	0x3a657275
1a007450:	34302520 	.word	0x34302520
1a007454:	4366312e 	.word	0x4366312e
1a007458:	00000000 	.word	0x00000000
1a00745c:	54534f50 	.word	0x54534f50
1a007460:	70612f20 	.word	0x70612f20
1a007464:	31762f69 	.word	0x31762f69
1a007468:	642f362e 	.word	0x642f362e
1a00746c:	63697665 	.word	0x63697665
1a007470:	252f7365 	.word	0x252f7365
1a007474:	743f2f73 	.word	0x743f2f73
1a007478:	6e656b6f 	.word	0x6e656b6f
1a00747c:	2073253d 	.word	0x2073253d
1a007480:	50545448 	.word	0x50545448
1a007484:	312e312f 	.word	0x312e312f
1a007488:	6f480a0d 	.word	0x6f480a0d
1a00748c:	203a7473 	.word	0x203a7473
1a007490:	6e696874 	.word	0x6e696874
1a007494:	752e7367 	.word	0x752e7367
1a007498:	6f646962 	.word	0x6f646962
1a00749c:	632e7374 	.word	0x632e7374
1a0074a0:	0a0d6d6f 	.word	0x0a0d6d6f
1a0074a4:	746e6f43 	.word	0x746e6f43
1a0074a8:	2d746e65 	.word	0x2d746e65
1a0074ac:	65707954 	.word	0x65707954
1a0074b0:	7061203a 	.word	0x7061203a
1a0074b4:	63696c70 	.word	0x63696c70
1a0074b8:	6f697461 	.word	0x6f697461
1a0074bc:	736a2f6e 	.word	0x736a2f6e
1a0074c0:	0a0d6e6f 	.word	0x0a0d6e6f
1a0074c4:	746e6f43 	.word	0x746e6f43
1a0074c8:	2d746e65 	.word	0x2d746e65
1a0074cc:	676e654c 	.word	0x676e654c
1a0074d0:	203a6874 	.word	0x203a6874
1a0074d4:	0a0d3331 	.word	0x0a0d3331
1a0074d8:	227b0a0d 	.word	0x227b0a0d
1a0074dc:	3a227325 	.word	0x3a227325
1a0074e0:	2e343025 	.word	0x2e343025
1a0074e4:	007d6631 	.word	0x007d6631
1a0074e8:	65736370 	.word	0x65736370
1a0074ec:	00000000 	.word	0x00000000
1a0074f0:	2d453141 	.word	0x2d453141
1a0074f4:	6b4e5648 	.word	0x6b4e5648
1a0074f8:	45383937 	.word	0x45383937
1a0074fc:	6e4b6530 	.word	0x6e4b6530
1a007500:	63533778 	.word	0x63533778
1a007504:	7935626c 	.word	0x7935626c
1a007508:	55547568 	.word	0x55547568
1a00750c:	5755454b 	.word	0x5755454b
1a007510:	0000714d 	.word	0x0000714d
1a007514:	706d6574 	.word	0x706d6574
1a007518:	00000000 	.word	0x00000000
1a00751c:	00504354 	.word	0x00504354
1a007520:	6e696874 	.word	0x6e696874
1a007524:	752e7367 	.word	0x752e7367
1a007528:	6f646962 	.word	0x6f646962
1a00752c:	632e7374 	.word	0x632e7374
1a007530:	00006d6f 	.word	0x00006d6f
1a007534:	6e676953 	.word	0x6e676953
1a007538:	203a6c61 	.word	0x203a6c61
1a00753c:	6464252d 	.word	0x6464252d
1a007540:	20206d62 	.word	0x20206d62
1a007544:	00000020 	.word	0x00000020
1a007548:	706d6554 	.word	0x706d6554
1a00754c:	74617265 	.word	0x74617265
1a007550:	3a657275 	.word	0x3a657275
1a007554:	34302520 	.word	0x34302520
1a007558:	2c66312e 	.word	0x2c66312e
1a00755c:	67695320 	.word	0x67695320
1a007560:	3a6c616e 	.word	0x3a6c616e
1a007564:	64252d20 	.word	0x64252d20
1a007568:	006d6264 	.word	0x006d6264
1a00756c:	36393332 	.word	0x36393332
1a007570:	32363834 	.word	0x32363834
1a007574:	00003531 	.word	0x00003531

1a007578 <operation>:
1a007578:	00000009 3f000000 0008005e 0000000a     .......?^.......
1a007588:	3e800000 000a00bc 0000000b 3e000000     ...>...........>
1a007598:	000e0177 0000000c 3d800000 000f02ee     w..........=....
1a0075a8:	432b5441 3d46474d 000a0d31 432b5441     AT+CMGF=1...AT+C
1a0075b8:	3d53474d 00000022 0000003a 432b5441     MGS="...:...AT+C
1a0075c8:	0a0d5153 00000000 7778797a 73747576     SQ......zyxwvuts
1a0075d8:	6f707172 6b6c6d6e 6768696a 63646566     rqponmlkjihgfedc
1a0075e8:	38396162 34353637 30313233 34333231     ba98765432101234
1a0075f8:	38373635 63626139 67666564 6b6a6968     56789abcdefghijk
1a007608:	6f6e6d6c 73727170 77767574 007a7978     lmnopqrstuvwxyz.
1a007618:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a007628:	00000000                                ....

1a00762c <gpioPinsInit>:
1a00762c:	02000104 00050701 05010d03 04080100     ................
1a00763c:	02020002 02000304 00000403 04070002     ................
1a00764c:	030c0300 09050402 05040103 04030208     ................
1a00765c:	04020305 06040504 0802000c 03000b06     ................
1a00766c:	00090607 07060503 060f0504 03030004     ................
1a00767c:	02000404 00050404 06040502 04060200     ................
1a00768c:	0c050408 05040a04 0003010e 14010a00     ................
1a00769c:	010f0000 0d000012 00001101 0010010c     ................
1a0076ac:	07070300 000f0300 01000001 00000000     ................
1a0076bc:	000a0600 08060603 06100504 04030005     ................
1a0076cc:	03000106 04090400 04010d05 010b0000     ................
1a0076dc:	0200000f 00000001 00010104 02010800     ................
1a0076ec:	01090000 09010006 05040002 04010200     ................
1a0076fc:	02020105 02020504 0e00000a 01000b02     ................
1a00770c:	000c020b 00040c01 04000200 01020001     ................
1a00771c:	02000204 00030402 03070302 070b0300     ................
1a00772c:	0c030004 03000507 0006070d 01020e03     ................
1a00773c:	04010504 06020006 02000504 00040405     ................
1a00774c:	08040402 040c0504 0d050409 05040a04     ................
1a00775c:	0005010e 00000801                       ........

1a007764 <lpcUarts>:
1a007764:	40081000 06020406 00180205 40081000     ...@...........@
1a007774:	09070509 00180706 40082000 00000000     ......... .@....
1a007784:	00190000 400c1000 07060107 001a0602     .......@........
1a007794:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0077a4:	02020302 001b0204                       ........

1a0077ac <GpioPorts>:
1a0077ac:	03030003 0f050403 05031005 07030603     ................
1a0077bc:	00000802                                ....

1a0077c0 <OscRateIn>:
1a0077c0:	00b71b00                                ....

1a0077c4 <ExtRateIn>:
1a0077c4:	00000000                                ....

1a0077c8 <GpioButtons>:
1a0077c8:	08000400 09010900                       ........

1a0077d0 <GpioLeds>:
1a0077d0:	01050005 0e000205 0c010b01              ............

1a0077dc <InitClkStates>:
1a0077dc:	00010308 00010307 01010f01              ............

1a0077e8 <pinmuxing>:
1a0077e8:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0077f8:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007808:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007818:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007828:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007838:	00d50301 00d50401 00160107 00560207     ..............V.
1a007848:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007858:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a007868:	00b31201 00f01301 00b31401 00b60707     ................
1a007878:	00f20000 00b60100                       ........

1a007880 <UART_BClock>:
1a007880:	01a201c2 01620182                       ......b.

1a007888 <UART_PClock>:
1a007888:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007898:	000000ff                                ....

1a00789c <periph_to_base>:
1a00789c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0078ac:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0078bc:	000100e0 01000100 01200003 00060120     .......... . ...
1a0078cc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0078dc:	01820013 00120182 01a201a2 01c20011     ................
1a0078ec:	001001c2 01e201e2 0202000f 000e0202     ................
1a0078fc:	02220222 0223000d 001c0223              "."...#.#...

1a007908 <InitClkStates>:
1a007908:	00010100 00010909 0001090a 01010701     ................
1a007918:	00010902 00010906 0101090c 0001090d     ................
1a007928:	0001090e 0001090f 00010910 00010911     ................
1a007938:	00010912 00010913 00011114 00011119     ................
1a007948:	0001111a 0001111b                       ........

1a007950 <zeroes.6916>:
1a007950:	30303030 30303030 30303030 30303030     0000000000000000
1a007960:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a007970:	33323130 37363534 62613938 66656463     0123456789abcdef
1a007980:	00000000 6c756e28 0000296c 00000030     ....(null)..0...

1a007990 <blanks.6915>:
1a007990:	20202020 20202020 20202020 20202020                     
1a0079a0:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
1a0079b0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

1a0079c0 <p05.5296>:
1a0079c0:	00000005 00000019 0000007d 00000000     ........}.......

1a0079d0 <__mprec_tens>:
1a0079d0:	00000000 3ff00000 00000000 40240000     .......?......$@
1a0079e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a0079f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a007a00:	00000000 412e8480 00000000 416312d0     .......A......cA
1a007a10:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a007a20:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a007a30:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a007a40:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a007a50:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a007a60:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a007a70:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a007a80:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a007a90:	79d99db4 44ea7843                       ...yCx.D

1a007a98 <__mprec_bigtens>:
1a007a98:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a007aa8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a007ab8:	7f73bf3c 75154fdd                       <.s..O.u
