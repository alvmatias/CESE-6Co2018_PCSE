
examples/PCSE/P01/out/P01.elf:     file format elf32-littlearm
examples/PCSE/P01/out/P01.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00399d

Program Header:
0x70000001 off    0x0000c444 vaddr 0x1a004444 paddr 0x1a004444 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x000005dc flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x0000444c memsz 0x0000444c flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a00444c align 2**15
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004444  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a00444c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
  6 .bss          0000050c  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a004444  1a004444  0000c444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000100cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 17 .noinit       00000000  100005dc  100005dc  000100cc  2**2
                  CONTENTS
 18 .debug_info   000194ba  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003f93  00000000  00000000  00029586  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000b49a  00000000  00000000  0002d519  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000cd0  00000000  00000000  000389b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000b60  00000000  00000000  00039683  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000c10d  00000000  00000000  0003a1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   000104ee  00000000  00000000  000462f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001f6fe  00000000  00000000  000567de  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  00075edc  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  00075f4c  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000022ac  00000000  00000000  00075f88  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004444 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100005dc l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002484 l     F .text	000000b4 uartProcessIRQ
100005a4 l     O .bss	00000004 rxIsrCallbackUART0
100005a8 l     O .bss	00000004 txIsrCallbackUART0
100005ac l     O .bss	00000004 txIsrCallbackUART2
100005b0 l     O .bss	00000004 txIsrCallbackUART3
1a004258 l     O .text	00000048 lpcUarts
100005b4 l     O .bss	00000004 rxIsrCallbackUART2
100005b8 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
1a000300 l     F .text	0000016c rtcToString
100000d0 l     O .bss	00000228 fp
100002f8 l     O .bss	00000006 CH1String
10000300 l     O .bss	00000230 fs
10000530 l     O .bss	00000006 CH2String
10000538 l     O .bss	00000006 CH3String
10000540 l     O .bss	00000016 rtcString
10000558 l     O .bss	00000034 textToWrite
00000000 l    df *ABS*	00000000 ff.c
1a00063c l     F .text	0000000a ld_word
1a000648 l     F .text	00000016 ld_dword
1a000660 l     F .text	00000008 st_word
1a000668 l     F .text	00000014 st_dword
1a00067c l     F .text	00000012 mem_cpy
1a000690 l     F .text	0000000a mem_set
1a00069c l     F .text	0000001e mem_cmp
1a0006bc l     F .text	00000010 chk_chr
1a0006cc l     F .text	00000018 clust2sect
1a0006e4 l     F .text	00000024 ld_clust
1a000708 l     F .text	00000024 st_clust
1a00072c l     F .text	000000d0 create_name
1a0007fc l     F .text	00000056 get_ldnumber
1a000854 l     F .text	00000034 validate
1a000888 l     F .text	00000054 sync_window
1a0008dc l     F .text	00000034 move_window
1a000910 l     F .text	0000007c check_fs
1a00098c l     F .text	000002d4 find_volume
1a000c60 l     F .text	0000010a put_fat
1a000d6c l     F .text	000000d0 get_fat
1a000e3c l     F .text	000000b0 dir_sdi
1a000eec l     F .text	000000ca create_chain
1a000fb8 l     F .text	0000007c remove_chain
1a001034 l     F .text	00000126 dir_next
1a00115c l     F .text	00000054 dir_find
1a0011b0 l     F .text	0000008c follow_path
1a00123c l     F .text	0000004c dir_alloc
1a001288 l     F .text	0000003a dir_register
1a0012c4 l     F .text	0000008c sync_fs
1000058c l     O .bss	00000002 Fsid
10000590 l     O .bss	00000004 FatFs
00000000 l    df *ABS*	00000000 mmc.c
1a0017ec l     F .text	00000004 chk_power
1a0017f0 l     F .text	00000024 SSPSend
1a001814 l     F .text	00000018 xmit_spi
1a001850 l     F .text	0000001c rcvr_spi
1a00186c l     F .text	00000024 wait_ready
1a001890 l     F .text	00000018 deselect
1a0018a8 l     F .text	00000024 select_
1a0018cc l     F .text	0000007e send_cmd
1a00194c l     F .text	0000005c xmit_datablock
1a0019a8 l     F .text	00000064 rcvr_datablock
10000594 l     O .bss	00000001 pv.10205
10000595 l     O .bss	00000001 Timer1
10000596 l     O .bss	00000001 Timer2
10000597 l     O .bss	00000001 CardType
10000000 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_rtc.c
10000598 l     O .bss	00000001 init.10204
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002050 l     F .text	00000010 clearInterrupt
1a002060 l     F .text	00000060 serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a0040c0 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_convert.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a002170 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a002638 l     F .text	00000002 errorOcurred
1a00263c l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a002918 l     F .text	00000040 Board_LED_Init
1a002958 l     F .text	0000003c Board_TEC_Init
1a002994 l     F .text	0000003c Board_GPIO_Init
1a0029d0 l     F .text	00000038 Board_SPI_Init
1a002a08 l     F .text	00000024 Board_I2C_Init
1a002a2c l     F .text	00000030 Board_ADC_Init
1a0042a0 l     O .text	00000012 GpioPorts
1a0042bc l     O .text	00000008 GpioButtons
1a0042c4 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0042d0 l     O .text	0000000c InitClkStates
1a0042dc l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002b84 l     F .text	0000002c Chip_UART_GetIndex
1a004374 l     O .text	00000008 UART_BClock
1a00437c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a002ce8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a002cfc l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002ecc l     F .text	000000a8 pll_calc_divs
1a002f74 l     F .text	00000104 pll_get_frac
1a003078 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0032e4 l     F .text	00000022 Chip_Clock_GetDivRate
100005bc l     O .bss	00000008 audio_usb_pll_freq
1a004390 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0043fc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0037a8 l     F .text	0000001a SSP_Write2BFifo
1a0037c4 l     F .text	00000018 SSP_Write1BFifo
1a0037dc l     F .text	0000002a SSP_Read2BFifo
1a003808 l     F .text	0000002a SSP_Read1BFifo
1a003834 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003848 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_ldivmod.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a00444c l       .ARM.exidx	00000000 __exidx_end
1a00444c l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a004444 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a004444 l       .bss_RAM5	00000000 __init_array_end
1a004444 l       .bss_RAM5	00000000 __preinit_array_end
100005dc l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a004444 l       .bss_RAM5	00000000 __init_array_start
1a004444 l       .bss_RAM5	00000000 __preinit_array_start
1a00310c g     F .text	0000001c Chip_Clock_GetDividerSource
1a003ab8 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a0026bc g     F .text	00000040 TIMER2_IRQHandler
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a002d94 g     F .text	00000016 Chip_ADC_DeInit
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a003aec g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0020e4 g     F .text	0000008c int64ToString
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a003548 g     F .text	00000030 Chip_RTC_GetFullTime
1a0025f8 g     F .text	0000003e delayRead
100005a0 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a002e60 g     F .text	0000000c Chip_ADC_SetResolution
1a002454 g     F .text	00000030 SysTick_Handler
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
53ff3ea2 g       *ABS*	00000000 __valid_user_code_checksum
1a001fb8 g     F .text	00000034 rtcRead
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a0026fc g     F .text	00000040 TIMER3_IRQHandler
1a003370 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a001a0c g     F .text	00000158 disk_initialize
1a003a58 g     F .text	00000000 .hidden __aeabi_uldivmod
100005dc g       .noinit	00000000 _noinit
100005d8 g     O .bss	00000004 SystemCoreClock
1a002bb0 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a002d3c g     F .text	00000018 readAdcVal
1a000194  w    F .text	00000002 UsageFault_Handler
1a003438 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
100005c8 g     O .bss	00000008 tickCounter
1a001b64 g     F .text	00000014 disk_status
1a002b0c g     F .text	0000006c Board_SetupClocking
1a0042b8 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001cac g     F .text	00000284 disk_ioctl
1a0020cc g     F .text	0000000a GPIO1_IRQHandler
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a00201c g     F .text	00000034 rtcInit
1a0002fc g     O .text	00000004 CRP_WORD
1a002d2c g     F .text	0000000e setStartMode
1a003ff4 g     F .text	0000004c __libc_init_array
1a003d88 g     F .text	0000026a .hidden __udivdi3
1a00273c g     F .text	0000008c adcInit
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a002a80 g     F .text	0000003c Board_Init
1a003a1c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a003874 g     F .text	000000b0 Chip_SSP_RWFrames_Blocking
1a0001a8  w    F .text	00000002 RTC_IRQHandler
100005dc g       .bss	00000000 _ebss
1a002e6c g     F .text	00000026 Chip_ADC_EnableChannel
1a002640 g     F .text	0000003c TIMER0_IRQHandler
1a0023d8 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a003778 g     F .text	00000030 Chip_I2C_SetClockRate
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a0030c0 g     F .text	0000004c Chip_Clock_EnableCrystal
1a003518 g     F .text	0000002e Chip_RTC_SetFullTime
1a002dac g     F .text	00000008 Chip_ADC_ReadValue
1a0001ac g     F .text	0000001a data_init
1a003500 g     F .text	00000018 Chip_RTC_Enable
1a002e0c g     F .text	00000020 Chip_ADC_SetStartMode
1a00267c g     F .text	00000040 TIMER1_IRQHandler
1a003754 g     F .text	00000024 Chip_I2C_Init
1a002538 g     F .text	0000000a UART2_IRQHandler
1a00327c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0034dc g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a004120 g     O .text	00000136 gpioPinsInit
1a003860 g     F .text	00000012 Chip_SSP_SetClockRate
1a0020d8 g     F .text	0000000a GPIO2_IRQHandler
1a0027c8 g     F .text	00000058 adcRead
1a00334c g     F .text	00000024 Chip_Clock_GetBaseClock
1a001f30 g     F .text	0000006c disk_timerproc
100000d0 g       .bss	00000000 _bss
1a002db4 g     F .text	00000038 Chip_ADC_ReadStatus
1a002e2c g     F .text	00000032 Chip_ADC_SetSampleRate
1a0017c8 g     F .text	00000024 f_close
1a0025d8 g     F .text	00000020 delayInit
1a00182c g     F .text	00000024 SSPReceive
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a003924 g     F .text	0000003e Chip_SSP_SetBitRate
1a0035e0 g     F .text	00000002 Chip_GPIO_Init
1a0042b4 g     O .text	00000004 OscRateIn
100005dc g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00046c g     F .text	00000008 diskTickHook
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a00219c g     F .text	0000019c gpioInit
1a002390 g     F .text	00000004 sleepUntilNextInterrupt
1a003598 g     F .text	00000048 Chip_RTC_Init
1a003ae8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a004060 g     F .text	00000028 strncat
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a003404 g     F .text	00000034 Chip_Clock_Disable
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a003128 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a004040 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000474 g     F .text	000001c8 main
1a00172c g     F .text	0000009c f_sync
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a002550 g     F .text	00000050 spiInit
1a000198  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a001350 g     F .text	00000058 f_mount
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a00337c g     F .text	0000003c Chip_Clock_EnableOpts
1a003144 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a003484 g     F .text	00000058 fpuInit
1a0031fc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002abc g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0025a0 g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0033ec g     F .text	00000018 Chip_Clock_RTCEnable
1a002338 g     F .text	00000058 gpioWrite
1a002d54 g     F .text	00000040 Chip_ADC_Init
1a002ad8 g     F .text	00000034 Board_SetupMuxing
1a001fec g     F .text	00000030 rtcWrite
1a002c04 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a002394 g     F .text	0000000c tickRead
100005d0 g     O .bss	00000008 tickRateMS
1a002e94 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001a8  w    F .text	00000002 ETH_IRQHandler
1000059c g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a0023a0 g     F .text	00000020 tickCallbackSet
1a000178 g       .text	00000000 __section_table_end
1a003964 g     F .text	00000038 Chip_SSP_Init
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a002a5c g     F .text	00000024 Board_Debug_Init
1a002dec g     F .text	0000001e Chip_ADC_Int_SetChannelCmd
100000cc g       .data	00000000 _edata
1a003734 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001584 g     F .text	000001a8 f_write
1a0035e4 g     F .text	00000150 Chip_SetupCoreClock
1a0020c0 g     F .text	0000000a GPIO0_IRQHandler
1a0013a8 g     F .text	000001dc f_open
1a001c00 g     F .text	000000ac disk_write
1a000000 g     O .text	00000114 g_pfnVectors
1a00399c g     F .text	00000080 ResetISR
1a002eb8 g     F .text	00000014 SystemCoreClockUpdate
1a003578 g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a003ae8  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a004050 g     F .text	00000010 strlen
1a001b78 g     F .text	00000088 disk_read
1a0033b8 g     F .text	00000034 Chip_Clock_Enable
1a002544 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a003a88 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a002820 g     F .text	000000f8 boardInit
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a003a20 g     F .text	00000000 .hidden __aeabi_ldivmod
1a0023c0 g     F .text	00000018 tickPowerSet
1a003308 g     F .text	00000044 Chip_Clock_SetBaseClock
1a001f9c g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a002b78 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 9d 39 00 1a 85 01 00 1a 89 01 00 1a     .....9..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a a2 3e ff 53     .............>.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	55 24 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     U$..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 41 26 00 1a 7d 26 00 1a bd 26 00 1a     ....A&..}&...&..
1a00007c:	fd 26 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     .&..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 39 25 00 1a     ....y.......9%..
1a0000ac:	45 25 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     E%..............
1a0000bc:	a9 01 00 1a c1 20 00 1a cd 20 00 1a d9 20 00 1a     ..... ... ... ..
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a00444c 	.word	0x1a00444c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a00444c 	.word	0x1a00444c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00444c 	.word	0x1a00444c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00444c 	.word	0x1a00444c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00444c 	.word	0x1a00444c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	0000050c 	.word	0x0000050c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f002 f982 	bl	1a002484 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <rtcToString>:
/*==================[definiciones de datos externos]=========================*/

/*==================[declaraciones de funciones internas]====================*/

// Guarda en str la fecha y hora convertido a string en formato "DD/MM/YYYY HH:MM:SS"
static void rtcToString( char* str, rtc_t* rtc ){
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b085      	sub	sp, #20
1a000304:	460c      	mov	r4, r1

   char rtcMemberString[10];
   rtcString[0] = 0;
1a000306:	4d54      	ldr	r5, [pc, #336]	; (1a000458 <rtcToString+0x158>)
1a000308:	2300      	movs	r3, #0
1a00030a:	702b      	strb	r3, [r5, #0]

   // "YYYY/MM/DD"

   // Conversion de entero a string con base 10 (decimal)
   int64ToString( (rtc->year), rtcMemberString, 10 );
1a00030c:	8820      	ldrh	r0, [r4, #0]
1a00030e:	2100      	movs	r1, #0
1a000310:	aa01      	add	r2, sp, #4
1a000312:	230a      	movs	r3, #10
1a000314:	f001 fee6 	bl	1a0020e4 <int64ToString>
   // Concateno rtcString+year+"/"
   strncat( rtcString, rtcMemberString, strlen(rtcMemberString) );
1a000318:	a801      	add	r0, sp, #4
1a00031a:	f003 fe99 	bl	1a004050 <strlen>
1a00031e:	4602      	mov	r2, r0
1a000320:	4628      	mov	r0, r5
1a000322:	a901      	add	r1, sp, #4
1a000324:	f003 fe9c 	bl	1a004060 <strncat>
   strncat( rtcString, "/", strlen("/") );
1a000328:	4628      	mov	r0, r5
1a00032a:	f003 fe91 	bl	1a004050 <strlen>
1a00032e:	4b4b      	ldr	r3, [pc, #300]	; (1a00045c <rtcToString+0x15c>)
1a000330:	881b      	ldrh	r3, [r3, #0]
1a000332:	522b      	strh	r3, [r5, r0]

   // Conversion de entero a string con base 10 (decimal)
   int64ToString( (rtc->month), rtcMemberString, 10 );
1a000334:	78a0      	ldrb	r0, [r4, #2]
1a000336:	2100      	movs	r1, #0
1a000338:	aa01      	add	r2, sp, #4
1a00033a:	230a      	movs	r3, #10
1a00033c:	f001 fed2 	bl	1a0020e4 <int64ToString>
   if( (rtc->month)<10 ){
1a000340:	78a3      	ldrb	r3, [r4, #2]
1a000342:	2b09      	cmp	r3, #9
1a000344:	d805      	bhi.n	1a000352 <rtcToString+0x52>
      // Concateno rtcString+"0"
      strncat( rtcString, "0", strlen("0") );
1a000346:	4628      	mov	r0, r5
1a000348:	f003 fe82 	bl	1a004050 <strlen>
1a00034c:	4b44      	ldr	r3, [pc, #272]	; (1a000460 <rtcToString+0x160>)
1a00034e:	881b      	ldrh	r3, [r3, #0]
1a000350:	522b      	strh	r3, [r5, r0]
   }
   // Concateno rtcString+month+"/"
   strncat( rtcString, rtcMemberString, strlen(rtcMemberString) );
1a000352:	a801      	add	r0, sp, #4
1a000354:	f003 fe7c 	bl	1a004050 <strlen>
1a000358:	4602      	mov	r2, r0
1a00035a:	4d3f      	ldr	r5, [pc, #252]	; (1a000458 <rtcToString+0x158>)
1a00035c:	4628      	mov	r0, r5
1a00035e:	a901      	add	r1, sp, #4
1a000360:	f003 fe7e 	bl	1a004060 <strncat>
   strncat( rtcString, "/", strlen("/") );
1a000364:	4628      	mov	r0, r5
1a000366:	f003 fe73 	bl	1a004050 <strlen>
1a00036a:	4b3c      	ldr	r3, [pc, #240]	; (1a00045c <rtcToString+0x15c>)
1a00036c:	881b      	ldrh	r3, [r3, #0]
1a00036e:	522b      	strh	r3, [r5, r0]

   // Conversion de entero a string con base 10 (decimal)
   int64ToString( (rtc->mday), rtcMemberString, 10 );
1a000370:	78e0      	ldrb	r0, [r4, #3]
1a000372:	2100      	movs	r1, #0
1a000374:	aa01      	add	r2, sp, #4
1a000376:	230a      	movs	r3, #10
1a000378:	f001 feb4 	bl	1a0020e4 <int64ToString>
   if( (rtc->mday)<10 ){
1a00037c:	78e3      	ldrb	r3, [r4, #3]
1a00037e:	2b09      	cmp	r3, #9
1a000380:	d805      	bhi.n	1a00038e <rtcToString+0x8e>
      // Concateno rtcString+"0"
      strncat( rtcString, "0", strlen("0") );
1a000382:	4628      	mov	r0, r5
1a000384:	f003 fe64 	bl	1a004050 <strlen>
1a000388:	4b35      	ldr	r3, [pc, #212]	; (1a000460 <rtcToString+0x160>)
1a00038a:	881b      	ldrh	r3, [r3, #0]
1a00038c:	522b      	strh	r3, [r5, r0]
   }
   // Concateno rtcString+day+"_"
   strncat( rtcString, rtcMemberString, strlen(rtcMemberString) );
1a00038e:	a801      	add	r0, sp, #4
1a000390:	f003 fe5e 	bl	1a004050 <strlen>
1a000394:	4602      	mov	r2, r0
1a000396:	4d30      	ldr	r5, [pc, #192]	; (1a000458 <rtcToString+0x158>)
1a000398:	4628      	mov	r0, r5
1a00039a:	a901      	add	r1, sp, #4
1a00039c:	f003 fe60 	bl	1a004060 <strncat>
   strncat( rtcString, "_", strlen("_") );
1a0003a0:	4628      	mov	r0, r5
1a0003a2:	f003 fe55 	bl	1a004050 <strlen>
1a0003a6:	4b2f      	ldr	r3, [pc, #188]	; (1a000464 <rtcToString+0x164>)
1a0003a8:	881b      	ldrh	r3, [r3, #0]
1a0003aa:	522b      	strh	r3, [r5, r0]

   // "HH:MM:SS"

   // Conversion de entero a string con base 10 (decimal)
   int64ToString( (rtc->hour), rtcMemberString, 10 );
1a0003ac:	7960      	ldrb	r0, [r4, #5]
1a0003ae:	2100      	movs	r1, #0
1a0003b0:	aa01      	add	r2, sp, #4
1a0003b2:	230a      	movs	r3, #10
1a0003b4:	f001 fe96 	bl	1a0020e4 <int64ToString>
   if( (rtc->hour)<10 ){
1a0003b8:	7963      	ldrb	r3, [r4, #5]
1a0003ba:	2b09      	cmp	r3, #9
1a0003bc:	d805      	bhi.n	1a0003ca <rtcToString+0xca>
      // Concateno rtcString+"0"
      strncat( rtcString, "0", strlen("0") );
1a0003be:	4628      	mov	r0, r5
1a0003c0:	f003 fe46 	bl	1a004050 <strlen>
1a0003c4:	4b26      	ldr	r3, [pc, #152]	; (1a000460 <rtcToString+0x160>)
1a0003c6:	881b      	ldrh	r3, [r3, #0]
1a0003c8:	522b      	strh	r3, [r5, r0]
   }
   // Concateno rtcString+hour+":"
   strncat( rtcString, rtcMemberString, strlen(rtcMemberString) );
1a0003ca:	a801      	add	r0, sp, #4
1a0003cc:	f003 fe40 	bl	1a004050 <strlen>
1a0003d0:	4602      	mov	r2, r0
1a0003d2:	4d21      	ldr	r5, [pc, #132]	; (1a000458 <rtcToString+0x158>)
1a0003d4:	4628      	mov	r0, r5
1a0003d6:	a901      	add	r1, sp, #4
1a0003d8:	f003 fe42 	bl	1a004060 <strncat>
   strncat( rtcString, ":", strlen(":") );
1a0003dc:	4628      	mov	r0, r5
1a0003de:	f003 fe37 	bl	1a004050 <strlen>
1a0003e2:	4b21      	ldr	r3, [pc, #132]	; (1a000468 <rtcToString+0x168>)
1a0003e4:	881b      	ldrh	r3, [r3, #0]
1a0003e6:	522b      	strh	r3, [r5, r0]

   // Conversion de entero a string con base 10 (decimal)
   int64ToString( (rtc->min), rtcMemberString, 10 );
1a0003e8:	79a0      	ldrb	r0, [r4, #6]
1a0003ea:	2100      	movs	r1, #0
1a0003ec:	aa01      	add	r2, sp, #4
1a0003ee:	230a      	movs	r3, #10
1a0003f0:	f001 fe78 	bl	1a0020e4 <int64ToString>
   if( (rtc->min)<10 ){
1a0003f4:	79a3      	ldrb	r3, [r4, #6]
1a0003f6:	2b09      	cmp	r3, #9
1a0003f8:	d805      	bhi.n	1a000406 <rtcToString+0x106>
      // Concateno rtcString+"0"
      strncat( rtcString, "0", strlen("0") );
1a0003fa:	4628      	mov	r0, r5
1a0003fc:	f003 fe28 	bl	1a004050 <strlen>
1a000400:	4b17      	ldr	r3, [pc, #92]	; (1a000460 <rtcToString+0x160>)
1a000402:	881b      	ldrh	r3, [r3, #0]
1a000404:	522b      	strh	r3, [r5, r0]
   }
   // Concateno rtcString+min+":"
   strncat( rtcString, rtcMemberString, strlen(rtcMemberString) );
1a000406:	a801      	add	r0, sp, #4
1a000408:	f003 fe22 	bl	1a004050 <strlen>
1a00040c:	4602      	mov	r2, r0
1a00040e:	4d12      	ldr	r5, [pc, #72]	; (1a000458 <rtcToString+0x158>)
1a000410:	4628      	mov	r0, r5
1a000412:	a901      	add	r1, sp, #4
1a000414:	f003 fe24 	bl	1a004060 <strncat>
   strncat( rtcString, ":", strlen(":") );
1a000418:	4628      	mov	r0, r5
1a00041a:	f003 fe19 	bl	1a004050 <strlen>
1a00041e:	4b12      	ldr	r3, [pc, #72]	; (1a000468 <rtcToString+0x168>)
1a000420:	881b      	ldrh	r3, [r3, #0]
1a000422:	522b      	strh	r3, [r5, r0]

   // Conversion de entero a string con base 10 (decimal)
   int64ToString( (rtc->sec), rtcMemberString, 10 );
1a000424:	79e0      	ldrb	r0, [r4, #7]
1a000426:	2100      	movs	r1, #0
1a000428:	aa01      	add	r2, sp, #4
1a00042a:	230a      	movs	r3, #10
1a00042c:	f001 fe5a 	bl	1a0020e4 <int64ToString>
   if( (rtc->sec)<10 ){
1a000430:	79e3      	ldrb	r3, [r4, #7]
1a000432:	2b09      	cmp	r3, #9
1a000434:	d805      	bhi.n	1a000442 <rtcToString+0x142>
      // Concateno rtcString+"0"
      strncat( rtcString, "0", strlen("0") );
1a000436:	4628      	mov	r0, r5
1a000438:	f003 fe0a 	bl	1a004050 <strlen>
1a00043c:	4b08      	ldr	r3, [pc, #32]	; (1a000460 <rtcToString+0x160>)
1a00043e:	881b      	ldrh	r3, [r3, #0]
1a000440:	522b      	strh	r3, [r5, r0]
   }
   // Concateno rtcString+sec
   strncat( rtcString, rtcMemberString, strlen(rtcMemberString) );
1a000442:	a801      	add	r0, sp, #4
1a000444:	f003 fe04 	bl	1a004050 <strlen>
1a000448:	4602      	mov	r2, r0
1a00044a:	4803      	ldr	r0, [pc, #12]	; (1a000458 <rtcToString+0x158>)
1a00044c:	a901      	add	r1, sp, #4
1a00044e:	f003 fe07 	bl	1a004060 <strncat>
}
1a000452:	b005      	add	sp, #20
1a000454:	bd30      	pop	{r4, r5, pc}
1a000456:	bf00      	nop
1a000458:	10000540 	.word	0x10000540
1a00045c:	1a004088 	.word	0x1a004088
1a000460:	1a00408c 	.word	0x1a00408c
1a000464:	1a004090 	.word	0x1a004090
1a000468:	1a004094 	.word	0x1a004094

1a00046c <diskTickHook>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

// FUNCION que se ejecuta cada vezque ocurre un Tick
void diskTickHook( void *ptr ){
1a00046c:	b508      	push	{r3, lr}
   disk_timerproc();   // Disk timer process
1a00046e:	f001 fd5f 	bl	1a001f30 <disk_timerproc>
1a000472:	bd08      	pop	{r3, pc}

1a000474 <main>:


/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000474:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000476:	b08b      	sub	sp, #44	; 0x2c
   uint16_t adcValueCH2 = 0;
   uint16_t adcValueCH3 = 0;
   uint8_t i;
   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a000478:	f002 f9d2 	bl	1a002820 <boardInit>

   // SPI configuration
   spiConfig( SPI0 );
1a00047c:	2000      	movs	r0, #0
1a00047e:	f002 f867 	bl	1a002550 <spiInit>

   // Inicializar el conteo de Ticks con resolucion de 10ms,
   // con tickHook diskTickHook
   tickConfig( 10 );
1a000482:	200a      	movs	r0, #10
1a000484:	2100      	movs	r1, #0
1a000486:	f001 ffa7 	bl	1a0023d8 <tickInit>
   tickCallbackSet( diskTickHook, NULL );
1a00048a:	4860      	ldr	r0, [pc, #384]	; (1a00060c <main+0x198>)
1a00048c:	2100      	movs	r1, #0
1a00048e:	f001 ff87 	bl	1a0023a0 <tickCallbackSet>


   //ADC Config
   adcInit(ADC_ENABLE);
1a000492:	2000      	movs	r0, #0
1a000494:	f002 f952 	bl	1a00273c <adcInit>

   /* Inicializar RTC */
   rtc.year = 2018;
1a000498:	f240 73e2 	movw	r3, #2018	; 0x7e2
1a00049c:	f8ad 301c 	strh.w	r3, [sp, #28]
   rtc.month = 7;
1a0004a0:	2307      	movs	r3, #7
1a0004a2:	f88d 301e 	strb.w	r3, [sp, #30]
   rtc.mday = 1;
1a0004a6:	2301      	movs	r3, #1
1a0004a8:	f88d 301f 	strb.w	r3, [sp, #31]
   rtc.wday = 1;
1a0004ac:	f88d 3020 	strb.w	r3, [sp, #32]
   rtc.hour = 13;
1a0004b0:	230d      	movs	r3, #13
1a0004b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   rtc.min = 17;
1a0004b6:	2311      	movs	r3, #17
1a0004b8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   rtc.sec= 0;
1a0004bc:	2400      	movs	r4, #0
1a0004be:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23

   rtcConfig( &rtc );
1a0004c2:	a807      	add	r0, sp, #28
1a0004c4:	f001 fdaa 	bl	1a00201c <rtcInit>

   delayConfig( &delay1s, 1000 );
1a0004c8:	4668      	mov	r0, sp
1a0004ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0004ce:	2300      	movs	r3, #0
1a0004d0:	f002 f882 	bl	1a0025d8 <delayInit>

   delay(2000); // El RTC tarda en setear la hora, por eso el delay
1a0004d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
1a0004d8:	2100      	movs	r1, #0
1a0004da:	f002 f861 	bl	1a0025a0 <delay>

   // Give a work area to the default drive
   if( f_mount( &fs, "", 0 ) != FR_OK ){
1a0004de:	484c      	ldr	r0, [pc, #304]	; (1a000610 <main+0x19c>)
1a0004e0:	494c      	ldr	r1, [pc, #304]	; (1a000614 <main+0x1a0>)
1a0004e2:	4622      	mov	r2, r4
1a0004e4:	f000 ff34 	bl	1a001350 <f_mount>
      // Check whether the SD card is correctly connected
   }

   // ---------- REPETIR POR SIEMPRE --------------------------
   while(TRUE){
      if( delayRead( &delay1s ) ){
1a0004e8:	4668      	mov	r0, sp
1a0004ea:	f002 f885 	bl	1a0025f8 <delayRead>
1a0004ee:	2800      	cmp	r0, #0
1a0004f0:	f000 8089 	beq.w	1a000606 <main+0x192>
    	  gpioWrite(LEDG, 0);
1a0004f4:	2029      	movs	r0, #41	; 0x29
1a0004f6:	2100      	movs	r1, #0
1a0004f8:	f001 ff1e 	bl	1a002338 <gpioWrite>
         /* Leer fecha y hora */
         rtcRead( &rtc );
1a0004fc:	a807      	add	r0, sp, #28
1a0004fe:	f001 fd5b 	bl	1a001fb8 <rtcRead>
         // Convertir lectura de fecha y hora a string en formato "DD/MM/YYYY HH:MM:SS"
         rtcToString( rtcString, &rtc );
1a000502:	4c45      	ldr	r4, [pc, #276]	; (1a000618 <main+0x1a4>)
1a000504:	4620      	mov	r0, r4
1a000506:	a907      	add	r1, sp, #28
1a000508:	f7ff fefa 	bl	1a000300 <rtcToString>
         // Agrego SEPARATOR al final
         strncat( rtcString, ";", 1 );
1a00050c:	4620      	mov	r0, r4
1a00050e:	f003 fd9f 	bl	1a004050 <strlen>
1a000512:	4b42      	ldr	r3, [pc, #264]	; (1a00061c <main+0x1a8>)
1a000514:	881b      	ldrh	r3, [r3, #0]
1a000516:	5223      	strh	r3, [r4, r0]
         /* Muestrear los ADC's y escribir en la SD */
         if( FR_OK == f_open( &fp, FILENAME, FA_WRITE | FA_OPEN_APPEND ) ){
1a000518:	4841      	ldr	r0, [pc, #260]	; (1a000620 <main+0x1ac>)
1a00051a:	4942      	ldr	r1, [pc, #264]	; (1a000624 <main+0x1b0>)
1a00051c:	2232      	movs	r2, #50	; 0x32
1a00051e:	f000 ff43 	bl	1a0013a8 <f_open>
1a000522:	2800      	cmp	r0, #0
1a000524:	d16c      	bne.n	1a000600 <main+0x18c>
            
            adcValueCH1 = adcRead(CH1);
1a000526:	2041      	movs	r0, #65	; 0x41
1a000528:	f002 f94e 	bl	1a0027c8 <adcRead>
            // Convertir lectura del ADC a string
            int64ToString( (int64_t)adcValueCH1, CH1String, 10 );
1a00052c:	4f3e      	ldr	r7, [pc, #248]	; (1a000628 <main+0x1b4>)
1a00052e:	b280      	uxth	r0, r0
1a000530:	2100      	movs	r1, #0
1a000532:	463a      	mov	r2, r7
1a000534:	230a      	movs	r3, #10
1a000536:	f001 fdd5 	bl	1a0020e4 <int64ToString>
            // Agrego ';' al final
            strncat( CH1String, ";", 1 );
1a00053a:	4638      	mov	r0, r7
1a00053c:	f003 fd88 	bl	1a004050 <strlen>
1a000540:	4b36      	ldr	r3, [pc, #216]	; (1a00061c <main+0x1a8>)
1a000542:	881c      	ldrh	r4, [r3, #0]
1a000544:	523c      	strh	r4, [r7, r0]
            adcValueCH2 = adcRead(CH2);
1a000546:	2040      	movs	r0, #64	; 0x40
1a000548:	f002 f93e 	bl	1a0027c8 <adcRead>
            // Convertir lectura del ADC a string
            int64ToString( (int64_t)adcValueCH2, CH2String, 10 );
1a00054c:	4e37      	ldr	r6, [pc, #220]	; (1a00062c <main+0x1b8>)
1a00054e:	b280      	uxth	r0, r0
1a000550:	2100      	movs	r1, #0
1a000552:	4632      	mov	r2, r6
1a000554:	230a      	movs	r3, #10
1a000556:	f001 fdc5 	bl	1a0020e4 <int64ToString>
            // Agrego ';' al final
            strncat( CH2String, ";", 1 );
1a00055a:	4630      	mov	r0, r6
1a00055c:	f003 fd78 	bl	1a004050 <strlen>
1a000560:	5234      	strh	r4, [r6, r0]
            adcValueCH3 = adcRead(CH3);
1a000562:	203f      	movs	r0, #63	; 0x3f
1a000564:	f002 f930 	bl	1a0027c8 <adcRead>
            // Convertir lectura del ADC a string
            int64ToString( (int64_t)adcValueCH3, CH3String, 10 );
1a000568:	4d31      	ldr	r5, [pc, #196]	; (1a000630 <main+0x1bc>)
1a00056a:	b280      	uxth	r0, r0
1a00056c:	2100      	movs	r1, #0
1a00056e:	462a      	mov	r2, r5
1a000570:	230a      	movs	r3, #10
1a000572:	f001 fdb7 	bl	1a0020e4 <int64ToString>
            // Agrego ';' al final
            strncat( CH3String, ";", 1 );
1a000576:	4628      	mov	r0, r5
1a000578:	f003 fd6a 	bl	1a004050 <strlen>
1a00057c:	522c      	strh	r4, [r5, r0]
            
            // Concatento textToWrite con magString quedando textToWrite: CH1String
            strncat( textToWrite, CH1String, strlen(CH1String) );
1a00057e:	4638      	mov	r0, r7
1a000580:	f003 fd66 	bl	1a004050 <strlen>
1a000584:	4602      	mov	r2, r0
1a000586:	4c2b      	ldr	r4, [pc, #172]	; (1a000634 <main+0x1c0>)
1a000588:	4620      	mov	r0, r4
1a00058a:	4639      	mov	r1, r7
1a00058c:	f003 fd68 	bl	1a004060 <strncat>
            // Concatento textToWrite con magString quedando textToWrite: CH1String+CH2String
            strncat( textToWrite, CH2String, strlen(CH2String) );
1a000590:	4630      	mov	r0, r6
1a000592:	f003 fd5d 	bl	1a004050 <strlen>
1a000596:	4602      	mov	r2, r0
1a000598:	4620      	mov	r0, r4
1a00059a:	4631      	mov	r1, r6
1a00059c:	f003 fd60 	bl	1a004060 <strncat>
            // Concatento textToWrite con magString quedando textToWrite: CH1String+CH2String+CH3String
            strncat( textToWrite, CH3String, strlen(CH3String) );
1a0005a0:	4628      	mov	r0, r5
1a0005a2:	f003 fd55 	bl	1a004050 <strlen>
1a0005a6:	4602      	mov	r2, r0
1a0005a8:	4620      	mov	r0, r4
1a0005aa:	4629      	mov	r1, r5
1a0005ac:	f003 fd58 	bl	1a004060 <strncat>
            // Concatento textToWrite con rtcString quedando en textToWrite: CH1String+CH2String+CH3String+rtcString
            strncat( textToWrite, rtcString, strlen(rtcString) );
1a0005b0:	4d19      	ldr	r5, [pc, #100]	; (1a000618 <main+0x1a4>)
1a0005b2:	4628      	mov	r0, r5
1a0005b4:	f003 fd4c 	bl	1a004050 <strlen>
1a0005b8:	4602      	mov	r2, r0
1a0005ba:	4620      	mov	r0, r4
1a0005bc:	4629      	mov	r1, r5
1a0005be:	f003 fd4f 	bl	1a004060 <strncat>
            // Concatento textToWrite con "\r\n" quedando textToWrite: rtcString+adcString+"\r\n"
            strncat( textToWrite, "\r\n", 2 );
1a0005c2:	4620      	mov	r0, r4
1a0005c4:	f003 fd44 	bl	1a004050 <strlen>
1a0005c8:	1822      	adds	r2, r4, r0
1a0005ca:	4b1b      	ldr	r3, [pc, #108]	; (1a000638 <main+0x1c4>)
1a0005cc:	8819      	ldrh	r1, [r3, #0]
1a0005ce:	789b      	ldrb	r3, [r3, #2]
1a0005d0:	5221      	strh	r1, [r4, r0]
1a0005d2:	7093      	strb	r3, [r2, #2]

            f_write( &fp, textToWrite, strlen(textToWrite), &nbytes );
1a0005d4:	4620      	mov	r0, r4
1a0005d6:	f003 fd3b 	bl	1a004050 <strlen>
1a0005da:	4602      	mov	r2, r0
1a0005dc:	4810      	ldr	r0, [pc, #64]	; (1a000620 <main+0x1ac>)
1a0005de:	4621      	mov	r1, r4
1a0005e0:	ab09      	add	r3, sp, #36	; 0x24
1a0005e2:	f000 ffcf 	bl	1a001584 <f_write>

            if(nbytes == strlen(textToWrite)){
1a0005e6:	4620      	mov	r0, r4
1a0005e8:	f003 fd32 	bl	1a004050 <strlen>
1a0005ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0005ee:	4298      	cmp	r0, r3
1a0005f0:	d103      	bne.n	1a0005fa <main+0x186>
            	gpioWrite(LEDG, 1);
1a0005f2:	2029      	movs	r0, #41	; 0x29
1a0005f4:	2101      	movs	r1, #1
1a0005f6:	f001 fe9f 	bl	1a002338 <gpioWrite>
            }

            f_close(&fp);
1a0005fa:	4809      	ldr	r0, [pc, #36]	; (1a000620 <main+0x1ac>)
1a0005fc:	f001 f8e4 	bl	1a0017c8 <f_close>
         }
         adcValueCH1 = 0;
         adcValueCH2 = 0;
         adcValueCH3 = 0;
         textToWrite[0] = 0;
1a000600:	2200      	movs	r2, #0
1a000602:	4b0c      	ldr	r3, [pc, #48]	; (1a000634 <main+0x1c0>)
1a000604:	701a      	strb	r2, [r3, #0]

      }

      sleepUntilNextInterrupt();
1a000606:	f001 fec3 	bl	1a002390 <sleepUntilNextInterrupt>
   }
1a00060a:	e76d      	b.n	1a0004e8 <main+0x74>
1a00060c:	1a00046d 	.word	0x1a00046d
1a000610:	10000300 	.word	0x10000300
1a000614:	1a00411c 	.word	0x1a00411c
1a000618:	10000540 	.word	0x10000540
1a00061c:	1a004098 	.word	0x1a004098
1a000620:	100000d0 	.word	0x100000d0
1a000624:	1a00409c 	.word	0x1a00409c
1a000628:	100002f8 	.word	0x100002f8
1a00062c:	10000530 	.word	0x10000530
1a000630:	10000538 	.word	0x10000538
1a000634:	10000558 	.word	0x10000558
1a000638:	1a0040ac 	.word	0x1a0040ac

1a00063c <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a00063c:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a00063e:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000640:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000644:	4770      	bx	lr
1a000646:	bf00      	nop

1a000648 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a000648:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a00064a:	7883      	ldrb	r3, [r0, #2]
1a00064c:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000650:	7843      	ldrb	r3, [r0, #1]
1a000652:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000656:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000658:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a00065c:	4770      	bx	lr
1a00065e:	bf00      	nop

1a000660 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000660:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a000662:	0a09      	lsrs	r1, r1, #8
1a000664:	7041      	strb	r1, [r0, #1]
1a000666:	4770      	bx	lr

1a000668 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000668:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a00066a:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a00066e:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000670:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a000674:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a000676:	0e09      	lsrs	r1, r1, #24
1a000678:	70c1      	strb	r1, [r0, #3]
1a00067a:	4770      	bx	lr

1a00067c <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
1a00067c:	4613      	mov	r3, r2
1a00067e:	b12a      	cbz	r2, 1a00068c <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
1a000680:	780a      	ldrb	r2, [r1, #0]
1a000682:	7002      	strb	r2, [r0, #0]
1a000684:	3001      	adds	r0, #1
1a000686:	3101      	adds	r1, #1
1a000688:	3b01      	subs	r3, #1
1a00068a:	d1f9      	bne.n	1a000680 <mem_cpy+0x4>
1a00068c:	4770      	bx	lr
1a00068e:	bf00      	nop

1a000690 <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
1a000690:	7001      	strb	r1, [r0, #0]
1a000692:	3001      	adds	r0, #1
1a000694:	3a01      	subs	r2, #1
1a000696:	d1fb      	bne.n	1a000690 <mem_set>
}
1a000698:	4770      	bx	lr
1a00069a:	bf00      	nop

1a00069c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
1a00069c:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a00069e:	1c45      	adds	r5, r0, #1
1a0006a0:	7803      	ldrb	r3, [r0, #0]
1a0006a2:	1c4c      	adds	r4, r1, #1
1a0006a4:	7808      	ldrb	r0, [r1, #0]
1a0006a6:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a0006a8:	3a01      	subs	r2, #1
1a0006aa:	d003      	beq.n	1a0006b4 <mem_cmp+0x18>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a0006ac:	4628      	mov	r0, r5
1a0006ae:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a0006b0:	2b00      	cmp	r3, #0
1a0006b2:	d0f4      	beq.n	1a00069e <mem_cmp+0x2>

	return r;
}
1a0006b4:	4618      	mov	r0, r3
1a0006b6:	bc30      	pop	{r4, r5}
1a0006b8:	4770      	bx	lr
1a0006ba:	bf00      	nop

1a0006bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
1a0006bc:	e000      	b.n	1a0006c0 <chk_chr+0x4>
1a0006be:	3001      	adds	r0, #1
1a0006c0:	7803      	ldrb	r3, [r0, #0]
1a0006c2:	b10b      	cbz	r3, 1a0006c8 <chk_chr+0xc>
1a0006c4:	428b      	cmp	r3, r1
1a0006c6:	d1fa      	bne.n	1a0006be <chk_chr+0x2>
	return *str;
}
1a0006c8:	4618      	mov	r0, r3
1a0006ca:	4770      	bx	lr

1a0006cc <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
1a0006cc:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
1a0006ce:	6943      	ldr	r3, [r0, #20]
1a0006d0:	3b02      	subs	r3, #2
1a0006d2:	428b      	cmp	r3, r1
1a0006d4:	d904      	bls.n	1a0006e0 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
1a0006d6:	8943      	ldrh	r3, [r0, #10]
1a0006d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
1a0006da:	fb01 0003 	mla	r0, r1, r3, r0
1a0006de:	4770      	bx	lr
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
1a0006e0:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
1a0006e2:	4770      	bx	lr

1a0006e4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
1a0006e4:	b570      	push	{r4, r5, r6, lr}
1a0006e6:	4606      	mov	r6, r0
1a0006e8:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a0006ea:	f101 001a 	add.w	r0, r1, #26
1a0006ee:	f7ff ffa5 	bl	1a00063c <ld_word>
1a0006f2:	4604      	mov	r4, r0
	if (fs->fs_type == FS_FAT32) {
1a0006f4:	7833      	ldrb	r3, [r6, #0]
1a0006f6:	2b03      	cmp	r3, #3
1a0006f8:	d105      	bne.n	1a000706 <ld_clust+0x22>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a0006fa:	f105 0014 	add.w	r0, r5, #20
1a0006fe:	f7ff ff9d 	bl	1a00063c <ld_word>
1a000702:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	}

	return cl;
}
1a000706:	bd70      	pop	{r4, r5, r6, pc}

1a000708 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000708:	b570      	push	{r4, r5, r6, lr}
1a00070a:	4606      	mov	r6, r0
1a00070c:	460d      	mov	r5, r1
1a00070e:	4614      	mov	r4, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a000710:	f101 001a 	add.w	r0, r1, #26
1a000714:	b291      	uxth	r1, r2
1a000716:	f7ff ffa3 	bl	1a000660 <st_word>
	if (fs->fs_type == FS_FAT32) {
1a00071a:	7833      	ldrb	r3, [r6, #0]
1a00071c:	2b03      	cmp	r3, #3
1a00071e:	d104      	bne.n	1a00072a <st_clust+0x22>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000720:	f105 0014 	add.w	r0, r5, #20
1a000724:	0c21      	lsrs	r1, r4, #16
1a000726:	f7ff ff9b 	bl	1a000660 <st_word>
1a00072a:	bd70      	pop	{r4, r5, r6, pc}

1a00072c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
1a00072c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000730:	4682      	mov	sl, r0
1a000732:	4689      	mov	r9, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
1a000734:	680f      	ldr	r7, [r1, #0]
1a000736:	f100 0b20 	add.w	fp, r0, #32
	mem_set(sfn, ' ', 11);
1a00073a:	4658      	mov	r0, fp
1a00073c:	2120      	movs	r1, #32
1a00073e:	220b      	movs	r2, #11
1a000740:	f7ff ffa6 	bl	1a000690 <mem_set>
	si = i = 0; ni = 8;
1a000744:	2600      	movs	r6, #0
1a000746:	4633      	mov	r3, r6
1a000748:	f04f 0808 	mov.w	r8, #8
1a00074c:	e000      	b.n	1a000750 <create_name+0x24>
1a00074e:	462b      	mov	r3, r5
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
1a000750:	1c5d      	adds	r5, r3, #1
1a000752:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
1a000754:	2c20      	cmp	r4, #32
1a000756:	d92b      	bls.n	1a0007b0 <create_name+0x84>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
1a000758:	2c2f      	cmp	r4, #47	; 0x2f
1a00075a:	d003      	beq.n	1a000764 <create_name+0x38>
1a00075c:	2c5c      	cmp	r4, #92	; 0x5c
1a00075e:	d107      	bne.n	1a000770 <create_name+0x44>
1a000760:	e000      	b.n	1a000764 <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
1a000762:	3501      	adds	r5, #1
1a000764:	5d7b      	ldrb	r3, [r7, r5]
1a000766:	2b2f      	cmp	r3, #47	; 0x2f
1a000768:	d0fb      	beq.n	1a000762 <create_name+0x36>
1a00076a:	2b5c      	cmp	r3, #92	; 0x5c
1a00076c:	d0f9      	beq.n	1a000762 <create_name+0x36>
1a00076e:	e01f      	b.n	1a0007b0 <create_name+0x84>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
1a000770:	2c2e      	cmp	r4, #46	; 0x2e
1a000772:	d001      	beq.n	1a000778 <create_name+0x4c>
1a000774:	4546      	cmp	r6, r8
1a000776:	d308      	bcc.n	1a00078a <create_name+0x5e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
1a000778:	f1b8 0f0b 	cmp.w	r8, #11
1a00077c:	d02d      	beq.n	1a0007da <create_name+0xae>
1a00077e:	2c2e      	cmp	r4, #46	; 0x2e
1a000780:	d12e      	bne.n	1a0007e0 <create_name+0xb4>
			i = 8; ni = 11;				/* Goto extension */
1a000782:	2608      	movs	r6, #8
1a000784:	f04f 080b 	mov.w	r8, #11
1a000788:	e7e1      	b.n	1a00074e <create_name+0x22>
			continue;
		}
		if (c >= 0x80) {				/* Extended character? */
1a00078a:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00078e:	d12a      	bne.n	1a0007e6 <create_name+0xba>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
1a000790:	4819      	ldr	r0, [pc, #100]	; (1a0007f8 <create_name+0xcc>)
1a000792:	4621      	mov	r1, r4
1a000794:	f7ff ff92 	bl	1a0006bc <chk_chr>
1a000798:	bb40      	cbnz	r0, 1a0007ec <create_name+0xc0>
			if (IsLower(c)) c -= 0x20;	/* To upper */
1a00079a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
1a00079e:	b2db      	uxtb	r3, r3
1a0007a0:	2b19      	cmp	r3, #25
1a0007a2:	d801      	bhi.n	1a0007a8 <create_name+0x7c>
1a0007a4:	3c20      	subs	r4, #32
1a0007a6:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
1a0007a8:	f80b 4006 	strb.w	r4, [fp, r6]
1a0007ac:	3601      	adds	r6, #1
1a0007ae:	e7ce      	b.n	1a00074e <create_name+0x22>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
1a0007b0:	443d      	add	r5, r7
1a0007b2:	f8c9 5000 	str.w	r5, [r9]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
1a0007b6:	b1e6      	cbz	r6, 1a0007f2 <create_name+0xc6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a0007b8:	f89a 3020 	ldrb.w	r3, [sl, #32]
1a0007bc:	2be5      	cmp	r3, #229	; 0xe5
1a0007be:	d102      	bne.n	1a0007c6 <create_name+0x9a>
1a0007c0:	2305      	movs	r3, #5
1a0007c2:	f88a 3020 	strb.w	r3, [sl, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a0007c6:	2c20      	cmp	r4, #32
1a0007c8:	d801      	bhi.n	1a0007ce <create_name+0xa2>
1a0007ca:	2304      	movs	r3, #4
1a0007cc:	e000      	b.n	1a0007d0 <create_name+0xa4>
1a0007ce:	2300      	movs	r3, #0
1a0007d0:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b

	return FR_OK;
1a0007d4:	2000      	movs	r0, #0
1a0007d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
1a0007da:	2006      	movs	r0, #6
1a0007dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0007e0:	2006      	movs	r0, #6
1a0007e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
1a0007e6:	2006      	movs	r0, #6
1a0007e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
1a0007ec:	2006      	movs	r0, #6
1a0007ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
1a0007f2:	2006      	movs	r0, #6
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
1a0007f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0007f8:	1a0040b0 	.word	0x1a0040b0

1a0007fc <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
1a0007fc:	6801      	ldr	r1, [r0, #0]
1a0007fe:	b921      	cbnz	r1, 1a00080a <get_ldnumber+0xe>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a000800:	f04f 33ff 	mov.w	r3, #4294967295
1a000804:	e01f      	b.n	1a000846 <get_ldnumber+0x4a>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
1a000806:	3201      	adds	r2, #1
1a000808:	e000      	b.n	1a00080c <get_ldnumber+0x10>
1a00080a:	460a      	mov	r2, r1
1a00080c:	7813      	ldrb	r3, [r2, #0]
1a00080e:	2b20      	cmp	r3, #32
1a000810:	d901      	bls.n	1a000816 <get_ldnumber+0x1a>
1a000812:	2b3a      	cmp	r3, #58	; 0x3a
1a000814:	d1f7      	bne.n	1a000806 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
1a000816:	2b3a      	cmp	r3, #58	; 0x3a
1a000818:	d114      	bne.n	1a000844 <get_ldnumber+0x48>

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
1a00081a:	b410      	push	{r4}

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
1a00081c:	1c4c      	adds	r4, r1, #1
1a00081e:	780b      	ldrb	r3, [r1, #0]
1a000820:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
1a000822:	2b09      	cmp	r3, #9
1a000824:	d805      	bhi.n	1a000832 <get_ldnumber+0x36>
1a000826:	4294      	cmp	r4, r2
1a000828:	d106      	bne.n	1a000838 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
1a00082a:	b943      	cbnz	r3, 1a00083e <get_ldnumber+0x42>
					vol = (int)i;
					*path = ++tt;
1a00082c:	3201      	adds	r2, #1
1a00082e:	6002      	str	r2, [r0, #0]
1a000830:	e00b      	b.n	1a00084a <get_ldnumber+0x4e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a000832:	f04f 33ff 	mov.w	r3, #4294967295
1a000836:	e008      	b.n	1a00084a <get_ldnumber+0x4e>
1a000838:	f04f 33ff 	mov.w	r3, #4294967295
1a00083c:	e005      	b.n	1a00084a <get_ldnumber+0x4e>
1a00083e:	f04f 33ff 	mov.w	r3, #4294967295
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
1a000842:	e002      	b.n	1a00084a <get_ldnumber+0x4e>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
1a000844:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
1a000846:	4618      	mov	r0, r3
1a000848:	4770      	bx	lr
1a00084a:	4618      	mov	r0, r3
1a00084c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000850:	4770      	bx	lr
1a000852:	bf00      	nop

1a000854 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
1a000854:	b538      	push	{r3, r4, r5, lr}
1a000856:	460c      	mov	r4, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
1a000858:	b170      	cbz	r0, 1a000878 <validate+0x24>
1a00085a:	4605      	mov	r5, r0
1a00085c:	6803      	ldr	r3, [r0, #0]
1a00085e:	b15b      	cbz	r3, 1a000878 <validate+0x24>
1a000860:	781a      	ldrb	r2, [r3, #0]
1a000862:	b14a      	cbz	r2, 1a000878 <validate+0x24>
1a000864:	88d9      	ldrh	r1, [r3, #6]
1a000866:	8882      	ldrh	r2, [r0, #4]
1a000868:	4291      	cmp	r1, r2
1a00086a:	d105      	bne.n	1a000878 <validate+0x24>
1a00086c:	7858      	ldrb	r0, [r3, #1]
1a00086e:	f001 f979 	bl	1a001b64 <disk_status>
1a000872:	f010 0f01 	tst.w	r0, #1
1a000876:	d003      	beq.n	1a000880 <validate+0x2c>
		*fs = 0;				/* The object is invalid */
1a000878:	2300      	movs	r3, #0
1a00087a:	6023      	str	r3, [r4, #0]
		res = FR_INVALID_OBJECT;
1a00087c:	2009      	movs	r0, #9
1a00087e:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
1a000880:	682b      	ldr	r3, [r5, #0]
1a000882:	6023      	str	r3, [r4, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
1a000884:	2000      	movs	r0, #0
	}
	return res;
}
1a000886:	bd38      	pop	{r3, r4, r5, pc}

1a000888 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
1a000888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
1a00088a:	78c3      	ldrb	r3, [r0, #3]
1a00088c:	b303      	cbz	r3, 1a0008d0 <sync_window+0x48>
1a00088e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
1a000890:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
1a000892:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a000896:	7840      	ldrb	r0, [r0, #1]
1a000898:	4639      	mov	r1, r7
1a00089a:	4632      	mov	r2, r6
1a00089c:	2301      	movs	r3, #1
1a00089e:	f001 f9af 	bl	1a001c00 <disk_write>
1a0008a2:	b9b8      	cbnz	r0, 1a0008d4 <sync_window+0x4c>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
1a0008a4:	2300      	movs	r3, #0
1a0008a6:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
1a0008a8:	6a23      	ldr	r3, [r4, #32]
1a0008aa:	1af3      	subs	r3, r6, r3
1a0008ac:	69a2      	ldr	r2, [r4, #24]
1a0008ae:	4293      	cmp	r3, r2
1a0008b0:	d212      	bcs.n	1a0008d8 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a0008b2:	78a5      	ldrb	r5, [r4, #2]
1a0008b4:	e008      	b.n	1a0008c8 <sync_window+0x40>
					wsect += fs->fsize;
1a0008b6:	69a3      	ldr	r3, [r4, #24]
1a0008b8:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
1a0008ba:	7860      	ldrb	r0, [r4, #1]
1a0008bc:	4639      	mov	r1, r7
1a0008be:	4632      	mov	r2, r6
1a0008c0:	2301      	movs	r3, #1
1a0008c2:	f001 f99d 	bl	1a001c00 <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a0008c6:	3d01      	subs	r5, #1
1a0008c8:	2d01      	cmp	r5, #1
1a0008ca:	d8f4      	bhi.n	1a0008b6 <sync_window+0x2e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a0008cc:	2000      	movs	r0, #0
1a0008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0008d0:	2000      	movs	r0, #0
1a0008d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
1a0008d4:	2001      	movs	r0, #1
1a0008d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a0008d8:	2000      	movs	r0, #0
				}
			}
		}
	}
	return res;
}
1a0008da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0008dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
1a0008dc:	b570      	push	{r4, r5, r6, lr}
1a0008de:	4604      	mov	r4, r0
1a0008e0:	460d      	mov	r5, r1
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
1a0008e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1a0008e4:	428b      	cmp	r3, r1
1a0008e6:	d010      	beq.n	1a00090a <move_window+0x2e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
1a0008e8:	f7ff ffce 	bl	1a000888 <sync_window>
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
1a0008ec:	4606      	mov	r6, r0
1a0008ee:	b968      	cbnz	r0, 1a00090c <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
1a0008f0:	7860      	ldrb	r0, [r4, #1]
1a0008f2:	f104 0130 	add.w	r1, r4, #48	; 0x30
1a0008f6:	462a      	mov	r2, r5
1a0008f8:	2301      	movs	r3, #1
1a0008fa:	f001 f93d 	bl	1a001b78 <disk_read>
1a0008fe:	b110      	cbz	r0, 1a000906 <move_window+0x2a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
1a000900:	2601      	movs	r6, #1
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
1a000902:	f04f 35ff 	mov.w	r5, #4294967295
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
1a000906:	62e5      	str	r5, [r4, #44]	; 0x2c
1a000908:	e000      	b.n	1a00090c <move_window+0x30>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
1a00090a:	2600      	movs	r6, #0
			}
			fs->winsect = sector;
		}
	}
	return res;
}
1a00090c:	4630      	mov	r0, r6
1a00090e:	bd70      	pop	{r4, r5, r6, pc}

1a000910 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
1a000910:	b510      	push	{r4, lr}
1a000912:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a000914:	2300      	movs	r3, #0
1a000916:	70c3      	strb	r3, [r0, #3]
1a000918:	f04f 33ff 	mov.w	r3, #4294967295
1a00091c:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a00091e:	f7ff ffdd 	bl	1a0008dc <move_window>
1a000922:	bb18      	cbnz	r0, 1a00096c <check_fs+0x5c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a000924:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000928:	f7ff fe88 	bl	1a00063c <ld_word>
1a00092c:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000930:	4298      	cmp	r0, r3
1a000932:	d11d      	bne.n	1a000970 <check_fs+0x60>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
1a000934:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a000938:	2be9      	cmp	r3, #233	; 0xe9
1a00093a:	d005      	beq.n	1a000948 <check_fs+0x38>
1a00093c:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a00093e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
1a000942:	4a0f      	ldr	r2, [pc, #60]	; (1a000980 <check_fs+0x70>)
1a000944:	4293      	cmp	r3, r2
1a000946:	d115      	bne.n	1a000974 <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a000948:	f104 0066 	add.w	r0, r4, #102	; 0x66
1a00094c:	f7ff fe7c 	bl	1a000648 <ld_dword>
1a000950:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
1a000954:	4b0b      	ldr	r3, [pc, #44]	; (1a000984 <check_fs+0x74>)
1a000956:	4298      	cmp	r0, r3
1a000958:	d00e      	beq.n	1a000978 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a00095a:	f104 0082 	add.w	r0, r4, #130	; 0x82
1a00095e:	f7ff fe73 	bl	1a000648 <ld_dword>
1a000962:	4b09      	ldr	r3, [pc, #36]	; (1a000988 <check_fs+0x78>)
1a000964:	4298      	cmp	r0, r3
1a000966:	d009      	beq.n	1a00097c <check_fs+0x6c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a000968:	2002      	movs	r0, #2
1a00096a:	bd10      	pop	{r4, pc}
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a00096c:	2004      	movs	r0, #4
1a00096e:	bd10      	pop	{r4, pc}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a000970:	2003      	movs	r0, #3
1a000972:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a000974:	2002      	movs	r0, #2
1a000976:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a000978:	2000      	movs	r0, #0
1a00097a:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a00097c:	2000      	movs	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
1a00097e:	bd10      	pop	{r4, pc}
1a000980:	009000eb 	.word	0x009000eb
1a000984:	00544146 	.word	0x00544146
1a000988:	33544146 	.word	0x33544146

1a00098c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
1a00098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000990:	b084      	sub	sp, #16
1a000992:	460e      	mov	r6, r1
1a000994:	4617      	mov	r7, r2
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
1a000996:	2300      	movs	r3, #0
1a000998:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a00099a:	f7ff ff2f 	bl	1a0007fc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a00099e:	1e05      	subs	r5, r0, #0
1a0009a0:	f2c0 812b 	blt.w	1a000bfa <find_volume+0x26e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
1a0009a4:	4baa      	ldr	r3, [pc, #680]	; (1a000c50 <find_volume+0x2c4>)
1a0009a6:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a0009aa:	2c00      	cmp	r4, #0
1a0009ac:	f000 8127 	beq.w	1a000bfe <find_volume+0x272>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
1a0009b0:	6034      	str	r4, [r6, #0]

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
1a0009b2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
1a0009b6:	7823      	ldrb	r3, [r4, #0]
1a0009b8:	b173      	cbz	r3, 1a0009d8 <find_volume+0x4c>
		stat = disk_status(fs->drv);
1a0009ba:	7860      	ldrb	r0, [r4, #1]
1a0009bc:	f001 f8d2 	bl	1a001b64 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a0009c0:	f010 0f01 	tst.w	r0, #1
1a0009c4:	d108      	bne.n	1a0009d8 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a0009c6:	2f00      	cmp	r7, #0
1a0009c8:	f000 811b 	beq.w	1a000c02 <find_volume+0x276>
1a0009cc:	f010 0f04 	tst.w	r0, #4
1a0009d0:	f040 8119 	bne.w	1a000c06 <find_volume+0x27a>
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a0009d4:	2000      	movs	r0, #0
1a0009d6:	e137      	b.n	1a000c48 <find_volume+0x2bc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
1a0009d8:	2300      	movs	r3, #0
1a0009da:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a0009dc:	b2e8      	uxtb	r0, r5
1a0009de:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
1a0009e0:	f001 f814 	bl	1a001a0c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a0009e4:	f010 0f01 	tst.w	r0, #1
1a0009e8:	f040 810f 	bne.w	1a000c0a <find_volume+0x27e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a0009ec:	b11f      	cbz	r7, 1a0009f6 <find_volume+0x6a>
1a0009ee:	f010 0f04 	tst.w	r0, #4
1a0009f2:	f040 810c 	bne.w	1a000c0e <find_volume+0x282>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a0009f6:	4620      	mov	r0, r4
1a0009f8:	2100      	movs	r1, #0
1a0009fa:	f7ff ff89 	bl	1a000910 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a0009fe:	2802      	cmp	r0, #2
1a000a00:	d014      	beq.n	1a000a2c <find_volume+0xa0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
1a000a02:	2600      	movs	r6, #0
1a000a04:	e027      	b.n	1a000a56 <find_volume+0xca>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a000a06:	eb04 1005 	add.w	r0, r4, r5, lsl #4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000a0a:	f890 31f2 	ldrb.w	r3, [r0, #498]	; 0x1f2
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a000a0e:	f500 70f7 	add.w	r0, r0, #494	; 0x1ee
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000a12:	b11b      	cbz	r3, 1a000a1c <find_volume+0x90>
1a000a14:	3008      	adds	r0, #8
1a000a16:	f7ff fe17 	bl	1a000648 <ld_dword>
1a000a1a:	e000      	b.n	1a000a1e <find_volume+0x92>
1a000a1c:	2000      	movs	r0, #0
1a000a1e:	ab04      	add	r3, sp, #16
1a000a20:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000a24:	f843 0c10 	str.w	r0, [r3, #-16]
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
1a000a28:	3501      	adds	r5, #1
1a000a2a:	e000      	b.n	1a000a2e <find_volume+0xa2>
1a000a2c:	2500      	movs	r5, #0
1a000a2e:	2d03      	cmp	r5, #3
1a000a30:	d9e9      	bls.n	1a000a06 <find_volume+0x7a>
1a000a32:	2500      	movs	r5, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
1a000a34:	ab04      	add	r3, sp, #16
1a000a36:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000a3a:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000a3e:	b126      	cbz	r6, 1a000a4a <find_volume+0xbe>
1a000a40:	4620      	mov	r0, r4
1a000a42:	4631      	mov	r1, r6
1a000a44:	f7ff ff64 	bl	1a000910 <check_fs>
1a000a48:	e000      	b.n	1a000a4c <find_volume+0xc0>
1a000a4a:	2003      	movs	r0, #3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
1a000a4c:	2801      	cmp	r0, #1
1a000a4e:	d902      	bls.n	1a000a56 <find_volume+0xca>
1a000a50:	3501      	adds	r5, #1
1a000a52:	2d03      	cmp	r5, #3
1a000a54:	d9ee      	bls.n	1a000a34 <find_volume+0xa8>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a000a56:	2804      	cmp	r0, #4
1a000a58:	f000 80db 	beq.w	1a000c12 <find_volume+0x286>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000a5c:	2801      	cmp	r0, #1
1a000a5e:	f200 80da 	bhi.w	1a000c16 <find_volume+0x28a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000a62:	f104 003b 	add.w	r0, r4, #59	; 0x3b
1a000a66:	f7ff fde9 	bl	1a00063c <ld_word>
1a000a6a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a000a6e:	f040 80d4 	bne.w	1a000c1a <find_volume+0x28e>

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
1a000a72:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a000a76:	f7ff fde1 	bl	1a00063c <ld_word>
1a000a7a:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a000a7c:	b920      	cbnz	r0, 1a000a88 <find_volume+0xfc>
1a000a7e:	f104 0054 	add.w	r0, r4, #84	; 0x54
1a000a82:	f7ff fde1 	bl	1a000648 <ld_dword>
1a000a86:	4680      	mov	r8, r0
		fs->fsize = fasize;
1a000a88:	f8c4 8018 	str.w	r8, [r4, #24]

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
1a000a8c:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
1a000a90:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000a94:	f109 33ff 	add.w	r3, r9, #4294967295
1a000a98:	b2db      	uxtb	r3, r3
1a000a9a:	2b01      	cmp	r3, #1
1a000a9c:	f200 80bf 	bhi.w	1a000c1e <find_volume+0x292>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
1a000aa0:	fb08 f909 	mul.w	r9, r8, r9

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
1a000aa4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
1a000aa8:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000aaa:	2d00      	cmp	r5, #0
1a000aac:	f000 80b9 	beq.w	1a000c22 <find_volume+0x296>
1a000ab0:	1e6b      	subs	r3, r5, #1
1a000ab2:	421d      	tst	r5, r3
1a000ab4:	f040 80b7 	bne.w	1a000c26 <find_volume+0x29a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a000ab8:	f104 0041 	add.w	r0, r4, #65	; 0x41
1a000abc:	f7ff fdbe 	bl	1a00063c <ld_word>
1a000ac0:	4682      	mov	sl, r0
1a000ac2:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000ac4:	f010 0f0f 	tst.w	r0, #15
1a000ac8:	f040 80af 	bne.w	1a000c2a <find_volume+0x29e>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
1a000acc:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a000ad0:	f7ff fdb4 	bl	1a00063c <ld_word>
1a000ad4:	4607      	mov	r7, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a000ad6:	b920      	cbnz	r0, 1a000ae2 <find_volume+0x156>
1a000ad8:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000adc:	f7ff fdb4 	bl	1a000648 <ld_dword>
1a000ae0:	4607      	mov	r7, r0

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
1a000ae2:	f104 003e 	add.w	r0, r4, #62	; 0x3e
1a000ae6:	f7ff fda9 	bl	1a00063c <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000aea:	4603      	mov	r3, r0
1a000aec:	2800      	cmp	r0, #0
1a000aee:	f000 809e 	beq.w	1a000c2e <find_volume+0x2a2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a000af2:	eb00 0209 	add.w	r2, r0, r9
1a000af6:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000afa:	4297      	cmp	r7, r2
1a000afc:	f0c0 8099 	bcc.w	1a000c32 <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
1a000b00:	1abf      	subs	r7, r7, r2
1a000b02:	fbb7 f5f5 	udiv	r5, r7, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a000b06:	2d00      	cmp	r5, #0
1a000b08:	f000 8095 	beq.w	1a000c36 <find_volume+0x2aa>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000b0c:	f64f 71f5 	movw	r1, #65525	; 0xfff5
1a000b10:	428d      	cmp	r5, r1
1a000b12:	d901      	bls.n	1a000b18 <find_volume+0x18c>
		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
1a000b14:	2703      	movs	r7, #3
1a000b16:	e000      	b.n	1a000b1a <find_volume+0x18e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000b18:	2702      	movs	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a000b1a:	f640 71f5 	movw	r1, #4085	; 0xff5
1a000b1e:	428d      	cmp	r5, r1
1a000b20:	d800      	bhi.n	1a000b24 <find_volume+0x198>
1a000b22:	2701      	movs	r7, #1

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
1a000b24:	3502      	adds	r5, #2
1a000b26:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
1a000b28:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
1a000b2a:	4433      	add	r3, r6
1a000b2c:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
1a000b2e:	4432      	add	r2, r6
1a000b30:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
1a000b32:	2f03      	cmp	r7, #3
1a000b34:	d10f      	bne.n	1a000b56 <find_volume+0x1ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a000b36:	f104 005a 	add.w	r0, r4, #90	; 0x5a
1a000b3a:	f7ff fd7f 	bl	1a00063c <ld_word>
1a000b3e:	2800      	cmp	r0, #0
1a000b40:	d17b      	bne.n	1a000c3a <find_volume+0x2ae>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000b42:	f1ba 0f00 	cmp.w	sl, #0
1a000b46:	d17a      	bne.n	1a000c3e <find_volume+0x2b2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a000b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a000b4c:	f7ff fd7c 	bl	1a000648 <ld_dword>
1a000b50:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
1a000b52:	00ad      	lsls	r5, r5, #2
1a000b54:	e00e      	b.n	1a000b74 <find_volume+0x1e8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a000b56:	f1ba 0f00 	cmp.w	sl, #0
1a000b5a:	d072      	beq.n	1a000c42 <find_volume+0x2b6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
1a000b5c:	444b      	add	r3, r9
1a000b5e:	6263      	str	r3, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a000b60:	2f02      	cmp	r7, #2
1a000b62:	d101      	bne.n	1a000b68 <find_volume+0x1dc>
1a000b64:	006d      	lsls	r5, r5, #1
1a000b66:	e005      	b.n	1a000b74 <find_volume+0x1e8>
1a000b68:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a000b6c:	f005 0501 	and.w	r5, r5, #1
1a000b70:	eb05 0553 	add.w	r5, r5, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a000b74:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
1a000b78:	ebb8 2f55 	cmp.w	r8, r5, lsr #9
1a000b7c:	d363      	bcc.n	1a000c46 <find_volume+0x2ba>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a000b7e:	f04f 33ff 	mov.w	r3, #4294967295
1a000b82:	6123      	str	r3, [r4, #16]
1a000b84:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
1a000b86:	2380      	movs	r3, #128	; 0x80
1a000b88:	7123      	strb	r3, [r4, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
1a000b8a:	2f03      	cmp	r7, #3
1a000b8c:	d12c      	bne.n	1a000be8 <find_volume+0x25c>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a000b8e:	f104 0060 	add.w	r0, r4, #96	; 0x60
1a000b92:	f7ff fd53 	bl	1a00063c <ld_word>
1a000b96:	2801      	cmp	r0, #1
1a000b98:	d126      	bne.n	1a000be8 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
1a000b9a:	4620      	mov	r0, r4
1a000b9c:	1c71      	adds	r1, r6, #1
1a000b9e:	f7ff fe9d 	bl	1a0008dc <move_window>
1a000ba2:	bb08      	cbnz	r0, 1a000be8 <find_volume+0x25c>
		{
			fs->fsi_flag = 0;
1a000ba4:	2300      	movs	r3, #0
1a000ba6:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
1a000ba8:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000bac:	f7ff fd46 	bl	1a00063c <ld_word>
1a000bb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000bb4:	4298      	cmp	r0, r3
1a000bb6:	d117      	bne.n	1a000be8 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a000bb8:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a000bbc:	f7ff fd44 	bl	1a000648 <ld_dword>
1a000bc0:	4b24      	ldr	r3, [pc, #144]	; (1a000c54 <find_volume+0x2c8>)
1a000bc2:	4298      	cmp	r0, r3
1a000bc4:	d110      	bne.n	1a000be8 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a000bc6:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a000bca:	f7ff fd3d 	bl	1a000648 <ld_dword>
1a000bce:	4b22      	ldr	r3, [pc, #136]	; (1a000c58 <find_volume+0x2cc>)
1a000bd0:	4298      	cmp	r0, r3
1a000bd2:	d109      	bne.n	1a000be8 <find_volume+0x25c>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a000bd4:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a000bd8:	f7ff fd36 	bl	1a000648 <ld_dword>
1a000bdc:	6120      	str	r0, [r4, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a000bde:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a000be2:	f7ff fd31 	bl	1a000648 <ld_dword>
1a000be6:	60e0      	str	r0, [r4, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
1a000be8:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
1a000bea:	4a1c      	ldr	r2, [pc, #112]	; (1a000c5c <find_volume+0x2d0>)
1a000bec:	8813      	ldrh	r3, [r2, #0]
1a000bee:	3301      	adds	r3, #1
1a000bf0:	b29b      	uxth	r3, r3
1a000bf2:	8013      	strh	r3, [r2, #0]
1a000bf4:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
1a000bf6:	2000      	movs	r0, #0
1a000bf8:	e026      	b.n	1a000c48 <find_volume+0x2bc>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
1a000bfa:	200b      	movs	r0, #11
1a000bfc:	e024      	b.n	1a000c48 <find_volume+0x2bc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a000bfe:	200c      	movs	r0, #12
1a000c00:	e022      	b.n	1a000c48 <find_volume+0x2bc>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a000c02:	2000      	movs	r0, #0
1a000c04:	e020      	b.n	1a000c48 <find_volume+0x2bc>
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
1a000c06:	200a      	movs	r0, #10
1a000c08:	e01e      	b.n	1a000c48 <find_volume+0x2bc>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a000c0a:	2003      	movs	r0, #3
1a000c0c:	e01c      	b.n	1a000c48 <find_volume+0x2bc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
1a000c0e:	200a      	movs	r0, #10
1a000c10:	e01a      	b.n	1a000c48 <find_volume+0x2bc>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a000c12:	2001      	movs	r0, #1
1a000c14:	e018      	b.n	1a000c48 <find_volume+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000c16:	200d      	movs	r0, #13
1a000c18:	e016      	b.n	1a000c48 <find_volume+0x2bc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000c1a:	200d      	movs	r0, #13
1a000c1c:	e014      	b.n	1a000c48 <find_volume+0x2bc>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000c1e:	200d      	movs	r0, #13
1a000c20:	e012      	b.n	1a000c48 <find_volume+0x2bc>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000c22:	200d      	movs	r0, #13
1a000c24:	e010      	b.n	1a000c48 <find_volume+0x2bc>
1a000c26:	200d      	movs	r0, #13
1a000c28:	e00e      	b.n	1a000c48 <find_volume+0x2bc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000c2a:	200d      	movs	r0, #13
1a000c2c:	e00c      	b.n	1a000c48 <find_volume+0x2bc>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000c2e:	200d      	movs	r0, #13
1a000c30:	e00a      	b.n	1a000c48 <find_volume+0x2bc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000c32:	200d      	movs	r0, #13
1a000c34:	e008      	b.n	1a000c48 <find_volume+0x2bc>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a000c36:	200d      	movs	r0, #13
1a000c38:	e006      	b.n	1a000c48 <find_volume+0x2bc>
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a000c3a:	200d      	movs	r0, #13
1a000c3c:	e004      	b.n	1a000c48 <find_volume+0x2bc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000c3e:	200d      	movs	r0, #13
1a000c40:	e002      	b.n	1a000c48 <find_volume+0x2bc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a000c42:	200d      	movs	r0, #13
1a000c44:	e000      	b.n	1a000c48 <find_volume+0x2bc>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a000c46:	200d      	movs	r0, #13
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
1a000c48:	b004      	add	sp, #16
1a000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000c4e:	bf00      	nop
1a000c50:	10000590 	.word	0x10000590
1a000c54:	41615252 	.word	0x41615252
1a000c58:	61417272 	.word	0x61417272
1a000c5c:	1000058c 	.word	0x1000058c

1a000c60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
1a000c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000c64:	460c      	mov	r4, r1
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a000c66:	2901      	cmp	r1, #1
1a000c68:	d977      	bls.n	1a000d5a <put_fat+0xfa>
1a000c6a:	4605      	mov	r5, r0
1a000c6c:	4617      	mov	r7, r2
1a000c6e:	6943      	ldr	r3, [r0, #20]
1a000c70:	428b      	cmp	r3, r1
1a000c72:	d974      	bls.n	1a000d5e <put_fat+0xfe>
		switch (fs->fs_type) {
1a000c74:	7803      	ldrb	r3, [r0, #0]
1a000c76:	2b02      	cmp	r3, #2
1a000c78:	d043      	beq.n	1a000d02 <put_fat+0xa2>
1a000c7a:	2b03      	cmp	r3, #3
1a000c7c:	d053      	beq.n	1a000d26 <put_fat+0xc6>
1a000c7e:	2b01      	cmp	r3, #1
1a000c80:	d16f      	bne.n	1a000d62 <put_fat+0x102>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
1a000c82:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a000c86:	6a01      	ldr	r1, [r0, #32]
1a000c88:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a000c8c:	f7ff fe26 	bl	1a0008dc <move_window>
			if (res != FR_OK) break;
1a000c90:	4606      	mov	r6, r0
1a000c92:	2800      	cmp	r0, #0
1a000c94:	d166      	bne.n	1a000d64 <put_fat+0x104>
			p = fs->win + bc++ % SS(fs);
1a000c96:	f108 0901 	add.w	r9, r8, #1
1a000c9a:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1a000c9e:	f014 0401 	ands.w	r4, r4, #1
1a000ca2:	d00a      	beq.n	1a000cba <put_fat+0x5a>
1a000ca4:	eb05 0308 	add.w	r3, r5, r8
1a000ca8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
1a000cac:	b2fb      	uxtb	r3, r7
1a000cae:	f002 020f 	and.w	r2, r2, #15
1a000cb2:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
1a000cb6:	b2db      	uxtb	r3, r3
1a000cb8:	e000      	b.n	1a000cbc <put_fat+0x5c>
1a000cba:	b2fb      	uxtb	r3, r7
1a000cbc:	44a8      	add	r8, r5
1a000cbe:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
1a000cc2:	2301      	movs	r3, #1
1a000cc4:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a000cc6:	6a29      	ldr	r1, [r5, #32]
1a000cc8:	4628      	mov	r0, r5
1a000cca:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a000cce:	f7ff fe05 	bl	1a0008dc <move_window>
			if (res != FR_OK) break;
1a000cd2:	4606      	mov	r6, r0
1a000cd4:	2800      	cmp	r0, #0
1a000cd6:	d145      	bne.n	1a000d64 <put_fat+0x104>
			p = fs->win + bc % SS(fs);
1a000cd8:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1a000cdc:	b114      	cbz	r4, 1a000ce4 <put_fat+0x84>
1a000cde:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a000ce2:	e008      	b.n	1a000cf6 <put_fat+0x96>
1a000ce4:	eb05 0309 	add.w	r3, r5, r9
1a000ce8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
1a000cec:	f023 030f 	bic.w	r3, r3, #15
1a000cf0:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a000cf4:	431f      	orrs	r7, r3
1a000cf6:	44a9      	add	r9, r5
1a000cf8:	f889 7030 	strb.w	r7, [r9, #48]	; 0x30
			fs->wflag = 1;
1a000cfc:	2301      	movs	r3, #1
1a000cfe:	70eb      	strb	r3, [r5, #3]
			break;
1a000d00:	e030      	b.n	1a000d64 <put_fat+0x104>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a000d02:	6a01      	ldr	r1, [r0, #32]
1a000d04:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a000d08:	f7ff fde8 	bl	1a0008dc <move_window>
			if (res != FR_OK) break;
1a000d0c:	4606      	mov	r6, r0
1a000d0e:	bb48      	cbnz	r0, 1a000d64 <put_fat+0x104>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1a000d10:	0060      	lsls	r0, r4, #1
1a000d12:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
1a000d16:	3030      	adds	r0, #48	; 0x30
1a000d18:	4428      	add	r0, r5
1a000d1a:	b2b9      	uxth	r1, r7
1a000d1c:	f7ff fca0 	bl	1a000660 <st_word>
			fs->wflag = 1;
1a000d20:	2301      	movs	r3, #1
1a000d22:	70eb      	strb	r3, [r5, #3]
			break;
1a000d24:	e01e      	b.n	1a000d64 <put_fat+0x104>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a000d26:	6a01      	ldr	r1, [r0, #32]
1a000d28:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a000d2c:	f7ff fdd6 	bl	1a0008dc <move_window>
			if (res != FR_OK) break;
1a000d30:	4606      	mov	r6, r0
1a000d32:	b9b8      	cbnz	r0, 1a000d64 <put_fat+0x104>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a000d34:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a000d38:	00a4      	lsls	r4, r4, #2
1a000d3a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a000d3e:	3430      	adds	r4, #48	; 0x30
1a000d40:	442c      	add	r4, r5
1a000d42:	4620      	mov	r0, r4
1a000d44:	f7ff fc80 	bl	1a000648 <ld_dword>
1a000d48:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a000d4c:	4620      	mov	r0, r4
1a000d4e:	4339      	orrs	r1, r7
1a000d50:	f7ff fc8a 	bl	1a000668 <st_dword>
			fs->wflag = 1;
1a000d54:	2301      	movs	r3, #1
1a000d56:	70eb      	strb	r3, [r5, #3]
			break;
1a000d58:	e004      	b.n	1a000d64 <put_fat+0x104>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
1a000d5a:	2602      	movs	r6, #2
1a000d5c:	e002      	b.n	1a000d64 <put_fat+0x104>
1a000d5e:	2602      	movs	r6, #2
1a000d60:	e000      	b.n	1a000d64 <put_fat+0x104>
1a000d62:	2602      	movs	r6, #2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
1a000d64:	4630      	mov	r0, r6
1a000d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000d6a:	bf00      	nop

1a000d6c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
1a000d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
1a000d6e:	6806      	ldr	r6, [r0, #0]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a000d70:	2901      	cmp	r1, #1
1a000d72:	d951      	bls.n	1a000e18 <get_fat+0xac>
1a000d74:	6973      	ldr	r3, [r6, #20]
1a000d76:	428b      	cmp	r3, r1
1a000d78:	d950      	bls.n	1a000e1c <get_fat+0xb0>
1a000d7a:	460c      	mov	r4, r1
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
1a000d7c:	7833      	ldrb	r3, [r6, #0]
1a000d7e:	2b02      	cmp	r3, #2
1a000d80:	d02a      	beq.n	1a000dd8 <get_fat+0x6c>
1a000d82:	2b03      	cmp	r3, #3
1a000d84:	d037      	beq.n	1a000df6 <get_fat+0x8a>
1a000d86:	2b01      	cmp	r3, #1
1a000d88:	d14a      	bne.n	1a000e20 <get_fat+0xb4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
1a000d8a:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a000d8e:	6a31      	ldr	r1, [r6, #32]
1a000d90:	4630      	mov	r0, r6
1a000d92:	eb01 2155 	add.w	r1, r1, r5, lsr #9
1a000d96:	f7ff fda1 	bl	1a0008dc <move_window>
1a000d9a:	2800      	cmp	r0, #0
1a000d9c:	d142      	bne.n	1a000e24 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
1a000d9e:	1c6f      	adds	r7, r5, #1
1a000da0:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a000da4:	4435      	add	r5, r6
1a000da6:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a000daa:	6a31      	ldr	r1, [r6, #32]
1a000dac:	4630      	mov	r0, r6
1a000dae:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a000db2:	f7ff fd93 	bl	1a0008dc <move_window>
1a000db6:	2800      	cmp	r0, #0
1a000db8:	d137      	bne.n	1a000e2a <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
1a000dba:	f3c7 0708 	ubfx	r7, r7, #0, #9
1a000dbe:	443e      	add	r6, r7
1a000dc0:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
1a000dc4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1a000dc8:	f014 0f01 	tst.w	r4, #1
1a000dcc:	d001      	beq.n	1a000dd2 <get_fat+0x66>
1a000dce:	0900      	lsrs	r0, r0, #4
1a000dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000dd2:	f3c0 000b 	ubfx	r0, r0, #0, #12
			break;
1a000dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a000dd8:	6a31      	ldr	r1, [r6, #32]
1a000dda:	4630      	mov	r0, r6
1a000ddc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a000de0:	f7ff fd7c 	bl	1a0008dc <move_window>
1a000de4:	bb20      	cbnz	r0, 1a000e30 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
1a000de6:	0060      	lsls	r0, r4, #1
1a000de8:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
1a000dec:	3030      	adds	r0, #48	; 0x30
1a000dee:	4430      	add	r0, r6
1a000df0:	f7ff fc24 	bl	1a00063c <ld_word>
			break;
1a000df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a000df6:	6a31      	ldr	r1, [r6, #32]
1a000df8:	4630      	mov	r0, r6
1a000dfa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a000dfe:	f7ff fd6d 	bl	1a0008dc <move_window>
1a000e02:	b9c0      	cbnz	r0, 1a000e36 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1a000e04:	00a0      	lsls	r0, r4, #2
1a000e06:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
1a000e0a:	3030      	adds	r0, #48	; 0x30
1a000e0c:	4430      	add	r0, r6
1a000e0e:	f7ff fc1b 	bl	1a000648 <ld_dword>
1a000e12:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a000e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */
1a000e18:	2001      	movs	r0, #1
1a000e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e1c:	2001      	movs	r0, #1
1a000e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
1a000e20:	2001      	movs	r0, #1
1a000e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a000e24:	f04f 30ff 	mov.w	r0, #4294967295
1a000e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e2a:	f04f 30ff 	mov.w	r0, #4294967295
1a000e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e30:	f04f 30ff 	mov.w	r0, #4294967295
1a000e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000e36:	f04f 30ff 	mov.w	r0, #4294967295
			val = 1;	/* Internal error */
		}
	}

	return val;
}
1a000e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000e3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
1a000e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e40:	4606      	mov	r6, r0
1a000e42:	460c      	mov	r4, r1
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
1a000e44:	6807      	ldr	r7, [r0, #0]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a000e46:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a000e4a:	d23a      	bcs.n	1a000ec2 <dir_sdi+0x86>
1a000e4c:	f011 0f1f 	tst.w	r1, #31
1a000e50:	d13a      	bne.n	1a000ec8 <dir_sdi+0x8c>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
1a000e52:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a000e54:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a000e56:	b91d      	cbnz	r5, 1a000e60 <dir_sdi+0x24>
1a000e58:	783b      	ldrb	r3, [r7, #0]
1a000e5a:	2b02      	cmp	r3, #2
1a000e5c:	d900      	bls.n	1a000e60 <dir_sdi+0x24>
		clst = fs->dirbase;
1a000e5e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1a000e60:	b935      	cbnz	r5, 1a000e70 <dir_sdi+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1a000e62:	893b      	ldrh	r3, [r7, #8]
1a000e64:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
1a000e68:	d931      	bls.n	1a000ece <dir_sdi+0x92>
		dp->sect = fs->dirbase;
1a000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000e6c:	61b3      	str	r3, [r6, #24]
1a000e6e:	e01a      	b.n	1a000ea6 <dir_sdi+0x6a>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a000e70:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a000e74:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a000e78:	e00e      	b.n	1a000e98 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a000e7a:	4630      	mov	r0, r6
1a000e7c:	4629      	mov	r1, r5
1a000e7e:	f7ff ff75 	bl	1a000d6c <get_fat>
1a000e82:	4605      	mov	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000e84:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000e88:	d024      	beq.n	1a000ed4 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a000e8a:	2801      	cmp	r0, #1
1a000e8c:	d925      	bls.n	1a000eda <dir_sdi+0x9e>
1a000e8e:	697b      	ldr	r3, [r7, #20]
1a000e90:	4283      	cmp	r3, r0
1a000e92:	d925      	bls.n	1a000ee0 <dir_sdi+0xa4>
			ofs -= csz;
1a000e94:	ebc8 0404 	rsb	r4, r8, r4
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
1a000e98:	4544      	cmp	r4, r8
1a000e9a:	d2ee      	bcs.n	1a000e7a <dir_sdi+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
1a000e9c:	4638      	mov	r0, r7
1a000e9e:	4629      	mov	r1, r5
1a000ea0:	f7ff fc14 	bl	1a0006cc <clust2sect>
1a000ea4:	61b0      	str	r0, [r6, #24]
	}
	dp->clust = clst;					/* Current cluster# */
1a000ea6:	6175      	str	r5, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
1a000ea8:	69b3      	ldr	r3, [r6, #24]
1a000eaa:	b1e3      	cbz	r3, 1a000ee6 <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a000eac:	eb03 2354 	add.w	r3, r3, r4, lsr #9
1a000eb0:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a000eb2:	f3c4 0308 	ubfx	r3, r4, #0, #9
1a000eb6:	3330      	adds	r3, #48	; 0x30
1a000eb8:	443b      	add	r3, r7
1a000eba:	61f3      	str	r3, [r6, #28]

	return FR_OK;
1a000ebc:	2000      	movs	r0, #0
1a000ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
1a000ec2:	2002      	movs	r0, #2
1a000ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ec8:	2002      	movs	r0, #2
1a000eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1a000ece:	2002      	movs	r0, #2
1a000ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000ed4:	2001      	movs	r0, #1
1a000ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a000eda:	2002      	movs	r0, #2
1a000edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000ee0:	2002      	movs	r0, #2
1a000ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
	if (!dp->sect) return FR_INT_ERR;
1a000ee6:	2002      	movs	r0, #2
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
1a000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a000eec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
1a000eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000ef0:	4607      	mov	r7, r0
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
1a000ef2:	6806      	ldr	r6, [r0, #0]


	if (clst == 0) {	/* Create a new chain */
1a000ef4:	4688      	mov	r8, r1
1a000ef6:	b929      	cbnz	r1, 1a000f04 <create_chain+0x18>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
1a000ef8:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a000efa:	b17d      	cbz	r5, 1a000f1c <create_chain+0x30>
1a000efc:	6973      	ldr	r3, [r6, #20]
1a000efe:	42ab      	cmp	r3, r5
1a000f00:	d90e      	bls.n	1a000f20 <create_chain+0x34>
1a000f02:	e00e      	b.n	1a000f22 <create_chain+0x36>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a000f04:	f7ff ff32 	bl	1a000d6c <get_fat>
		if (cs < 2) return 1;				/* Invalid value */
1a000f08:	2801      	cmp	r0, #1
1a000f0a:	d94b      	bls.n	1a000fa4 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1a000f0c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000f10:	d04f      	beq.n	1a000fb2 <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a000f12:	6973      	ldr	r3, [r6, #20]
1a000f14:	4283      	cmp	r3, r0
1a000f16:	d84c      	bhi.n	1a000fb2 <create_chain+0xc6>
		scl = clst;
1a000f18:	4645      	mov	r5, r8
1a000f1a:	e002      	b.n	1a000f22 <create_chain+0x36>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a000f1c:	2501      	movs	r5, #1
1a000f1e:	e000      	b.n	1a000f22 <create_chain+0x36>
1a000f20:	2501      	movs	r5, #1
			}
		}
	} else
#endif
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
1a000f22:	462c      	mov	r4, r5
		for (;;) {
			ncl++;							/* Next cluster */
1a000f24:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a000f26:	6973      	ldr	r3, [r6, #20]
1a000f28:	42a3      	cmp	r3, r4
1a000f2a:	d802      	bhi.n	1a000f32 <create_chain+0x46>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
1a000f2c:	2d01      	cmp	r5, #1
1a000f2e:	d93c      	bls.n	1a000faa <create_chain+0xbe>
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
1a000f30:	2402      	movs	r4, #2
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
1a000f32:	4638      	mov	r0, r7
1a000f34:	4621      	mov	r1, r4
1a000f36:	f7ff ff19 	bl	1a000d6c <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
1a000f3a:	4603      	mov	r3, r0
1a000f3c:	b150      	cbz	r0, 1a000f54 <create_chain+0x68>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1a000f3e:	2801      	cmp	r0, #1
1a000f40:	d002      	beq.n	1a000f48 <create_chain+0x5c>
1a000f42:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000f46:	d102      	bne.n	1a000f4e <create_chain+0x62>
1a000f48:	4618      	mov	r0, r3
1a000f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ncl == scl) return 0;		/* No free cluster */
1a000f4e:	42ac      	cmp	r4, r5
1a000f50:	d1e8      	bne.n	1a000f24 <create_chain+0x38>
1a000f52:	e02d      	b.n	1a000fb0 <create_chain+0xc4>
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1a000f54:	4630      	mov	r0, r6
1a000f56:	4621      	mov	r1, r4
1a000f58:	f04f 32ff 	mov.w	r2, #4294967295
1a000f5c:	f7ff fe80 	bl	1a000c60 <put_fat>
		if (res == FR_OK && clst) {
1a000f60:	4603      	mov	r3, r0
1a000f62:	b940      	cbnz	r0, 1a000f76 <create_chain+0x8a>
1a000f64:	f1b8 0f00 	cmp.w	r8, #0
1a000f68:	d005      	beq.n	1a000f76 <create_chain+0x8a>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1a000f6a:	4630      	mov	r0, r6
1a000f6c:	4641      	mov	r1, r8
1a000f6e:	4622      	mov	r2, r4
1a000f70:	f7ff fe76 	bl	1a000c60 <put_fat>
1a000f74:	4603      	mov	r3, r0
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a000f76:	b963      	cbnz	r3, 1a000f92 <create_chain+0xa6>
		fs->last_clst = ncl;
1a000f78:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
1a000f7a:	6932      	ldr	r2, [r6, #16]
1a000f7c:	6973      	ldr	r3, [r6, #20]
1a000f7e:	3b02      	subs	r3, #2
1a000f80:	429a      	cmp	r2, r3
1a000f82:	d201      	bcs.n	1a000f88 <create_chain+0x9c>
1a000f84:	3a01      	subs	r2, #1
1a000f86:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
1a000f88:	7933      	ldrb	r3, [r6, #4]
1a000f8a:	f043 0301 	orr.w	r3, r3, #1
1a000f8e:	7133      	strb	r3, [r6, #4]
1a000f90:	e005      	b.n	1a000f9e <create_chain+0xb2>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
1a000f92:	2b01      	cmp	r3, #1
1a000f94:	d102      	bne.n	1a000f9c <create_chain+0xb0>
1a000f96:	f04f 34ff 	mov.w	r4, #4294967295
1a000f9a:	e000      	b.n	1a000f9e <create_chain+0xb2>
1a000f9c:	2401      	movs	r4, #1
	}

	return ncl;		/* Return new cluster number or error status */
1a000f9e:	4620      	mov	r0, r4
1a000fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Invalid value */
1a000fa4:	2001      	movs	r0, #1
1a000fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
1a000faa:	2000      	movs	r0, #0
1a000fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
			if (ncl == scl) return 0;		/* No free cluster */
1a000fb0:	2000      	movs	r0, #0
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
1a000fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000fb6:	bf00      	nop

1a000fb8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
1a000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000fba:	4607      	mov	r7, r0
1a000fbc:	460e      	mov	r6, r1
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
1a000fbe:	6804      	ldr	r4, [r0, #0]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a000fc0:	2901      	cmp	r1, #1
1a000fc2:	d92c      	bls.n	1a00101e <remove_chain+0x66>
1a000fc4:	6963      	ldr	r3, [r4, #20]
1a000fc6:	428b      	cmp	r3, r1
1a000fc8:	d92b      	bls.n	1a001022 <remove_chain+0x6a>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a000fca:	b132      	cbz	r2, 1a000fda <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a000fcc:	4620      	mov	r0, r4
1a000fce:	4611      	mov	r1, r2
1a000fd0:	f04f 32ff 	mov.w	r2, #4294967295
1a000fd4:	f7ff fe44 	bl	1a000c60 <put_fat>
		if (res != FR_OK) return res;
1a000fd8:	bb28      	cbnz	r0, 1a001026 <remove_chain+0x6e>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a000fda:	4638      	mov	r0, r7
1a000fdc:	4631      	mov	r1, r6
1a000fde:	f7ff fec5 	bl	1a000d6c <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a000fe2:	4605      	mov	r5, r0
1a000fe4:	b300      	cbz	r0, 1a001028 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a000fe6:	2801      	cmp	r0, #1
1a000fe8:	d020      	beq.n	1a00102c <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a000fea:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000fee:	d01f      	beq.n	1a001030 <remove_chain+0x78>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a000ff0:	4620      	mov	r0, r4
1a000ff2:	4631      	mov	r1, r6
1a000ff4:	2200      	movs	r2, #0
1a000ff6:	f7ff fe33 	bl	1a000c60 <put_fat>
			if (res != FR_OK) return res;
1a000ffa:	b100      	cbz	r0, 1a000ffe <remove_chain+0x46>
1a000ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
1a000ffe:	6923      	ldr	r3, [r4, #16]
1a001000:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001004:	d005      	beq.n	1a001012 <remove_chain+0x5a>
			fs->free_clst++;
1a001006:	3301      	adds	r3, #1
1a001008:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
1a00100a:	7923      	ldrb	r3, [r4, #4]
1a00100c:	f043 0301 	orr.w	r3, r3, #1
1a001010:	7123      	strb	r3, [r4, #4]
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001012:	6963      	ldr	r3, [r4, #20]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
1a001014:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001016:	429d      	cmp	r5, r3
1a001018:	d3df      	bcc.n	1a000fda <remove_chain+0x22>
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
1a00101a:	2000      	movs	r0, #0
1a00101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a00101e:	2002      	movs	r0, #2
1a001020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001022:	2002      	movs	r0, #2
1a001024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
1a001028:	2000      	movs	r0, #0
1a00102a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a00102c:	2002      	movs	r0, #2
1a00102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001030:	2001      	movs	r0, #1
			}
		}
	}
#endif
	return FR_OK;
}
1a001032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001034 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
1a001034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
1a001038:	6806      	ldr	r6, [r0, #0]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a00103a:	6903      	ldr	r3, [r0, #16]
1a00103c:	f103 0520 	add.w	r5, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001040:	6983      	ldr	r3, [r0, #24]
1a001042:	2b00      	cmp	r3, #0
1a001044:	d06e      	beq.n	1a001124 <dir_next+0xf0>
1a001046:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
1a00104a:	d26e      	bcs.n	1a00112a <dir_next+0xf6>
1a00104c:	4688      	mov	r8, r1
1a00104e:	4604      	mov	r4, r0

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a001050:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a001054:	2f00      	cmp	r7, #0
1a001056:	d15d      	bne.n	1a001114 <dir_next+0xe0>
		dp->sect++;				/* Next sector */
1a001058:	3301      	adds	r3, #1
1a00105a:	6183      	str	r3, [r0, #24]

		if (!dp->clust) {		/* Static table */
1a00105c:	6941      	ldr	r1, [r0, #20]
1a00105e:	b941      	cbnz	r1, 1a001072 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a001060:	8933      	ldrh	r3, [r6, #8]
1a001062:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001066:	d855      	bhi.n	1a001114 <dir_next+0xe0>
				dp->sect = 0; return FR_NO_FILE;
1a001068:	2300      	movs	r3, #0
1a00106a:	6183      	str	r3, [r0, #24]
1a00106c:	2004      	movs	r0, #4
1a00106e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
1a001072:	8973      	ldrh	r3, [r6, #10]
1a001074:	3b01      	subs	r3, #1
1a001076:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a00107a:	d14b      	bne.n	1a001114 <dir_next+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1a00107c:	f7ff fe76 	bl	1a000d6c <get_fat>
1a001080:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1a001082:	2801      	cmp	r0, #1
1a001084:	d954      	bls.n	1a001130 <dir_next+0xfc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1a001086:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00108a:	d054      	beq.n	1a001136 <dir_next+0x102>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1a00108c:	6973      	ldr	r3, [r6, #20]
1a00108e:	4283      	cmp	r3, r0
1a001090:	d839      	bhi.n	1a001106 <dir_next+0xd2>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
1a001092:	f1b8 0f00 	cmp.w	r8, #0
1a001096:	d104      	bne.n	1a0010a2 <dir_next+0x6e>
						dp->sect = 0; return FR_NO_FILE;
1a001098:	2300      	movs	r3, #0
1a00109a:	61a3      	str	r3, [r4, #24]
1a00109c:	2004      	movs	r0, #4
1a00109e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a0010a2:	4620      	mov	r0, r4
1a0010a4:	6961      	ldr	r1, [r4, #20]
1a0010a6:	f7ff ff21 	bl	1a000eec <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a0010aa:	4681      	mov	r9, r0
1a0010ac:	2800      	cmp	r0, #0
1a0010ae:	d045      	beq.n	1a00113c <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a0010b0:	2801      	cmp	r0, #1
1a0010b2:	d046      	beq.n	1a001142 <dir_next+0x10e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a0010b4:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0010b8:	d046      	beq.n	1a001148 <dir_next+0x114>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a0010ba:	4630      	mov	r0, r6
1a0010bc:	f7ff fbe4 	bl	1a000888 <sync_window>
1a0010c0:	2800      	cmp	r0, #0
1a0010c2:	d144      	bne.n	1a00114e <dir_next+0x11a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1a0010c4:	f106 0030 	add.w	r0, r6, #48	; 0x30
1a0010c8:	2100      	movs	r1, #0
1a0010ca:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0010ce:	f7ff fadf 	bl	1a000690 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
1a0010d2:	4630      	mov	r0, r6
1a0010d4:	4649      	mov	r1, r9
1a0010d6:	f7ff faf9 	bl	1a0006cc <clust2sect>
1a0010da:	62f0      	str	r0, [r6, #44]	; 0x2c
1a0010dc:	f04f 0800 	mov.w	r8, #0
1a0010e0:	e00a      	b.n	1a0010f8 <dir_next+0xc4>
						fs->wflag = 1;
1a0010e2:	2301      	movs	r3, #1
1a0010e4:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1a0010e6:	4630      	mov	r0, r6
1a0010e8:	f7ff fbce 	bl	1a000888 <sync_window>
1a0010ec:	bb90      	cbnz	r0, 1a001154 <dir_next+0x120>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
1a0010ee:	f108 0801 	add.w	r8, r8, #1
1a0010f2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a0010f4:	3301      	adds	r3, #1
1a0010f6:	62f3      	str	r3, [r6, #44]	; 0x2c
1a0010f8:	8973      	ldrh	r3, [r6, #10]
1a0010fa:	4543      	cmp	r3, r8
1a0010fc:	d8f1      	bhi.n	1a0010e2 <dir_next+0xae>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
1a0010fe:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001100:	ebc8 0303 	rsb	r3, r8, r3
1a001104:	62f3      	str	r3, [r6, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
1a001106:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
1a00110a:	4630      	mov	r0, r6
1a00110c:	4649      	mov	r1, r9
1a00110e:	f7ff fadd 	bl	1a0006cc <clust2sect>
1a001112:	61a0      	str	r0, [r4, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
1a001114:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a001116:	f107 0830 	add.w	r8, r7, #48	; 0x30
1a00111a:	4446      	add	r6, r8
1a00111c:	61e6      	str	r6, [r4, #28]

	return FR_OK;
1a00111e:	2000      	movs	r0, #0
1a001120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001124:	2004      	movs	r0, #4
1a001126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00112a:	2004      	movs	r0, #4
1a00112c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1a001130:	2002      	movs	r0, #2
1a001132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1a001136:	2001      	movs	r0, #1
1a001138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a00113c:	2007      	movs	r0, #7
1a00113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001142:	2002      	movs	r0, #2
1a001144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001148:	2001      	movs	r0, #1
1a00114a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a00114e:	2001      	movs	r0, #1
1a001150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1a001154:	2001      	movs	r0, #1
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
1a001156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00115a:	bf00      	nop

1a00115c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
1a00115c:	b570      	push	{r4, r5, r6, lr}
1a00115e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
1a001160:	6806      	ldr	r6, [r0, #0]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a001162:	2100      	movs	r1, #0
1a001164:	f7ff fe6a 	bl	1a000e3c <dir_sdi>
	if (res != FR_OK) return res;
1a001168:	bb08      	cbnz	r0, 1a0011ae <dir_find+0x52>
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
1a00116a:	4630      	mov	r0, r6
1a00116c:	69a1      	ldr	r1, [r4, #24]
1a00116e:	f7ff fbb5 	bl	1a0008dc <move_window>
		if (res != FR_OK) break;
1a001172:	4605      	mov	r5, r0
1a001174:	b9c8      	cbnz	r0, 1a0011aa <dir_find+0x4e>
		c = dp->dir[DIR_Name];
1a001176:	69e0      	ldr	r0, [r4, #28]
1a001178:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00117a:	b1ab      	cbz	r3, 1a0011a8 <dir_find+0x4c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
1a00117c:	7ac3      	ldrb	r3, [r0, #11]
1a00117e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a001182:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
1a001184:	7ac3      	ldrb	r3, [r0, #11]
1a001186:	f013 0f08 	tst.w	r3, #8
1a00118a:	d105      	bne.n	1a001198 <dir_find+0x3c>
1a00118c:	f104 0120 	add.w	r1, r4, #32
1a001190:	220b      	movs	r2, #11
1a001192:	f7ff fa83 	bl	1a00069c <mem_cmp>
1a001196:	b140      	cbz	r0, 1a0011aa <dir_find+0x4e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
1a001198:	4620      	mov	r0, r4
1a00119a:	2100      	movs	r1, #0
1a00119c:	f7ff ff4a 	bl	1a001034 <dir_next>
	} while (res == FR_OK);
1a0011a0:	4605      	mov	r5, r0
1a0011a2:	2800      	cmp	r0, #0
1a0011a4:	d0e1      	beq.n	1a00116a <dir_find+0xe>
1a0011a6:	e000      	b.n	1a0011aa <dir_find+0x4e>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a0011a8:	2504      	movs	r5, #4
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
1a0011aa:	4628      	mov	r0, r5
1a0011ac:	bd70      	pop	{r4, r5, r6, pc}
}
1a0011ae:	bd70      	pop	{r4, r5, r6, pc}

1a0011b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
1a0011b0:	b530      	push	{r4, r5, lr}
1a0011b2:	b083      	sub	sp, #12
1a0011b4:	4604      	mov	r4, r0
1a0011b6:	9101      	str	r1, [sp, #4]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
1a0011b8:	6805      	ldr	r5, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a0011ba:	e001      	b.n	1a0011c0 <follow_path+0x10>
1a0011bc:	3301      	adds	r3, #1
1a0011be:	9301      	str	r3, [sp, #4]
1a0011c0:	9b01      	ldr	r3, [sp, #4]
1a0011c2:	781a      	ldrb	r2, [r3, #0]
1a0011c4:	2a2f      	cmp	r2, #47	; 0x2f
1a0011c6:	d0f9      	beq.n	1a0011bc <follow_path+0xc>
1a0011c8:	2a5c      	cmp	r2, #92	; 0x5c
1a0011ca:	d0f7      	beq.n	1a0011bc <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
1a0011cc:	2200      	movs	r2, #0
1a0011ce:	60a2      	str	r2, [r4, #8]
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a0011d0:	781b      	ldrb	r3, [r3, #0]
1a0011d2:	2b1f      	cmp	r3, #31
1a0011d4:	d808      	bhi.n	1a0011e8 <follow_path+0x38>
		dp->fn[NSFLAG] = NS_NONAME;
1a0011d6:	2380      	movs	r3, #128	; 0x80
1a0011d8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		res = dir_sdi(dp, 0);
1a0011dc:	4620      	mov	r0, r4
1a0011de:	4611      	mov	r1, r2
1a0011e0:	f7ff fe2c 	bl	1a000e3c <dir_sdi>
1a0011e4:	4603      	mov	r3, r0
1a0011e6:	e026      	b.n	1a001236 <follow_path+0x86>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a0011e8:	4620      	mov	r0, r4
1a0011ea:	a901      	add	r1, sp, #4
1a0011ec:	f7ff fa9e 	bl	1a00072c <create_name>
			if (res != FR_OK) break;
1a0011f0:	4603      	mov	r3, r0
1a0011f2:	bb00      	cbnz	r0, 1a001236 <follow_path+0x86>
			res = dir_find(dp);				/* Find an object with the segment name */
1a0011f4:	4620      	mov	r0, r4
1a0011f6:	f7ff ffb1 	bl	1a00115c <dir_find>
			ns = dp->fn[NSFLAG];
1a0011fa:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
1a0011fe:	4603      	mov	r3, r0
1a001200:	b128      	cbz	r0, 1a00120e <follow_path+0x5e>
				if (res == FR_NO_FILE) {	/* Object is not found */
1a001202:	2804      	cmp	r0, #4
1a001204:	d117      	bne.n	1a001236 <follow_path+0x86>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a001206:	f012 0f04 	tst.w	r2, #4
1a00120a:	d011      	beq.n	1a001230 <follow_path+0x80>
1a00120c:	e013      	b.n	1a001236 <follow_path+0x86>
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a00120e:	f012 0f04 	tst.w	r2, #4
1a001212:	d110      	bne.n	1a001236 <follow_path+0x86>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a001214:	79a3      	ldrb	r3, [r4, #6]
1a001216:	f013 0f10 	tst.w	r3, #16
1a00121a:	d00b      	beq.n	1a001234 <follow_path+0x84>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a00121c:	6921      	ldr	r1, [r4, #16]
1a00121e:	f3c1 0108 	ubfx	r1, r1, #0, #9
1a001222:	3130      	adds	r1, #48	; 0x30
1a001224:	4628      	mov	r0, r5
1a001226:	4429      	add	r1, r5
1a001228:	f7ff fa5c 	bl	1a0006e4 <ld_clust>
1a00122c:	60a0      	str	r0, [r4, #8]
			}
		}
1a00122e:	e7db      	b.n	1a0011e8 <follow_path+0x38>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a001230:	2305      	movs	r3, #5
1a001232:	e000      	b.n	1a001236 <follow_path+0x86>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
1a001234:	2305      	movs	r3, #5
			}
		}
	}

	return res;
}
1a001236:	4618      	mov	r0, r3
1a001238:	b003      	add	sp, #12
1a00123a:	bd30      	pop	{r4, r5, pc}

1a00123c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
1a00123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00123e:	4604      	mov	r4, r0
1a001240:	460f      	mov	r7, r1
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
1a001242:	6806      	ldr	r6, [r0, #0]


	res = dir_sdi(dp, 0);
1a001244:	2100      	movs	r1, #0
1a001246:	f7ff fdf9 	bl	1a000e3c <dir_sdi>
	if (res == FR_OK) {
1a00124a:	4602      	mov	r2, r0
1a00124c:	b9b8      	cbnz	r0, 1a00127e <dir_alloc+0x42>
1a00124e:	2500      	movs	r5, #0
		n = 0;
		do {
			res = move_window(fs, dp->sect);
1a001250:	4630      	mov	r0, r6
1a001252:	69a1      	ldr	r1, [r4, #24]
1a001254:	f7ff fb42 	bl	1a0008dc <move_window>
			if (res != FR_OK) break;
1a001258:	4602      	mov	r2, r0
1a00125a:	b980      	cbnz	r0, 1a00127e <dir_alloc+0x42>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1a00125c:	69e3      	ldr	r3, [r4, #28]
1a00125e:	781b      	ldrb	r3, [r3, #0]
1a001260:	2be5      	cmp	r3, #229	; 0xe5
1a001262:	d000      	beq.n	1a001266 <dir_alloc+0x2a>
1a001264:	b91b      	cbnz	r3, 1a00126e <dir_alloc+0x32>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a001266:	3501      	adds	r5, #1
1a001268:	42bd      	cmp	r5, r7
1a00126a:	d101      	bne.n	1a001270 <dir_alloc+0x34>
1a00126c:	e007      	b.n	1a00127e <dir_alloc+0x42>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
1a00126e:	2500      	movs	r5, #0
			}
			res = dir_next(dp, 1);
1a001270:	4620      	mov	r0, r4
1a001272:	2101      	movs	r1, #1
1a001274:	f7ff fede 	bl	1a001034 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a001278:	4602      	mov	r2, r0
1a00127a:	2800      	cmp	r0, #0
1a00127c:	d0e8      	beq.n	1a001250 <dir_alloc+0x14>
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a00127e:	2a04      	cmp	r2, #4
1a001280:	d100      	bne.n	1a001284 <dir_alloc+0x48>
1a001282:	2207      	movs	r2, #7
	return res;
}
1a001284:	4610      	mov	r0, r2
1a001286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001288 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
1a001288:	b570      	push	{r4, r5, r6, lr}
1a00128a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
1a00128c:	6806      	ldr	r6, [r0, #0]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
1a00128e:	2101      	movs	r1, #1
1a001290:	f7ff ffd4 	bl	1a00123c <dir_alloc>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
1a001294:	4605      	mov	r5, r0
1a001296:	b990      	cbnz	r0, 1a0012be <dir_register+0x36>
		res = move_window(fs, dp->sect);
1a001298:	4630      	mov	r0, r6
1a00129a:	69a1      	ldr	r1, [r4, #24]
1a00129c:	f7ff fb1e 	bl	1a0008dc <move_window>
		if (res == FR_OK) {
1a0012a0:	4605      	mov	r5, r0
1a0012a2:	b960      	cbnz	r0, 1a0012be <dir_register+0x36>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a0012a4:	69e0      	ldr	r0, [r4, #28]
1a0012a6:	2100      	movs	r1, #0
1a0012a8:	2220      	movs	r2, #32
1a0012aa:	f7ff f9f1 	bl	1a000690 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a0012ae:	69e0      	ldr	r0, [r4, #28]
1a0012b0:	f104 0120 	add.w	r1, r4, #32
1a0012b4:	220b      	movs	r2, #11
1a0012b6:	f7ff f9e1 	bl	1a00067c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
1a0012ba:	2301      	movs	r3, #1
1a0012bc:	70f3      	strb	r3, [r6, #3]
		}
	}

	return res;
}
1a0012be:	4628      	mov	r0, r5
1a0012c0:	bd70      	pop	{r4, r5, r6, pc}
1a0012c2:	bf00      	nop

1a0012c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
1a0012c4:	b570      	push	{r4, r5, r6, lr}
1a0012c6:	4604      	mov	r4, r0
	FRESULT res;


	res = sync_window(fs);
1a0012c8:	f7ff fade 	bl	1a000888 <sync_window>
	if (res == FR_OK) {
1a0012cc:	4605      	mov	r5, r0
1a0012ce:	2800      	cmp	r0, #0
1a0012d0:	d137      	bne.n	1a001342 <sync_fs+0x7e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
1a0012d2:	7823      	ldrb	r3, [r4, #0]
1a0012d4:	2b03      	cmp	r3, #3
1a0012d6:	d12d      	bne.n	1a001334 <sync_fs+0x70>
1a0012d8:	7923      	ldrb	r3, [r4, #4]
1a0012da:	2b01      	cmp	r3, #1
1a0012dc:	d12a      	bne.n	1a001334 <sync_fs+0x70>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
1a0012de:	f104 0630 	add.w	r6, r4, #48	; 0x30
1a0012e2:	4630      	mov	r0, r6
1a0012e4:	2100      	movs	r1, #0
1a0012e6:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0012ea:	f7ff f9d1 	bl	1a000690 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a0012ee:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a0012f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a0012f6:	f7ff f9b3 	bl	1a000660 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a0012fa:	4630      	mov	r0, r6
1a0012fc:	4912      	ldr	r1, [pc, #72]	; (1a001348 <sync_fs+0x84>)
1a0012fe:	f7ff f9b3 	bl	1a000668 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a001302:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a001306:	4911      	ldr	r1, [pc, #68]	; (1a00134c <sync_fs+0x88>)
1a001308:	f7ff f9ae 	bl	1a000668 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a00130c:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a001310:	6921      	ldr	r1, [r4, #16]
1a001312:	f7ff f9a9 	bl	1a000668 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a001316:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a00131a:	68e1      	ldr	r1, [r4, #12]
1a00131c:	f7ff f9a4 	bl	1a000668 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
1a001320:	69e2      	ldr	r2, [r4, #28]
1a001322:	3201      	adds	r2, #1
1a001324:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
1a001326:	7860      	ldrb	r0, [r4, #1]
1a001328:	4631      	mov	r1, r6
1a00132a:	2301      	movs	r3, #1
1a00132c:	f000 fc68 	bl	1a001c00 <disk_write>
			fs->fsi_flag = 0;
1a001330:	2300      	movs	r3, #0
1a001332:	7123      	strb	r3, [r4, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a001334:	7860      	ldrb	r0, [r4, #1]
1a001336:	2100      	movs	r1, #0
1a001338:	460a      	mov	r2, r1
1a00133a:	f000 fcb7 	bl	1a001cac <disk_ioctl>
1a00133e:	b100      	cbz	r0, 1a001342 <sync_fs+0x7e>
1a001340:	2501      	movs	r5, #1
	}

	return res;
}
1a001342:	4628      	mov	r0, r5
1a001344:	bd70      	pop	{r4, r5, r6, pc}
1a001346:	bf00      	nop
1a001348:	41615252 	.word	0x41615252
1a00134c:	61417272 	.word	0x61417272

1a001350 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a001350:	b510      	push	{r4, lr}
1a001352:	b084      	sub	sp, #16
1a001354:	9001      	str	r0, [sp, #4]
1a001356:	9100      	str	r1, [sp, #0]
1a001358:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a00135a:	a804      	add	r0, sp, #16
1a00135c:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
1a001360:	f7ff fa4c 	bl	1a0007fc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a001364:	2800      	cmp	r0, #0
1a001366:	db16      	blt.n	1a001396 <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a001368:	4b0e      	ldr	r3, [pc, #56]	; (1a0013a4 <f_mount+0x54>)
1a00136a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a00136e:	b10b      	cbz	r3, 1a001374 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a001370:	2200      	movs	r2, #0
1a001372:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a001374:	9b01      	ldr	r3, [sp, #4]
1a001376:	b10b      	cbz	r3, 1a00137c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a001378:	2200      	movs	r2, #0
1a00137a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a00137c:	9b01      	ldr	r3, [sp, #4]
1a00137e:	4a09      	ldr	r2, [pc, #36]	; (1a0013a4 <f_mount+0x54>)
1a001380:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a001384:	b14b      	cbz	r3, 1a00139a <f_mount+0x4a>
1a001386:	2c01      	cmp	r4, #1
1a001388:	d109      	bne.n	1a00139e <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a00138a:	4668      	mov	r0, sp
1a00138c:	a901      	add	r1, sp, #4
1a00138e:	2200      	movs	r2, #0
1a001390:	f7ff fafc 	bl	1a00098c <find_volume>
	LEAVE_FF(fs, res);
1a001394:	e004      	b.n	1a0013a0 <f_mount+0x50>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
1a001396:	200b      	movs	r0, #11
1a001398:	e002      	b.n	1a0013a0 <f_mount+0x50>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a00139a:	2000      	movs	r0, #0
1a00139c:	e000      	b.n	1a0013a0 <f_mount+0x50>
1a00139e:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a0013a0:	b004      	add	sp, #16
1a0013a2:	bd10      	pop	{r4, pc}
1a0013a4:	10000590 	.word	0x10000590

1a0013a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a0013a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0013ac:	b08f      	sub	sp, #60	; 0x3c
1a0013ae:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a0013b0:	2800      	cmp	r0, #0
1a0013b2:	f000 80e0 	beq.w	1a001576 <f_open+0x1ce>
1a0013b6:	4606      	mov	r6, r0
1a0013b8:	4615      	mov	r5, r2

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
1a0013ba:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a0013be:	a801      	add	r0, sp, #4
1a0013c0:	a902      	add	r1, sp, #8
1a0013c2:	463a      	mov	r2, r7
1a0013c4:	f7ff fae2 	bl	1a00098c <find_volume>
	if (res == FR_OK) {
1a0013c8:	4604      	mov	r4, r0
1a0013ca:	2800      	cmp	r0, #0
1a0013cc:	f040 80ce 	bne.w	1a00156c <f_open+0x1c4>
		dj.obj.fs = fs;
1a0013d0:	9b02      	ldr	r3, [sp, #8]
1a0013d2:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
1a0013d4:	a803      	add	r0, sp, #12
1a0013d6:	9901      	ldr	r1, [sp, #4]
1a0013d8:	f7ff feea 	bl	1a0011b0 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
1a0013dc:	4604      	mov	r4, r0
1a0013de:	b920      	cbnz	r0, 1a0013ea <f_open+0x42>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a0013e0:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
1a0013e4:	2b00      	cmp	r3, #0
1a0013e6:	da00      	bge.n	1a0013ea <f_open+0x42>
				res = FR_INVALID_NAME;
1a0013e8:	2406      	movs	r4, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a0013ea:	f015 0f1c 	tst.w	r5, #28
1a0013ee:	d053      	beq.n	1a001498 <f_open+0xf0>
			if (res != FR_OK) {					/* No file, create new */
1a0013f0:	b144      	cbz	r4, 1a001404 <f_open+0x5c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
1a0013f2:	2c04      	cmp	r4, #4
1a0013f4:	d103      	bne.n	1a0013fe <f_open+0x56>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
1a0013f6:	a803      	add	r0, sp, #12
1a0013f8:	f7ff ff46 	bl	1a001288 <dir_register>
1a0013fc:	4604      	mov	r4, r0
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a0013fe:	f047 0708 	orr.w	r7, r7, #8
1a001402:	e00b      	b.n	1a00141c <f_open+0x74>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a001404:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a001408:	f013 0f11 	tst.w	r3, #17
1a00140c:	d103      	bne.n	1a001416 <f_open+0x6e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a00140e:	f015 0f04 	tst.w	r5, #4
1a001412:	d102      	bne.n	1a00141a <f_open+0x72>
1a001414:	e002      	b.n	1a00141c <f_open+0x74>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
1a001416:	2407      	movs	r4, #7
1a001418:	e000      	b.n	1a00141c <f_open+0x74>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a00141a:	2408      	movs	r4, #8
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
1a00141c:	2c00      	cmp	r4, #0
1a00141e:	d14b      	bne.n	1a0014b8 <f_open+0x110>
1a001420:	f017 0f08 	tst.w	r7, #8
1a001424:	d048      	beq.n	1a0014b8 <f_open+0x110>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
1a001426:	4d56      	ldr	r5, [pc, #344]	; (1a001580 <f_open+0x1d8>)
1a001428:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00142a:	300e      	adds	r0, #14
1a00142c:	4629      	mov	r1, r5
1a00142e:	f7ff f91b 	bl	1a000668 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
1a001432:	980a      	ldr	r0, [sp, #40]	; 0x28
1a001434:	3016      	adds	r0, #22
1a001436:	4629      	mov	r1, r5
1a001438:	f7ff f916 	bl	1a000668 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a00143c:	2220      	movs	r2, #32
1a00143e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a001440:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
1a001442:	f8dd 8008 	ldr.w	r8, [sp, #8]
1a001446:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001448:	4640      	mov	r0, r8
1a00144a:	4629      	mov	r1, r5
1a00144c:	f7ff f94a 	bl	1a0006e4 <ld_clust>
1a001450:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a001452:	4640      	mov	r0, r8
1a001454:	4629      	mov	r1, r5
1a001456:	2200      	movs	r2, #0
1a001458:	f7ff f956 	bl	1a000708 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a00145c:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00145e:	301c      	adds	r0, #28
1a001460:	2100      	movs	r1, #0
1a001462:	f7ff f901 	bl	1a000668 <st_dword>
					fs->wflag = 1;
1a001466:	2201      	movs	r2, #1
1a001468:	9b02      	ldr	r3, [sp, #8]
1a00146a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
1a00146c:	f1b9 0f00 	cmp.w	r9, #0
1a001470:	d022      	beq.n	1a0014b8 <f_open+0x110>
						dw = fs->winsect;
1a001472:	9b02      	ldr	r3, [sp, #8]
1a001474:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
1a001476:	a803      	add	r0, sp, #12
1a001478:	4649      	mov	r1, r9
1a00147a:	2200      	movs	r2, #0
1a00147c:	f7ff fd9c 	bl	1a000fb8 <remove_chain>
						if (res == FR_OK) {
1a001480:	4604      	mov	r4, r0
1a001482:	b9c8      	cbnz	r0, 1a0014b8 <f_open+0x110>
							res = move_window(fs, dw);
1a001484:	9802      	ldr	r0, [sp, #8]
1a001486:	4629      	mov	r1, r5
1a001488:	f7ff fa28 	bl	1a0008dc <move_window>
1a00148c:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a00148e:	f109 33ff 	add.w	r3, r9, #4294967295
1a001492:	9a02      	ldr	r2, [sp, #8]
1a001494:	60d3      	str	r3, [r2, #12]
1a001496:	e00f      	b.n	1a0014b8 <f_open+0x110>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
1a001498:	b974      	cbnz	r4, 1a0014b8 <f_open+0x110>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
1a00149a:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a00149e:	f013 0f10 	tst.w	r3, #16
1a0014a2:	d106      	bne.n	1a0014b2 <f_open+0x10a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
1a0014a4:	f015 0f02 	tst.w	r5, #2
1a0014a8:	d006      	beq.n	1a0014b8 <f_open+0x110>
1a0014aa:	f013 0f01 	tst.w	r3, #1
1a0014ae:	d102      	bne.n	1a0014b6 <f_open+0x10e>
1a0014b0:	e002      	b.n	1a0014b8 <f_open+0x110>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
1a0014b2:	2404      	movs	r4, #4
1a0014b4:	e000      	b.n	1a0014b8 <f_open+0x110>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
1a0014b6:	2407      	movs	r4, #7
					}
				}
			}
		}
		if (res == FR_OK) {
1a0014b8:	b94c      	cbnz	r4, 1a0014ce <f_open+0x126>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
1a0014ba:	f017 0f08 	tst.w	r7, #8
1a0014be:	d001      	beq.n	1a0014c4 <f_open+0x11c>
				mode |= FA_MODIFIED;
1a0014c0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a0014c4:	9b02      	ldr	r3, [sp, #8]
1a0014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0014c8:	6233      	str	r3, [r6, #32]
			fp->dir_ptr = dj.dir;
1a0014ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0014cc:	6273      	str	r3, [r6, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
1a0014ce:	2c00      	cmp	r4, #0
1a0014d0:	d14c      	bne.n	1a00156c <f_open+0x1c4>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
1a0014d2:	9d02      	ldr	r5, [sp, #8]
1a0014d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
1a0014d8:	4628      	mov	r0, r5
1a0014da:	4641      	mov	r1, r8
1a0014dc:	f7ff f902 	bl	1a0006e4 <ld_clust>
1a0014e0:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a0014e2:	f108 001c 	add.w	r0, r8, #28
1a0014e6:	f7ff f8af 	bl	1a000648 <ld_dword>
1a0014ea:	60f0      	str	r0, [r6, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
1a0014ec:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
1a0014ee:	88eb      	ldrh	r3, [r5, #6]
1a0014f0:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
1a0014f2:	7437      	strb	r7, [r6, #16]
			fp->err = 0;			/* Clear error flag */
1a0014f4:	2100      	movs	r1, #0
1a0014f6:	7471      	strb	r1, [r6, #17]
			fp->sect = 0;			/* Invalidate current data sector */
1a0014f8:	61f1      	str	r1, [r6, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
1a0014fa:	6171      	str	r1, [r6, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
1a0014fc:	f106 0828 	add.w	r8, r6, #40	; 0x28
1a001500:	4640      	mov	r0, r8
1a001502:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001506:	f7ff f8c3 	bl	1a000690 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a00150a:	f017 0f20 	tst.w	r7, #32
1a00150e:	d02d      	beq.n	1a00156c <f_open+0x1c4>
1a001510:	68f5      	ldr	r5, [r6, #12]
1a001512:	b35d      	cbz	r5, 1a00156c <f_open+0x1c4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a001514:	6175      	str	r5, [r6, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a001516:	9b02      	ldr	r3, [sp, #8]
1a001518:	895f      	ldrh	r7, [r3, #10]
1a00151a:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a00151c:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a00151e:	e00b      	b.n	1a001538 <f_open+0x190>
					clst = get_fat(&fp->obj, clst);
1a001520:	4630      	mov	r0, r6
1a001522:	f7ff fc23 	bl	1a000d6c <get_fat>
1a001526:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a001528:	2801      	cmp	r0, #1
1a00152a:	d800      	bhi.n	1a00152e <f_open+0x186>
1a00152c:	2402      	movs	r4, #2
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a00152e:	f1b1 3fff 	cmp.w	r1, #4294967295
1a001532:	d100      	bne.n	1a001536 <f_open+0x18e>
1a001534:	2401      	movs	r4, #1
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a001536:	1bed      	subs	r5, r5, r7
1a001538:	b90c      	cbnz	r4, 1a00153e <f_open+0x196>
1a00153a:	42bd      	cmp	r5, r7
1a00153c:	d8f0      	bhi.n	1a001520 <f_open+0x178>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
1a00153e:	61b1      	str	r1, [r6, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a001540:	b9a4      	cbnz	r4, 1a00156c <f_open+0x1c4>
1a001542:	f3c5 0308 	ubfx	r3, r5, #0, #9
1a001546:	b18b      	cbz	r3, 1a00156c <f_open+0x1c4>
					if ((sc = clust2sect(fs, clst)) == 0) {
1a001548:	9f02      	ldr	r7, [sp, #8]
1a00154a:	4638      	mov	r0, r7
1a00154c:	f7ff f8be 	bl	1a0006cc <clust2sect>
1a001550:	b148      	cbz	r0, 1a001566 <f_open+0x1be>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a001552:	eb00 2255 	add.w	r2, r0, r5, lsr #9
1a001556:	61f2      	str	r2, [r6, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a001558:	7878      	ldrb	r0, [r7, #1]
1a00155a:	4641      	mov	r1, r8
1a00155c:	2301      	movs	r3, #1
1a00155e:	f000 fb0b 	bl	1a001b78 <disk_read>
1a001562:	b910      	cbnz	r0, 1a00156a <f_open+0x1c2>
1a001564:	e002      	b.n	1a00156c <f_open+0x1c4>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
1a001566:	2402      	movs	r4, #2
1a001568:	e000      	b.n	1a00156c <f_open+0x1c4>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a00156a:	2401      	movs	r4, #1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a00156c:	b10c      	cbz	r4, 1a001572 <f_open+0x1ca>
1a00156e:	2300      	movs	r3, #0
1a001570:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
1a001572:	4620      	mov	r0, r4
1a001574:	e000      	b.n	1a001578 <f_open+0x1d0>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a001576:	2009      	movs	r0, #9
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
1a001578:	b00f      	add	sp, #60	; 0x3c
1a00157a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00157e:	bf00      	nop
1a001580:	48210000 	.word	0x48210000

1a001584 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a001584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001588:	b083      	sub	sp, #12
1a00158a:	4604      	mov	r4, r0
1a00158c:	4688      	mov	r8, r1
1a00158e:	4616      	mov	r6, r2
1a001590:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a001592:	2300      	movs	r3, #0
1a001594:	603b      	str	r3, [r7, #0]
	res = validate(fp, &fs);
1a001596:	a901      	add	r1, sp, #4
1a001598:	f7ff f95c 	bl	1a000854 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a00159c:	4603      	mov	r3, r0
1a00159e:	b908      	cbnz	r0, 1a0015a4 <f_write+0x20>
1a0015a0:	7c63      	ldrb	r3, [r4, #17]
1a0015a2:	b10b      	cbz	r3, 1a0015a8 <f_write+0x24>
1a0015a4:	4618      	mov	r0, r3
1a0015a6:	e0be      	b.n	1a001726 <f_write+0x1a2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a0015a8:	7c23      	ldrb	r3, [r4, #16]
1a0015aa:	f013 0f02 	tst.w	r3, #2
1a0015ae:	f000 80b9 	beq.w	1a001724 <f_write+0x1a0>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
1a0015b2:	6963      	ldr	r3, [r4, #20]
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
1a0015b4:	42f3      	cmn	r3, r6
1a0015b6:	f0c0 80ac 	bcc.w	1a001712 <f_write+0x18e>
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a0015ba:	43de      	mvns	r6, r3
1a0015bc:	e0a9      	b.n	1a001712 <f_write+0x18e>
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a0015be:	6963      	ldr	r3, [r4, #20]
1a0015c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
1a0015c4:	2a00      	cmp	r2, #0
1a0015c6:	f040 8085 	bne.w	1a0016d4 <f_write+0x150>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a0015ca:	9a01      	ldr	r2, [sp, #4]
1a0015cc:	8952      	ldrh	r2, [r2, #10]
1a0015ce:	3a01      	subs	r2, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a0015d0:	ea12 2953 	ands.w	r9, r2, r3, lsr #9
1a0015d4:	d11f      	bne.n	1a001616 <f_write+0x92>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a0015d6:	b933      	cbnz	r3, 1a0015e6 <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a0015d8:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a0015da:	b940      	cbnz	r0, 1a0015ee <f_write+0x6a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a0015dc:	4620      	mov	r0, r4
1a0015de:	2100      	movs	r1, #0
1a0015e0:	f7ff fc84 	bl	1a000eec <create_chain>
1a0015e4:	e003      	b.n	1a0015ee <f_write+0x6a>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a0015e6:	4620      	mov	r0, r4
1a0015e8:	69a1      	ldr	r1, [r4, #24]
1a0015ea:	f7ff fc7f 	bl	1a000eec <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a0015ee:	2800      	cmp	r0, #0
1a0015f0:	f000 8092 	beq.w	1a001718 <f_write+0x194>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a0015f4:	2801      	cmp	r0, #1
1a0015f6:	d103      	bne.n	1a001600 <f_write+0x7c>
1a0015f8:	2302      	movs	r3, #2
1a0015fa:	7463      	strb	r3, [r4, #17]
1a0015fc:	4618      	mov	r0, r3
1a0015fe:	e092      	b.n	1a001726 <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a001600:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001604:	d103      	bne.n	1a00160e <f_write+0x8a>
1a001606:	2301      	movs	r3, #1
1a001608:	7463      	strb	r3, [r4, #17]
1a00160a:	4618      	mov	r0, r3
1a00160c:	e08b      	b.n	1a001726 <f_write+0x1a2>
				fp->clust = clst;			/* Update current cluster */
1a00160e:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a001610:	68a3      	ldr	r3, [r4, #8]
1a001612:	b903      	cbnz	r3, 1a001616 <f_write+0x92>
1a001614:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a001616:	f994 3010 	ldrsb.w	r3, [r4, #16]
1a00161a:	2b00      	cmp	r3, #0
1a00161c:	da10      	bge.n	1a001640 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a00161e:	9b01      	ldr	r3, [sp, #4]
1a001620:	7858      	ldrb	r0, [r3, #1]
1a001622:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a001626:	69e2      	ldr	r2, [r4, #28]
1a001628:	2301      	movs	r3, #1
1a00162a:	f000 fae9 	bl	1a001c00 <disk_write>
1a00162e:	b118      	cbz	r0, 1a001638 <f_write+0xb4>
1a001630:	2301      	movs	r3, #1
1a001632:	7463      	strb	r3, [r4, #17]
1a001634:	4618      	mov	r0, r3
1a001636:	e076      	b.n	1a001726 <f_write+0x1a2>
				fp->flag &= ~FA_DIRTY;
1a001638:	7c23      	ldrb	r3, [r4, #16]
1a00163a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a00163e:	7423      	strb	r3, [r4, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
1a001640:	f8dd a004 	ldr.w	sl, [sp, #4]
1a001644:	4650      	mov	r0, sl
1a001646:	69a1      	ldr	r1, [r4, #24]
1a001648:	f7ff f840 	bl	1a0006cc <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
1a00164c:	4605      	mov	r5, r0
1a00164e:	b910      	cbnz	r0, 1a001656 <f_write+0xd2>
1a001650:	2002      	movs	r0, #2
1a001652:	7460      	strb	r0, [r4, #17]
1a001654:	e067      	b.n	1a001726 <f_write+0x1a2>
			sect += csect;
1a001656:	444d      	add	r5, r9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
1a001658:	ea5f 2b56 	movs.w	fp, r6, lsr #9
1a00165c:	d025      	beq.n	1a0016aa <f_write+0x126>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a00165e:	eb09 030b 	add.w	r3, r9, fp
1a001662:	f8ba 200a 	ldrh.w	r2, [sl, #10]
1a001666:	4293      	cmp	r3, r2
1a001668:	d901      	bls.n	1a00166e <f_write+0xea>
					cc = fs->csize - csect;
1a00166a:	ebc9 0b02 	rsb	fp, r9, r2
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
1a00166e:	f89a 0001 	ldrb.w	r0, [sl, #1]
1a001672:	4641      	mov	r1, r8
1a001674:	462a      	mov	r2, r5
1a001676:	465b      	mov	r3, fp
1a001678:	f000 fac2 	bl	1a001c00 <disk_write>
1a00167c:	b110      	cbz	r0, 1a001684 <f_write+0x100>
					ABORT(fs, FR_DISK_ERR);
1a00167e:	2001      	movs	r0, #1
1a001680:	7460      	strb	r0, [r4, #17]
1a001682:	e050      	b.n	1a001726 <f_write+0x1a2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a001684:	69e1      	ldr	r1, [r4, #28]
1a001686:	1b49      	subs	r1, r1, r5
1a001688:	4559      	cmp	r1, fp
1a00168a:	d20b      	bcs.n	1a0016a4 <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a00168c:	f104 0028 	add.w	r0, r4, #40	; 0x28
1a001690:	eb08 2141 	add.w	r1, r8, r1, lsl #9
1a001694:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001698:	f7fe fff0 	bl	1a00067c <mem_cpy>
					fp->flag &= ~FA_DIRTY;
1a00169c:	7c23      	ldrb	r3, [r4, #16]
1a00169e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0016a2:	7423      	strb	r3, [r4, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a0016a4:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
1a0016a8:	e026      	b.n	1a0016f8 <f_write+0x174>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
1a0016aa:	69e3      	ldr	r3, [r4, #28]
1a0016ac:	42ab      	cmp	r3, r5
1a0016ae:	d010      	beq.n	1a0016d2 <f_write+0x14e>
				if (fp->fptr < fp->obj.objsize &&
1a0016b0:	6962      	ldr	r2, [r4, #20]
1a0016b2:	68e3      	ldr	r3, [r4, #12]
1a0016b4:	429a      	cmp	r2, r3
1a0016b6:	d20c      	bcs.n	1a0016d2 <f_write+0x14e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
1a0016b8:	f89a 0001 	ldrb.w	r0, [sl, #1]
1a0016bc:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a0016c0:	462a      	mov	r2, r5
1a0016c2:	2301      	movs	r3, #1
1a0016c4:	f000 fa58 	bl	1a001b78 <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->obj.objsize &&
1a0016c8:	b118      	cbz	r0, 1a0016d2 <f_write+0x14e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
1a0016ca:	2301      	movs	r3, #1
1a0016cc:	7463      	strb	r3, [r4, #17]
1a0016ce:	4618      	mov	r0, r3
1a0016d0:	e029      	b.n	1a001726 <f_write+0x1a2>
				}
			}
#endif
			fp->sect = sect;
1a0016d2:	61e5      	str	r5, [r4, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a0016d4:	6960      	ldr	r0, [r4, #20]
1a0016d6:	f3c0 0008 	ubfx	r0, r0, #0, #9
1a0016da:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a0016de:	42b5      	cmp	r5, r6
1a0016e0:	d900      	bls.n	1a0016e4 <f_write+0x160>
1a0016e2:	4635      	mov	r5, r6
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a0016e4:	3028      	adds	r0, #40	; 0x28
1a0016e6:	4420      	add	r0, r4
1a0016e8:	4641      	mov	r1, r8
1a0016ea:	462a      	mov	r2, r5
1a0016ec:	f7fe ffc6 	bl	1a00067c <mem_cpy>
		fp->flag |= FA_DIRTY;
1a0016f0:	7c23      	ldrb	r3, [r4, #16]
1a0016f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a0016f6:	7423      	strb	r3, [r4, #16]
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
1a0016f8:	44a8      	add	r8, r5
1a0016fa:	6963      	ldr	r3, [r4, #20]
1a0016fc:	442b      	add	r3, r5
1a0016fe:	6163      	str	r3, [r4, #20]
1a001700:	68e2      	ldr	r2, [r4, #12]
1a001702:	4293      	cmp	r3, r2
1a001704:	bf38      	it	cc
1a001706:	4613      	movcc	r3, r2
1a001708:	60e3      	str	r3, [r4, #12]
1a00170a:	683b      	ldr	r3, [r7, #0]
1a00170c:	442b      	add	r3, r5
1a00170e:	603b      	str	r3, [r7, #0]
1a001710:	1b76      	subs	r6, r6, r5
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
1a001712:	2e00      	cmp	r6, #0
1a001714:	f47f af53 	bne.w	1a0015be <f_write+0x3a>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */
1a001718:	7c23      	ldrb	r3, [r4, #16]
1a00171a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00171e:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
1a001720:	2000      	movs	r0, #0
1a001722:	e000      	b.n	1a001726 <f_write+0x1a2>


	*bw = 0;	/* Clear write byte counter */
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a001724:	2007      	movs	r0, #7
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a001726:	b003      	add	sp, #12
1a001728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a00172c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a00172c:	b530      	push	{r4, r5, lr}
1a00172e:	b083      	sub	sp, #12
1a001730:	4604      	mov	r4, r0
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(fp, &fs);	/* Check validity of the object */
1a001732:	a901      	add	r1, sp, #4
1a001734:	f7ff f88e 	bl	1a000854 <validate>
	if (res == FR_OK) {
1a001738:	4603      	mov	r3, r0
1a00173a:	2800      	cmp	r0, #0
1a00173c:	d13d      	bne.n	1a0017ba <f_sync+0x8e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a00173e:	7c22      	ldrb	r2, [r4, #16]
1a001740:	f012 0f40 	tst.w	r2, #64	; 0x40
1a001744:	d039      	beq.n	1a0017ba <f_sync+0x8e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a001746:	f012 0f80 	tst.w	r2, #128	; 0x80
1a00174a:	d00c      	beq.n	1a001766 <f_sync+0x3a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a00174c:	9b01      	ldr	r3, [sp, #4]
1a00174e:	7858      	ldrb	r0, [r3, #1]
1a001750:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a001754:	69e2      	ldr	r2, [r4, #28]
1a001756:	2301      	movs	r3, #1
1a001758:	f000 fa52 	bl	1a001c00 <disk_write>
1a00175c:	bb78      	cbnz	r0, 1a0017be <f_sync+0x92>
				fp->flag &= ~FA_DIRTY;
1a00175e:	7c23      	ldrb	r3, [r4, #16]
1a001760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a001764:	7423      	strb	r3, [r4, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a001766:	9801      	ldr	r0, [sp, #4]
1a001768:	6a21      	ldr	r1, [r4, #32]
1a00176a:	f7ff f8b7 	bl	1a0008dc <move_window>
				if (res == FR_OK) {
1a00176e:	4603      	mov	r3, r0
1a001770:	bb18      	cbnz	r0, 1a0017ba <f_sync+0x8e>
					dir = fp->dir_ptr;
1a001772:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
1a001774:	7aeb      	ldrb	r3, [r5, #11]
1a001776:	f043 0320 	orr.w	r3, r3, #32
1a00177a:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
1a00177c:	6820      	ldr	r0, [r4, #0]
1a00177e:	4629      	mov	r1, r5
1a001780:	68a2      	ldr	r2, [r4, #8]
1a001782:	f7fe ffc1 	bl	1a000708 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a001786:	f105 001c 	add.w	r0, r5, #28
1a00178a:	68e1      	ldr	r1, [r4, #12]
1a00178c:	f7fe ff6c 	bl	1a000668 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a001790:	f105 0016 	add.w	r0, r5, #22
1a001794:	490b      	ldr	r1, [pc, #44]	; (1a0017c4 <f_sync+0x98>)
1a001796:	f7fe ff67 	bl	1a000668 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a00179a:	f105 0012 	add.w	r0, r5, #18
1a00179e:	2100      	movs	r1, #0
1a0017a0:	f7fe ff5e 	bl	1a000660 <st_word>
					fs->wflag = 1;
1a0017a4:	2201      	movs	r2, #1
1a0017a6:	9b01      	ldr	r3, [sp, #4]
1a0017a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a0017aa:	9801      	ldr	r0, [sp, #4]
1a0017ac:	f7ff fd8a 	bl	1a0012c4 <sync_fs>
1a0017b0:	4603      	mov	r3, r0
					fp->flag &= ~FA_MODIFIED;
1a0017b2:	7c22      	ldrb	r2, [r4, #16]
1a0017b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a0017b8:	7422      	strb	r2, [r4, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
1a0017ba:	4618      	mov	r0, r3
1a0017bc:	e000      	b.n	1a0017c0 <f_sync+0x94>
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a0017be:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a0017c0:	b003      	add	sp, #12
1a0017c2:	bd30      	pop	{r4, r5, pc}
1a0017c4:	48210000 	.word	0x48210000

1a0017c8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a0017c8:	b510      	push	{r4, lr}
1a0017ca:	b082      	sub	sp, #8
1a0017cc:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a0017ce:	f7ff ffad 	bl	1a00172c <f_sync>
	if (res == FR_OK)
1a0017d2:	4603      	mov	r3, r0
1a0017d4:	b938      	cbnz	r0, 1a0017e6 <f_close+0x1e>
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
1a0017d6:	4620      	mov	r0, r4
1a0017d8:	a901      	add	r1, sp, #4
1a0017da:	f7ff f83b 	bl	1a000854 <validate>
		if (res == FR_OK) {
1a0017de:	4603      	mov	r3, r0
1a0017e0:	b908      	cbnz	r0, 1a0017e6 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
1a0017e2:	2200      	movs	r2, #0
1a0017e4:	6022      	str	r2, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a0017e6:	4618      	mov	r0, r3
1a0017e8:	b002      	add	sp, #8
1a0017ea:	bd10      	pop	{r4, pc}

1a0017ec <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a0017ec:	2001      	movs	r0, #1
1a0017ee:	4770      	bx	lr

1a0017f0 <SSPSend>:

static
BYTE CardType;			/* Card type flags */

static void SSPSend(uint8_t *buf, uint32_t Length)
{
1a0017f0:	b500      	push	{lr}
1a0017f2:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = buf;
1a0017f4:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a0017f6:	2300      	movs	r3, #0
1a0017f8:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a0017fa:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a0017fc:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a0017fe:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a001800:	4803      	ldr	r0, [pc, #12]	; (1a001810 <SSPSend+0x20>)
1a001802:	a901      	add	r1, sp, #4
1a001804:	f002 f836 	bl	1a003874 <Chip_SSP_RWFrames_Blocking>
}
1a001808:	b007      	add	sp, #28
1a00180a:	f85d fb04 	ldr.w	pc, [sp], #4
1a00180e:	bf00      	nop
1a001810:	400c5000 	.word	0x400c5000

1a001814 <xmit_spi>:
/* Transmit a byte to MMC via SPI  (Platform dependent)                  */
/*-----------------------------------------------------------------------*/

//#define xmit_spi(dat) (SSPSend((uint8_t*)&(dat), 1))
static void xmit_spi(BYTE dat)
{
1a001814:	b500      	push	{lr}
1a001816:	b083      	sub	sp, #12
1a001818:	ab02      	add	r3, sp, #8
1a00181a:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a00181e:	4618      	mov	r0, r3
1a001820:	2101      	movs	r1, #1
1a001822:	f7ff ffe5 	bl	1a0017f0 <SSPSend>
}
1a001826:	b003      	add	sp, #12
1a001828:	f85d fb04 	ldr.w	pc, [sp], #4

1a00182c <SSPReceive>:

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
}

void SSPReceive( uint8_t *buf, uint32_t Length )
{
1a00182c:	b500      	push	{lr}
1a00182e:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = NULL;
1a001830:	2300      	movs	r3, #0
1a001832:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a001834:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a001836:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a001838:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a00183a:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a00183c:	4803      	ldr	r0, [pc, #12]	; (1a00184c <SSPReceive+0x20>)
1a00183e:	a901      	add	r1, sp, #4
1a001840:	f002 f818 	bl	1a003874 <Chip_SSP_RWFrames_Blocking>
}
1a001844:	b007      	add	sp, #28
1a001846:	f85d fb04 	ldr.w	pc, [sp], #4
1a00184a:	bf00      	nop
1a00184c:	400c5000 	.word	0x400c5000

1a001850 <rcvr_spi>:
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
1a001850:	b500      	push	{lr}
1a001852:	b083      	sub	sp, #12
    BYTE data = 0;
1a001854:	a802      	add	r0, sp, #8
1a001856:	2300      	movs	r3, #0
1a001858:	f800 3d01 	strb.w	r3, [r0, #-1]!

    SSPReceive(&data, 1);
1a00185c:	2101      	movs	r1, #1
1a00185e:	f7ff ffe5 	bl	1a00182c <SSPReceive>

    return data;
}
1a001862:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a001866:	b003      	add	sp, #12
1a001868:	f85d fb04 	ldr.w	pc, [sp], #4

1a00186c <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
1a00186c:	b508      	push	{r3, lr}
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a00186e:	2232      	movs	r2, #50	; 0x32
1a001870:	4b06      	ldr	r3, [pc, #24]	; (1a00188c <wait_ready+0x20>)
1a001872:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a001874:	f7ff ffec 	bl	1a001850 <rcvr_spi>
	do
		res = rcvr_spi();
1a001878:	f7ff ffea 	bl	1a001850 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a00187c:	28ff      	cmp	r0, #255	; 0xff
1a00187e:	d004      	beq.n	1a00188a <wait_ready+0x1e>
1a001880:	4b02      	ldr	r3, [pc, #8]	; (1a00188c <wait_ready+0x20>)
1a001882:	781b      	ldrb	r3, [r3, #0]
1a001884:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001888:	d1f6      	bne.n	1a001878 <wait_ready+0xc>

	return res;
}
1a00188a:	bd08      	pop	{r3, pc}
1a00188c:	10000596 	.word	0x10000596

1a001890 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
1a001890:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a001892:	2101      	movs	r1, #1
1a001894:	f242 230c 	movw	r3, #8716	; 0x220c
1a001898:	4a02      	ldr	r2, [pc, #8]	; (1a0018a4 <deselect+0x14>)
1a00189a:	50d1      	str	r1, [r2, r3]
	CS_HIGH();
	rcvr_spi();
1a00189c:	f7ff ffd8 	bl	1a001850 <rcvr_spi>
1a0018a0:	bd08      	pop	{r3, pc}
1a0018a2:	bf00      	nop
1a0018a4:	400f4000 	.word	0x400f4000

1a0018a8 <select_>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select_ (void)	/* TRUE:Successful, FALSE:Timeout */
{
1a0018a8:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a0018aa:	2101      	movs	r1, #1
1a0018ac:	f242 238c 	movw	r3, #8844	; 0x228c
1a0018b0:	4a05      	ldr	r2, [pc, #20]	; (1a0018c8 <select_+0x20>)
1a0018b2:	50d1      	str	r1, [r2, r3]
	CS_LOW();
	if (wait_ready() != 0xFF) {
1a0018b4:	f7ff ffda 	bl	1a00186c <wait_ready>
1a0018b8:	28ff      	cmp	r0, #255	; 0xff
1a0018ba:	d003      	beq.n	1a0018c4 <select_+0x1c>
		deselect();
1a0018bc:	f7ff ffe8 	bl	1a001890 <deselect>
		return FALSE;
1a0018c0:	2000      	movs	r0, #0
1a0018c2:	bd08      	pop	{r3, pc}
	}
	return TRUE;
1a0018c4:	2001      	movs	r0, #1
}
1a0018c6:	bd08      	pop	{r3, pc}
1a0018c8:	400f4000 	.word	0x400f4000

1a0018cc <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a0018cc:	b538      	push	{r3, r4, r5, lr}
1a0018ce:	4604      	mov	r4, r0
1a0018d0:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a0018d2:	f010 0f80 	tst.w	r0, #128	; 0x80
1a0018d6:	d007      	beq.n	1a0018e8 <send_cmd+0x1c>
		cmd &= 0x7F;
1a0018d8:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a0018dc:	2077      	movs	r0, #119	; 0x77
1a0018de:	2100      	movs	r1, #0
1a0018e0:	f7ff fff4 	bl	1a0018cc <send_cmd>
		if (res > 1) return res;
1a0018e4:	2801      	cmp	r0, #1
1a0018e6:	d82f      	bhi.n	1a001948 <send_cmd+0x7c>
	}

	/* Select the card and wait for ready */
	deselect();
1a0018e8:	f7ff ffd2 	bl	1a001890 <deselect>
	if (!select_()) return 0xFF;
1a0018ec:	f7ff ffdc 	bl	1a0018a8 <select_>
1a0018f0:	b348      	cbz	r0, 1a001946 <send_cmd+0x7a>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a0018f2:	4620      	mov	r0, r4
1a0018f4:	f7ff ff8e 	bl	1a001814 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a0018f8:	0e28      	lsrs	r0, r5, #24
1a0018fa:	f7ff ff8b 	bl	1a001814 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a0018fe:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a001902:	f7ff ff87 	bl	1a001814 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a001906:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a00190a:	f7ff ff83 	bl	1a001814 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a00190e:	b2e8      	uxtb	r0, r5
1a001910:	f7ff ff80 	bl	1a001814 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
1a001914:	2c40      	cmp	r4, #64	; 0x40
1a001916:	d001      	beq.n	1a00191c <send_cmd+0x50>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
1a001918:	2001      	movs	r0, #1
1a00191a:	e000      	b.n	1a00191e <send_cmd+0x52>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
1a00191c:	2095      	movs	r0, #149	; 0x95
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a00191e:	2c48      	cmp	r4, #72	; 0x48
1a001920:	d100      	bne.n	1a001924 <send_cmd+0x58>
1a001922:	2087      	movs	r0, #135	; 0x87
	xmit_spi(n);
1a001924:	f7ff ff76 	bl	1a001814 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
1a001928:	2c4c      	cmp	r4, #76	; 0x4c
1a00192a:	d101      	bne.n	1a001930 <send_cmd+0x64>
1a00192c:	f7ff ff90 	bl	1a001850 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a001930:	240a      	movs	r4, #10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
1a001932:	f7ff ff8d 	bl	1a001850 <rcvr_spi>
	while ((res & 0x80) && --n);
1a001936:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00193a:	d005      	beq.n	1a001948 <send_cmd+0x7c>
1a00193c:	1e63      	subs	r3, r4, #1
1a00193e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a001942:	d1f6      	bne.n	1a001932 <send_cmd+0x66>

	return res;			/* Return with the response value */
1a001944:	bd38      	pop	{r3, r4, r5, pc}
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select_()) return 0xFF;
1a001946:	20ff      	movs	r0, #255	; 0xff
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
1a001948:	bd38      	pop	{r3, r4, r5, pc}
1a00194a:	bf00      	nop

1a00194c <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
1a00194c:	b570      	push	{r4, r5, r6, lr}
1a00194e:	4606      	mov	r6, r0
1a001950:	460c      	mov	r4, r1
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a001952:	f7ff ff8b 	bl	1a00186c <wait_ready>
1a001956:	28ff      	cmp	r0, #255	; 0xff
1a001958:	d120      	bne.n	1a00199c <xmit_datablock+0x50>

	xmit_spi(token);					/* Xmit data token */
1a00195a:	4620      	mov	r0, r4
1a00195c:	f7ff ff5a 	bl	1a001814 <xmit_spi>
	if (token != 0xFD) {	/* Is data token */
1a001960:	2cfd      	cmp	r4, #253	; 0xfd
1a001962:	d01d      	beq.n	1a0019a0 <xmit_datablock+0x54>
1a001964:	2400      	movs	r4, #0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
1a001966:	4635      	mov	r5, r6
1a001968:	f815 0b02 	ldrb.w	r0, [r5], #2
1a00196c:	f7ff ff52 	bl	1a001814 <xmit_spi>
			xmit_spi(*buff++);
1a001970:	7870      	ldrb	r0, [r6, #1]
1a001972:	f7ff ff4f 	bl	1a001814 <xmit_spi>
		} while (--wc);
1a001976:	1e63      	subs	r3, r4, #1
	xmit_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
1a001978:	462e      	mov	r6, r5
		} while (--wc);
1a00197a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a00197e:	d1f2      	bne.n	1a001966 <xmit_datablock+0x1a>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a001980:	20ff      	movs	r0, #255	; 0xff
1a001982:	f7ff ff47 	bl	1a001814 <xmit_spi>
		xmit_spi(0xFF);
1a001986:	20ff      	movs	r0, #255	; 0xff
1a001988:	f7ff ff44 	bl	1a001814 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a00198c:	f7ff ff60 	bl	1a001850 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a001990:	f000 001f 	and.w	r0, r0, #31
1a001994:	2805      	cmp	r0, #5
1a001996:	d005      	beq.n	1a0019a4 <xmit_datablock+0x58>
			return FALSE;
1a001998:	2000      	movs	r0, #0
1a00199a:	bd70      	pop	{r4, r5, r6, pc}
)
{
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a00199c:	2000      	movs	r0, #0
1a00199e:	bd70      	pop	{r4, r5, r6, pc}
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
1a0019a0:	2001      	movs	r0, #1
1a0019a2:	bd70      	pop	{r4, r5, r6, pc}
1a0019a4:	2001      	movs	r0, #1
}
1a0019a6:	bd70      	pop	{r4, r5, r6, pc}

1a0019a8 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
1a0019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0019aa:	4604      	mov	r4, r0
1a0019ac:	460e      	mov	r6, r1
	BYTE token;


	Timer1 = 20;
1a0019ae:	2214      	movs	r2, #20
1a0019b0:	4b15      	ldr	r3, [pc, #84]	; (1a001a08 <rcvr_datablock+0x60>)
1a0019b2:	701a      	strb	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
1a0019b4:	f7ff ff4c 	bl	1a001850 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
1a0019b8:	28ff      	cmp	r0, #255	; 0xff
1a0019ba:	d104      	bne.n	1a0019c6 <rcvr_datablock+0x1e>
1a0019bc:	4b12      	ldr	r3, [pc, #72]	; (1a001a08 <rcvr_datablock+0x60>)
1a0019be:	781b      	ldrb	r3, [r3, #0]
1a0019c0:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0019c4:	d1f6      	bne.n	1a0019b4 <rcvr_datablock+0xc>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a0019c6:	28fe      	cmp	r0, #254	; 0xfe
1a0019c8:	d11b      	bne.n	1a001a02 <rcvr_datablock+0x5a>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
1a0019ca:	1c65      	adds	r5, r4, #1
1a0019cc:	4620      	mov	r0, r4
1a0019ce:	2101      	movs	r1, #1
1a0019d0:	f7ff ff2c 	bl	1a00182c <SSPReceive>
		rcvr_spi_m(buff++);
1a0019d4:	1ca7      	adds	r7, r4, #2
1a0019d6:	4628      	mov	r0, r5
1a0019d8:	2101      	movs	r1, #1
1a0019da:	f7ff ff27 	bl	1a00182c <SSPReceive>
		rcvr_spi_m(buff++);
1a0019de:	1ce5      	adds	r5, r4, #3
1a0019e0:	4638      	mov	r0, r7
1a0019e2:	2101      	movs	r1, #1
1a0019e4:	f7ff ff22 	bl	1a00182c <SSPReceive>
		rcvr_spi_m(buff++);
1a0019e8:	4628      	mov	r0, r5
1a0019ea:	3404      	adds	r4, #4
1a0019ec:	2101      	movs	r1, #1
1a0019ee:	f7ff ff1d 	bl	1a00182c <SSPReceive>
	} while (btr -= 4);
1a0019f2:	3e04      	subs	r6, #4
1a0019f4:	d1e9      	bne.n	1a0019ca <rcvr_datablock+0x22>
	rcvr_spi();						/* Discard CRC */
1a0019f6:	f7ff ff2b 	bl	1a001850 <rcvr_spi>
	rcvr_spi();
1a0019fa:	f7ff ff29 	bl	1a001850 <rcvr_spi>

	return TRUE;					/* Return with success */
1a0019fe:	2001      	movs	r0, #1
1a001a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a001a02:	2000      	movs	r0, #0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
}
1a001a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001a06:	bf00      	nop
1a001a08:	10000595 	.word	0x10000595

1a001a0c <disk_initialize>:
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a001a0c:	2800      	cmp	r0, #0
1a001a0e:	f040 809e 	bne.w	1a001b4e <disk_initialize+0x142>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
1a001a12:	4b51      	ldr	r3, [pc, #324]	; (1a001b58 <disk_initialize+0x14c>)
1a001a14:	781b      	ldrb	r3, [r3, #0]
1a001a16:	f013 0f02 	tst.w	r3, #2
1a001a1a:	d008      	beq.n	1a001a2e <disk_initialize+0x22>
1a001a1c:	4b4e      	ldr	r3, [pc, #312]	; (1a001b58 <disk_initialize+0x14c>)
1a001a1e:	7818      	ldrb	r0, [r3, #0]
1a001a20:	b2c0      	uxtb	r0, r0
1a001a22:	4770      	bx	lr

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a001a24:	f7ff ff14 	bl	1a001850 <rcvr_spi>
1a001a28:	3c01      	subs	r4, #1
1a001a2a:	b2e4      	uxtb	r4, r4
1a001a2c:	e002      	b.n	1a001a34 <disk_initialize+0x28>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
1a001a2e:	b530      	push	{r4, r5, lr}
1a001a30:	b083      	sub	sp, #12
1a001a32:	240a      	movs	r4, #10
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a001a34:	2c00      	cmp	r4, #0
1a001a36:	d1f5      	bne.n	1a001a24 <disk_initialize+0x18>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
1a001a38:	2040      	movs	r0, #64	; 0x40
1a001a3a:	2100      	movs	r1, #0
1a001a3c:	f7ff ff46 	bl	1a0018cc <send_cmd>
1a001a40:	2801      	cmp	r0, #1
1a001a42:	d16b      	bne.n	1a001b1c <disk_initialize+0x110>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
1a001a44:	2264      	movs	r2, #100	; 0x64
1a001a46:	4b45      	ldr	r3, [pc, #276]	; (1a001b5c <disk_initialize+0x150>)
1a001a48:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
1a001a4a:	2048      	movs	r0, #72	; 0x48
1a001a4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a001a50:	f7ff ff3c 	bl	1a0018cc <send_cmd>
1a001a54:	2801      	cmp	r0, #1
1a001a56:	d13f      	bne.n	1a001ad8 <disk_initialize+0xcc>
1a001a58:	e008      	b.n	1a001a6c <disk_initialize+0x60>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
1a001a5a:	f7ff fef9 	bl	1a001850 <rcvr_spi>
1a001a5e:	ab02      	add	r3, sp, #8
1a001a60:	442b      	add	r3, r5
1a001a62:	f803 0c04 	strb.w	r0, [r3, #-4]
1a001a66:	3501      	adds	r5, #1
1a001a68:	b2ed      	uxtb	r5, r5
1a001a6a:	e000      	b.n	1a001a6e <disk_initialize+0x62>
1a001a6c:	4625      	mov	r5, r4
1a001a6e:	2d03      	cmp	r5, #3
1a001a70:	d9f3      	bls.n	1a001a5a <disk_initialize+0x4e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
1a001a72:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a001a76:	2b01      	cmp	r3, #1
1a001a78:	d152      	bne.n	1a001b20 <disk_initialize+0x114>
1a001a7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001a7e:	2baa      	cmp	r3, #170	; 0xaa
1a001a80:	d150      	bne.n	1a001b24 <disk_initialize+0x118>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a001a82:	4b36      	ldr	r3, [pc, #216]	; (1a001b5c <disk_initialize+0x150>)
1a001a84:	781b      	ldrb	r3, [r3, #0]
1a001a86:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001a8a:	d006      	beq.n	1a001a9a <disk_initialize+0x8e>
1a001a8c:	20e9      	movs	r0, #233	; 0xe9
1a001a8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a001a92:	f7ff ff1b 	bl	1a0018cc <send_cmd>
1a001a96:	2800      	cmp	r0, #0
1a001a98:	d1f3      	bne.n	1a001a82 <disk_initialize+0x76>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
1a001a9a:	4b30      	ldr	r3, [pc, #192]	; (1a001b5c <disk_initialize+0x150>)
1a001a9c:	781b      	ldrb	r3, [r3, #0]
1a001a9e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001aa2:	d041      	beq.n	1a001b28 <disk_initialize+0x11c>
1a001aa4:	207a      	movs	r0, #122	; 0x7a
1a001aa6:	2100      	movs	r1, #0
1a001aa8:	f7ff ff10 	bl	1a0018cc <send_cmd>
1a001aac:	b148      	cbz	r0, 1a001ac2 <disk_initialize+0xb6>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a001aae:	2400      	movs	r4, #0
1a001ab0:	e03f      	b.n	1a001b32 <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
1a001ab2:	f7ff fecd 	bl	1a001850 <rcvr_spi>
1a001ab6:	ab02      	add	r3, sp, #8
1a001ab8:	4423      	add	r3, r4
1a001aba:	f803 0c04 	strb.w	r0, [r3, #-4]
1a001abe:	3401      	adds	r4, #1
1a001ac0:	b2e4      	uxtb	r4, r4
1a001ac2:	2c03      	cmp	r4, #3
1a001ac4:	d9f5      	bls.n	1a001ab2 <disk_initialize+0xa6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a001ac6:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a001aca:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001ace:	d001      	beq.n	1a001ad4 <disk_initialize+0xc8>
1a001ad0:	240c      	movs	r4, #12
1a001ad2:	e02e      	b.n	1a001b32 <disk_initialize+0x126>
1a001ad4:	2404      	movs	r4, #4
1a001ad6:	e02c      	b.n	1a001b32 <disk_initialize+0x126>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
1a001ad8:	20e9      	movs	r0, #233	; 0xe9
1a001ada:	2100      	movs	r1, #0
1a001adc:	f7ff fef6 	bl	1a0018cc <send_cmd>
1a001ae0:	2801      	cmp	r0, #1
1a001ae2:	d802      	bhi.n	1a001aea <disk_initialize+0xde>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
1a001ae4:	2402      	movs	r4, #2
1a001ae6:	25e9      	movs	r5, #233	; 0xe9
1a001ae8:	e001      	b.n	1a001aee <disk_initialize+0xe2>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
1a001aea:	2401      	movs	r4, #1
1a001aec:	2541      	movs	r5, #65	; 0x41
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a001aee:	4b1b      	ldr	r3, [pc, #108]	; (1a001b5c <disk_initialize+0x150>)
1a001af0:	781b      	ldrb	r3, [r3, #0]
1a001af2:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001af6:	d005      	beq.n	1a001b04 <disk_initialize+0xf8>
1a001af8:	4628      	mov	r0, r5
1a001afa:	2100      	movs	r1, #0
1a001afc:	f7ff fee6 	bl	1a0018cc <send_cmd>
1a001b00:	2800      	cmp	r0, #0
1a001b02:	d1f4      	bne.n	1a001aee <disk_initialize+0xe2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a001b04:	4b15      	ldr	r3, [pc, #84]	; (1a001b5c <disk_initialize+0x150>)
1a001b06:	781b      	ldrb	r3, [r3, #0]
1a001b08:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001b0c:	d00e      	beq.n	1a001b2c <disk_initialize+0x120>
1a001b0e:	2050      	movs	r0, #80	; 0x50
1a001b10:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001b14:	f7ff feda 	bl	1a0018cc <send_cmd>
1a001b18:	b950      	cbnz	r0, 1a001b30 <disk_initialize+0x124>
1a001b1a:	e00a      	b.n	1a001b32 <disk_initialize+0x126>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a001b1c:	2400      	movs	r4, #0
1a001b1e:	e008      	b.n	1a001b32 <disk_initialize+0x126>
1a001b20:	2400      	movs	r4, #0
1a001b22:	e006      	b.n	1a001b32 <disk_initialize+0x126>
1a001b24:	2400      	movs	r4, #0
1a001b26:	e004      	b.n	1a001b32 <disk_initialize+0x126>
1a001b28:	2400      	movs	r4, #0
1a001b2a:	e002      	b.n	1a001b32 <disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
1a001b2c:	2400      	movs	r4, #0
1a001b2e:	e000      	b.n	1a001b32 <disk_initialize+0x126>
1a001b30:	2400      	movs	r4, #0
		}
	}
	CardType = ty;
1a001b32:	4b0b      	ldr	r3, [pc, #44]	; (1a001b60 <disk_initialize+0x154>)
1a001b34:	701c      	strb	r4, [r3, #0]
	deselect();
1a001b36:	f7ff feab 	bl	1a001890 <deselect>

	if (ty) {			/* Initialization succeded */
1a001b3a:	b124      	cbz	r4, 1a001b46 <disk_initialize+0x13a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
1a001b3c:	4a06      	ldr	r2, [pc, #24]	; (1a001b58 <disk_initialize+0x14c>)
1a001b3e:	7813      	ldrb	r3, [r2, #0]
1a001b40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a001b44:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
1a001b46:	4b04      	ldr	r3, [pc, #16]	; (1a001b58 <disk_initialize+0x14c>)
1a001b48:	7818      	ldrb	r0, [r3, #0]
1a001b4a:	b2c0      	uxtb	r0, r0
1a001b4c:	e001      	b.n	1a001b52 <disk_initialize+0x146>
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a001b4e:	2001      	movs	r0, #1
1a001b50:	4770      	bx	lr
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
1a001b52:	b003      	add	sp, #12
1a001b54:	bd30      	pop	{r4, r5, pc}
1a001b56:	bf00      	nop
1a001b58:	10000000 	.word	0x10000000
1a001b5c:	10000595 	.word	0x10000595
1a001b60:	10000597 	.word	0x10000597

1a001b64 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a001b64:	b918      	cbnz	r0, 1a001b6e <disk_status+0xa>
	return Stat;
1a001b66:	4b03      	ldr	r3, [pc, #12]	; (1a001b74 <disk_status+0x10>)
1a001b68:	7818      	ldrb	r0, [r3, #0]
1a001b6a:	b2c0      	uxtb	r0, r0
1a001b6c:	4770      	bx	lr

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a001b6e:	2001      	movs	r0, #1
	return Stat;
}
1a001b70:	4770      	bx	lr
1a001b72:	bf00      	nop
1a001b74:	10000000 	.word	0x10000000

1a001b78 <disk_read>:
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001b78:	bbb8      	cbnz	r0, 1a001bea <disk_read+0x72>
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a001b7a:	b538      	push	{r3, r4, r5, lr}
1a001b7c:	460d      	mov	r5, r1
1a001b7e:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a001b80:	b3ab      	cbz	r3, 1a001bee <disk_read+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001b82:	4b1d      	ldr	r3, [pc, #116]	; (1a001bf8 <disk_read+0x80>)
1a001b84:	781b      	ldrb	r3, [r3, #0]
1a001b86:	f013 0f01 	tst.w	r3, #1
1a001b8a:	d132      	bne.n	1a001bf2 <disk_read+0x7a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a001b8c:	4b1b      	ldr	r3, [pc, #108]	; (1a001bfc <disk_read+0x84>)
1a001b8e:	781b      	ldrb	r3, [r3, #0]
1a001b90:	f013 0f08 	tst.w	r3, #8
1a001b94:	d100      	bne.n	1a001b98 <disk_read+0x20>
1a001b96:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single block read */
1a001b98:	2c01      	cmp	r4, #1
1a001b9a:	d10b      	bne.n	1a001bb4 <disk_read+0x3c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a001b9c:	2051      	movs	r0, #81	; 0x51
1a001b9e:	4611      	mov	r1, r2
1a001ba0:	f7ff fe94 	bl	1a0018cc <send_cmd>
1a001ba4:	b9d8      	cbnz	r0, 1a001bde <disk_read+0x66>
			&& rcvr_datablock(buff, 512))
1a001ba6:	4628      	mov	r0, r5
1a001ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001bac:	f7ff fefc 	bl	1a0019a8 <rcvr_datablock>
1a001bb0:	b9a0      	cbnz	r0, 1a001bdc <disk_read+0x64>
1a001bb2:	e014      	b.n	1a001bde <disk_read+0x66>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
1a001bb4:	2052      	movs	r0, #82	; 0x52
1a001bb6:	4611      	mov	r1, r2
1a001bb8:	f7ff fe88 	bl	1a0018cc <send_cmd>
1a001bbc:	b978      	cbnz	r0, 1a001bde <disk_read+0x66>
			do {
				if (!rcvr_datablock(buff, 512)) break;
1a001bbe:	4628      	mov	r0, r5
1a001bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001bc4:	f7ff fef0 	bl	1a0019a8 <rcvr_datablock>
1a001bc8:	b118      	cbz	r0, 1a001bd2 <disk_read+0x5a>
				buff += 512;
1a001bca:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a001bce:	3c01      	subs	r4, #1
1a001bd0:	d1f5      	bne.n	1a001bbe <disk_read+0x46>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a001bd2:	204c      	movs	r0, #76	; 0x4c
1a001bd4:	2100      	movs	r1, #0
1a001bd6:	f7ff fe79 	bl	1a0018cc <send_cmd>
1a001bda:	e000      	b.n	1a001bde <disk_read+0x66>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
1a001bdc:	2400      	movs	r4, #0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
1a001bde:	f7ff fe57 	bl	1a001890 <deselect>

	return count ? RES_ERROR : RES_OK;
1a001be2:	1c20      	adds	r0, r4, #0
1a001be4:	bf18      	it	ne
1a001be6:	2001      	movne	r0, #1
1a001be8:	bd38      	pop	{r3, r4, r5, pc}
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001bea:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001bec:	4770      	bx	lr
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001bee:	2004      	movs	r0, #4
1a001bf0:	bd38      	pop	{r3, r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001bf2:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001bf4:	bd38      	pop	{r3, r4, r5, pc}
1a001bf6:	bf00      	nop
1a001bf8:	10000000 	.word	0x10000000
1a001bfc:	10000597 	.word	0x10000597

1a001c00 <disk_write>:
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001c00:	2800      	cmp	r0, #0
1a001c02:	d146      	bne.n	1a001c92 <disk_write+0x92>
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a001c04:	b570      	push	{r4, r5, r6, lr}
1a001c06:	460d      	mov	r5, r1
1a001c08:	4616      	mov	r6, r2
1a001c0a:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a001c0c:	2b00      	cmp	r3, #0
1a001c0e:	d042      	beq.n	1a001c96 <disk_write+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001c10:	4b24      	ldr	r3, [pc, #144]	; (1a001ca4 <disk_write+0xa4>)
1a001c12:	781b      	ldrb	r3, [r3, #0]
1a001c14:	f013 0f01 	tst.w	r3, #1
1a001c18:	d13f      	bne.n	1a001c9a <disk_write+0x9a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a001c1a:	4b22      	ldr	r3, [pc, #136]	; (1a001ca4 <disk_write+0xa4>)
1a001c1c:	781b      	ldrb	r3, [r3, #0]
1a001c1e:	f013 0f04 	tst.w	r3, #4
1a001c22:	d13c      	bne.n	1a001c9e <disk_write+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a001c24:	4b20      	ldr	r3, [pc, #128]	; (1a001ca8 <disk_write+0xa8>)
1a001c26:	781b      	ldrb	r3, [r3, #0]
1a001c28:	f013 0f08 	tst.w	r3, #8
1a001c2c:	d100      	bne.n	1a001c30 <disk_write+0x30>
1a001c2e:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single block write */
1a001c30:	2c01      	cmp	r4, #1
1a001c32:	d10a      	bne.n	1a001c4a <disk_write+0x4a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
1a001c34:	2058      	movs	r0, #88	; 0x58
1a001c36:	4631      	mov	r1, r6
1a001c38:	f7ff fe48 	bl	1a0018cc <send_cmd>
1a001c3c:	bb18      	cbnz	r0, 1a001c86 <disk_write+0x86>
			&& xmit_datablock(buff, 0xFE))
1a001c3e:	4628      	mov	r0, r5
1a001c40:	21fe      	movs	r1, #254	; 0xfe
1a001c42:	f7ff fe83 	bl	1a00194c <xmit_datablock>
1a001c46:	b9d8      	cbnz	r0, 1a001c80 <disk_write+0x80>
1a001c48:	e01d      	b.n	1a001c86 <disk_write+0x86>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a001c4a:	f013 0f06 	tst.w	r3, #6
1a001c4e:	d003      	beq.n	1a001c58 <disk_write+0x58>
1a001c50:	20d7      	movs	r0, #215	; 0xd7
1a001c52:	4621      	mov	r1, r4
1a001c54:	f7ff fe3a 	bl	1a0018cc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
1a001c58:	2059      	movs	r0, #89	; 0x59
1a001c5a:	4631      	mov	r1, r6
1a001c5c:	f7ff fe36 	bl	1a0018cc <send_cmd>
1a001c60:	b988      	cbnz	r0, 1a001c86 <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
1a001c62:	4628      	mov	r0, r5
1a001c64:	21fc      	movs	r1, #252	; 0xfc
1a001c66:	f7ff fe71 	bl	1a00194c <xmit_datablock>
1a001c6a:	b118      	cbz	r0, 1a001c74 <disk_write+0x74>
				buff += 512;
1a001c6c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a001c70:	3c01      	subs	r4, #1
1a001c72:	d1f6      	bne.n	1a001c62 <disk_write+0x62>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
1a001c74:	2000      	movs	r0, #0
1a001c76:	21fd      	movs	r1, #253	; 0xfd
1a001c78:	f7ff fe68 	bl	1a00194c <xmit_datablock>
1a001c7c:	b110      	cbz	r0, 1a001c84 <disk_write+0x84>
1a001c7e:	e002      	b.n	1a001c86 <disk_write+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
1a001c80:	2400      	movs	r4, #0
1a001c82:	e000      	b.n	1a001c86 <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
1a001c84:	2401      	movs	r4, #1
		}
	}
	deselect();
1a001c86:	f7ff fe03 	bl	1a001890 <deselect>

	return count ? RES_ERROR : RES_OK;
1a001c8a:	1c20      	adds	r0, r4, #0
1a001c8c:	bf18      	it	ne
1a001c8e:	2001      	movne	r0, #1
1a001c90:	bd70      	pop	{r4, r5, r6, pc}
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001c92:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001c94:	4770      	bx	lr
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001c96:	2004      	movs	r0, #4
1a001c98:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001c9a:	2003      	movs	r0, #3
1a001c9c:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a001c9e:	2002      	movs	r0, #2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001ca0:	bd70      	pop	{r4, r5, r6, pc}
1a001ca2:	bf00      	nop
1a001ca4:	10000000 	.word	0x10000000
1a001ca8:	10000597 	.word	0x10000597

1a001cac <disk_ioctl>:
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a001cac:	2800      	cmp	r0, #0
1a001cae:	f040 8136 	bne.w	1a001f1e <disk_ioctl+0x272>
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
1a001cb2:	b570      	push	{r4, r5, r6, lr}
1a001cb4:	b084      	sub	sp, #16
1a001cb6:	4614      	mov	r4, r2

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
1a001cb8:	2905      	cmp	r1, #5
1a001cba:	d10c      	bne.n	1a001cd6 <disk_ioctl+0x2a>
		switch (*ptr) {
1a001cbc:	7813      	ldrb	r3, [r2, #0]
1a001cbe:	2b01      	cmp	r3, #1
1a001cc0:	f240 812a 	bls.w	1a001f18 <disk_ioctl+0x26c>
1a001cc4:	2b02      	cmp	r3, #2
1a001cc6:	d001      	beq.n	1a001ccc <disk_ioctl+0x20>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
1a001cc8:	2404      	movs	r4, #4
1a001cca:	e126      	b.n	1a001f1a <disk_ioctl+0x26e>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
1a001ccc:	f7ff fd8e 	bl	1a0017ec <chk_power>
1a001cd0:	7060      	strb	r0, [r4, #1]
			res = RES_OK;
1a001cd2:	2400      	movs	r4, #0
			break;
1a001cd4:	e121      	b.n	1a001f1a <disk_ioctl+0x26e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001cd6:	4b94      	ldr	r3, [pc, #592]	; (1a001f28 <disk_ioctl+0x27c>)
1a001cd8:	781b      	ldrb	r3, [r3, #0]
1a001cda:	f013 0f01 	tst.w	r3, #1
1a001cde:	f040 8120 	bne.w	1a001f22 <disk_ioctl+0x276>

		switch (ctrl) {
1a001ce2:	290e      	cmp	r1, #14
1a001ce4:	f200 80fc 	bhi.w	1a001ee0 <disk_ioctl+0x234>
1a001ce8:	e8df f011 	tbh	[pc, r1, lsl #1]
1a001cec:	0018000f 	.word	0x0018000f
1a001cf0:	0060005b 	.word	0x0060005b
1a001cf4:	00fa00fa 	.word	0x00fa00fa
1a001cf8:	00fa00fa 	.word	0x00fa00fa
1a001cfc:	00fa00fa 	.word	0x00fa00fa
1a001d00:	00be00b9 	.word	0x00be00b9
1a001d04:	00d800cc 	.word	0x00d800cc
1a001d08:	00ec      	.short	0x00ec
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
1a001d0a:	f7ff fdcd 	bl	1a0018a8 <select_>
1a001d0e:	2800      	cmp	r0, #0
1a001d10:	f000 80e8 	beq.w	1a001ee4 <disk_ioctl+0x238>
				res = RES_OK;
				deselect();
1a001d14:	f7ff fdbc 	bl	1a001890 <deselect>
		if (Stat & STA_NOINIT) return RES_NOTRDY;

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
				res = RES_OK;
1a001d18:	2400      	movs	r4, #0
1a001d1a:	e0fa      	b.n	1a001f12 <disk_ioctl+0x266>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
1a001d1c:	2049      	movs	r0, #73	; 0x49
1a001d1e:	2100      	movs	r1, #0
1a001d20:	f7ff fdd4 	bl	1a0018cc <send_cmd>
1a001d24:	2800      	cmp	r0, #0
1a001d26:	f040 80df 	bne.w	1a001ee8 <disk_ioctl+0x23c>
1a001d2a:	4668      	mov	r0, sp
1a001d2c:	2110      	movs	r1, #16
1a001d2e:	f7ff fe3b 	bl	1a0019a8 <rcvr_datablock>
1a001d32:	2800      	cmp	r0, #0
1a001d34:	f000 80da 	beq.w	1a001eec <disk_ioctl+0x240>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
1a001d38:	f89d 3000 	ldrb.w	r3, [sp]
1a001d3c:	099b      	lsrs	r3, r3, #6
1a001d3e:	2b01      	cmp	r3, #1
1a001d40:	d10b      	bne.n	1a001d5a <disk_ioctl+0xae>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a001d42:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a001d46:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001d4a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a001d4e:	3301      	adds	r3, #1
1a001d50:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a001d52:	029b      	lsls	r3, r3, #10
1a001d54:	6023      	str	r3, [r4, #0]
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
1a001d56:	2400      	movs	r4, #0
1a001d58:	e0db      	b.n	1a001f12 <disk_ioctl+0x266>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a001d5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a001d5e:	f89d 100a 	ldrb.w	r1, [sp, #10]
1a001d62:	f89d 2009 	ldrb.w	r2, [sp, #9]
1a001d66:	f003 030f 	and.w	r3, r3, #15
1a001d6a:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
1a001d6e:	f002 0203 	and.w	r2, r2, #3
1a001d72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a001d76:	3202      	adds	r2, #2
1a001d78:	b2d2      	uxtb	r2, r2
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a001d7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
1a001d7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001d82:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a001d86:	009b      	lsls	r3, r3, #2
1a001d88:	eb03 1390 	add.w	r3, r3, r0, lsr #6
1a001d8c:	f001 0103 	and.w	r1, r1, #3
1a001d90:	eb03 2381 	add.w	r3, r3, r1, lsl #10
1a001d94:	3301      	adds	r3, #1
1a001d96:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a001d98:	3a09      	subs	r2, #9
1a001d9a:	4093      	lsls	r3, r2
1a001d9c:	6023      	str	r3, [r4, #0]
				}
				res = RES_OK;
1a001d9e:	2400      	movs	r4, #0
1a001da0:	e0b7      	b.n	1a001f12 <disk_ioctl+0x266>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
1a001da2:	f44f 7300 	mov.w	r3, #512	; 0x200
1a001da6:	8013      	strh	r3, [r2, #0]
			res = RES_OK;
1a001da8:	2400      	movs	r4, #0
			break;
1a001daa:	e0b2      	b.n	1a001f12 <disk_ioctl+0x266>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
1a001dac:	4b5f      	ldr	r3, [pc, #380]	; (1a001f2c <disk_ioctl+0x280>)
1a001dae:	781b      	ldrb	r3, [r3, #0]
1a001db0:	f013 0f04 	tst.w	r3, #4
1a001db4:	d01f      	beq.n	1a001df6 <disk_ioctl+0x14a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
1a001db6:	20cd      	movs	r0, #205	; 0xcd
1a001db8:	2100      	movs	r1, #0
1a001dba:	f7ff fd87 	bl	1a0018cc <send_cmd>
1a001dbe:	2800      	cmp	r0, #0
1a001dc0:	f040 8096 	bne.w	1a001ef0 <disk_ioctl+0x244>
					rcvr_spi();
1a001dc4:	f7ff fd44 	bl	1a001850 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
1a001dc8:	4668      	mov	r0, sp
1a001dca:	2110      	movs	r1, #16
1a001dcc:	f7ff fdec 	bl	1a0019a8 <rcvr_datablock>
1a001dd0:	b930      	cbnz	r0, 1a001de0 <disk_ioctl+0x134>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001dd2:	2401      	movs	r4, #1
1a001dd4:	e09d      	b.n	1a001f12 <disk_ioctl+0x266>
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
1a001dd6:	f7ff fd3b 	bl	1a001850 <rcvr_spi>
1a001dda:	3d01      	subs	r5, #1
1a001ddc:	b2ed      	uxtb	r5, r5
1a001dde:	e000      	b.n	1a001de2 <disk_ioctl+0x136>
1a001de0:	2530      	movs	r5, #48	; 0x30
1a001de2:	2d00      	cmp	r5, #0
1a001de4:	d1f7      	bne.n	1a001dd6 <disk_ioctl+0x12a>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a001de6:	f89d 200a 	ldrb.w	r2, [sp, #10]
1a001dea:	0912      	lsrs	r2, r2, #4
1a001dec:	2310      	movs	r3, #16
1a001dee:	4093      	lsls	r3, r2
1a001df0:	6023      	str	r3, [r4, #0]
						res = RES_OK;
1a001df2:	2400      	movs	r4, #0
1a001df4:	e08d      	b.n	1a001f12 <disk_ioctl+0x266>
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
1a001df6:	2049      	movs	r0, #73	; 0x49
1a001df8:	2100      	movs	r1, #0
1a001dfa:	f7ff fd67 	bl	1a0018cc <send_cmd>
1a001dfe:	2800      	cmp	r0, #0
1a001e00:	d178      	bne.n	1a001ef4 <disk_ioctl+0x248>
1a001e02:	4668      	mov	r0, sp
1a001e04:	2110      	movs	r1, #16
1a001e06:	f7ff fdcf 	bl	1a0019a8 <rcvr_datablock>
1a001e0a:	2800      	cmp	r0, #0
1a001e0c:	d074      	beq.n	1a001ef8 <disk_ioctl+0x24c>
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
1a001e0e:	4b47      	ldr	r3, [pc, #284]	; (1a001f2c <disk_ioctl+0x280>)
1a001e10:	781b      	ldrb	r3, [r3, #0]
1a001e12:	f013 0f02 	tst.w	r3, #2
1a001e16:	d011      	beq.n	1a001e3c <disk_ioctl+0x190>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a001e18:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a001e1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
1a001e20:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001e24:	09db      	lsrs	r3, r3, #7
1a001e26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a001e2a:	3301      	adds	r3, #1
1a001e2c:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001e30:	0992      	lsrs	r2, r2, #6
1a001e32:	3a01      	subs	r2, #1
1a001e34:	4093      	lsls	r3, r2
1a001e36:	6023      	str	r3, [r4, #0]
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
1a001e38:	2400      	movs	r4, #0
1a001e3a:	e06a      	b.n	1a001f12 <disk_ioctl+0x266>
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a001e3c:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a001e40:	f3c3 0184 	ubfx	r1, r3, #2, #5
1a001e44:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001e48:	f003 0003 	and.w	r0, r3, #3
1a001e4c:	095a      	lsrs	r2, r3, #5
1a001e4e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
1a001e52:	1c53      	adds	r3, r2, #1
1a001e54:	fb01 3303 	mla	r3, r1, r3, r3
1a001e58:	6023      	str	r3, [r4, #0]
					}
					res = RES_OK;
1a001e5a:	2400      	movs	r4, #0
1a001e5c:	e059      	b.n	1a001f12 <disk_ioctl+0x266>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
1a001e5e:	4b33      	ldr	r3, [pc, #204]	; (1a001f2c <disk_ioctl+0x280>)
1a001e60:	781b      	ldrb	r3, [r3, #0]
1a001e62:	7013      	strb	r3, [r2, #0]
			res = RES_OK;
1a001e64:	2400      	movs	r4, #0
			break;
1a001e66:	e054      	b.n	1a001f12 <disk_ioctl+0x266>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a001e68:	2049      	movs	r0, #73	; 0x49
1a001e6a:	2100      	movs	r1, #0
1a001e6c:	f7ff fd2e 	bl	1a0018cc <send_cmd>
1a001e70:	2800      	cmp	r0, #0
1a001e72:	d143      	bne.n	1a001efc <disk_ioctl+0x250>
				&& rcvr_datablock(ptr, 16))
1a001e74:	4620      	mov	r0, r4
1a001e76:	2110      	movs	r1, #16
1a001e78:	f7ff fd96 	bl	1a0019a8 <rcvr_datablock>
1a001e7c:	2800      	cmp	r0, #0
1a001e7e:	d13f      	bne.n	1a001f00 <disk_ioctl+0x254>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001e80:	2401      	movs	r4, #1
1a001e82:	e046      	b.n	1a001f12 <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a001e84:	204a      	movs	r0, #74	; 0x4a
1a001e86:	2100      	movs	r1, #0
1a001e88:	f7ff fd20 	bl	1a0018cc <send_cmd>
1a001e8c:	bbd0      	cbnz	r0, 1a001f04 <disk_ioctl+0x258>
				&& rcvr_datablock(ptr, 16))
1a001e8e:	4620      	mov	r0, r4
1a001e90:	2110      	movs	r1, #16
1a001e92:	f7ff fd89 	bl	1a0019a8 <rcvr_datablock>
1a001e96:	bbb8      	cbnz	r0, 1a001f08 <disk_ioctl+0x25c>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001e98:	2401      	movs	r4, #1
1a001e9a:	e03a      	b.n	1a001f12 <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
1a001e9c:	207a      	movs	r0, #122	; 0x7a
1a001e9e:	2100      	movs	r1, #0
1a001ea0:	f7ff fd14 	bl	1a0018cc <send_cmd>
1a001ea4:	b148      	cbz	r0, 1a001eba <disk_ioctl+0x20e>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001ea6:	2401      	movs	r4, #1
1a001ea8:	e033      	b.n	1a001f12 <disk_ioctl+0x266>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
1a001eaa:	1c66      	adds	r6, r4, #1
1a001eac:	f7ff fcd0 	bl	1a001850 <rcvr_spi>
1a001eb0:	7020      	strb	r0, [r4, #0]
1a001eb2:	3d01      	subs	r5, #1
1a001eb4:	b2ed      	uxtb	r5, r5
1a001eb6:	4634      	mov	r4, r6
1a001eb8:	e000      	b.n	1a001ebc <disk_ioctl+0x210>
1a001eba:	2504      	movs	r5, #4
1a001ebc:	2d00      	cmp	r5, #0
1a001ebe:	d1f4      	bne.n	1a001eaa <disk_ioctl+0x1fe>
				res = RES_OK;
1a001ec0:	2400      	movs	r4, #0
1a001ec2:	e026      	b.n	1a001f12 <disk_ioctl+0x266>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
1a001ec4:	20cd      	movs	r0, #205	; 0xcd
1a001ec6:	2100      	movs	r1, #0
1a001ec8:	f7ff fd00 	bl	1a0018cc <send_cmd>
1a001ecc:	b9f0      	cbnz	r0, 1a001f0c <disk_ioctl+0x260>
				rcvr_spi();
1a001ece:	f7ff fcbf 	bl	1a001850 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a001ed2:	4620      	mov	r0, r4
1a001ed4:	2140      	movs	r1, #64	; 0x40
1a001ed6:	f7ff fd67 	bl	1a0019a8 <rcvr_datablock>
1a001eda:	b9c8      	cbnz	r0, 1a001f10 <disk_ioctl+0x264>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001edc:	2401      	movs	r4, #1
1a001ede:	e018      	b.n	1a001f12 <disk_ioctl+0x266>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
1a001ee0:	2404      	movs	r4, #4
1a001ee2:	e016      	b.n	1a001f12 <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001ee4:	2401      	movs	r4, #1
1a001ee6:	e014      	b.n	1a001f12 <disk_ioctl+0x266>
1a001ee8:	2401      	movs	r4, #1
1a001eea:	e012      	b.n	1a001f12 <disk_ioctl+0x266>
1a001eec:	2401      	movs	r4, #1
1a001eee:	e010      	b.n	1a001f12 <disk_ioctl+0x266>
1a001ef0:	2401      	movs	r4, #1
1a001ef2:	e00e      	b.n	1a001f12 <disk_ioctl+0x266>
1a001ef4:	2401      	movs	r4, #1
1a001ef6:	e00c      	b.n	1a001f12 <disk_ioctl+0x266>
1a001ef8:	2401      	movs	r4, #1
1a001efa:	e00a      	b.n	1a001f12 <disk_ioctl+0x266>
1a001efc:	2401      	movs	r4, #1
1a001efe:	e008      	b.n	1a001f12 <disk_ioctl+0x266>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a001f00:	2400      	movs	r4, #0
1a001f02:	e006      	b.n	1a001f12 <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001f04:	2401      	movs	r4, #1
1a001f06:	e004      	b.n	1a001f12 <disk_ioctl+0x266>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a001f08:	2400      	movs	r4, #0
1a001f0a:	e002      	b.n	1a001f12 <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001f0c:	2401      	movs	r4, #1
1a001f0e:	e000      	b.n	1a001f12 <disk_ioctl+0x266>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
1a001f10:	2400      	movs	r4, #0

		default:
			res = RES_PARERR;
		}

		deselect();
1a001f12:	f7ff fcbd 	bl	1a001890 <deselect>
1a001f16:	e000      	b.n	1a001f1a <disk_ioctl+0x26e>
	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
			res = RES_OK;
1a001f18:	2400      	movs	r4, #0
		}

		deselect();
	}

	return res;
1a001f1a:	4620      	mov	r0, r4
1a001f1c:	e002      	b.n	1a001f24 <disk_ioctl+0x278>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a001f1e:	2004      	movs	r0, #4

		deselect();
	}

	return res;
}
1a001f20:	4770      	bx	lr
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001f22:	2003      	movs	r0, #3

		deselect();
	}

	return res;
}
1a001f24:	b004      	add	sp, #16
1a001f26:	bd70      	pop	{r4, r5, r6, pc}
1a001f28:	10000000 	.word	0x10000000
1a001f2c:	10000597 	.word	0x10000597

1a001f30 <disk_timerproc>:
{
	static BYTE pv;
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
1a001f30:	4b15      	ldr	r3, [pc, #84]	; (1a001f88 <disk_timerproc+0x58>)
1a001f32:	781a      	ldrb	r2, [r3, #0]
	if (n) Timer1 = --n;
1a001f34:	f002 03ff 	and.w	r3, r2, #255	; 0xff
1a001f38:	b11a      	cbz	r2, 1a001f42 <disk_timerproc+0x12>
1a001f3a:	3b01      	subs	r3, #1
1a001f3c:	b2db      	uxtb	r3, r3
1a001f3e:	4a12      	ldr	r2, [pc, #72]	; (1a001f88 <disk_timerproc+0x58>)
1a001f40:	7013      	strb	r3, [r2, #0]
	n = Timer2;
1a001f42:	4b12      	ldr	r3, [pc, #72]	; (1a001f8c <disk_timerproc+0x5c>)
1a001f44:	781a      	ldrb	r2, [r3, #0]
	if (n) Timer2 = --n;
1a001f46:	f002 03ff 	and.w	r3, r2, #255	; 0xff
1a001f4a:	b11a      	cbz	r2, 1a001f54 <disk_timerproc+0x24>
1a001f4c:	3b01      	subs	r3, #1
1a001f4e:	b2db      	uxtb	r3, r3
1a001f50:	4a0e      	ldr	r2, [pc, #56]	; (1a001f8c <disk_timerproc+0x5c>)
1a001f52:	7013      	strb	r3, [r2, #0]

	n = pv;
1a001f54:	4a0e      	ldr	r2, [pc, #56]	; (1a001f90 <disk_timerproc+0x60>)
1a001f56:	7811      	ldrb	r1, [r2, #0]
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a001f58:	4b0e      	ldr	r3, [pc, #56]	; (1a001f94 <disk_timerproc+0x64>)
1a001f5a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
1a001f5e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001f62:	bf14      	ite	ne
1a001f64:	2301      	movne	r3, #1
1a001f66:	2300      	moveq	r3, #0
	//pv = SOCKPORT & (SOCKWP | SOCKINS);	/* Sample socket switch */

	/* TODO: Actualizar!!! */
	//pv = ((GPIO_ReadValue(2) & (1<<11)) != 0);
	pv = (Chip_GPIO_GetPinState(LPC_GPIO_PORT, 2, 11) != 0);
1a001f68:	7013      	strb	r3, [r2, #0]

	if (n == pv) {					/* Have contacts stabled? */
1a001f6a:	4299      	cmp	r1, r3
1a001f6c:	d10a      	bne.n	1a001f84 <disk_timerproc+0x54>
		s = Stat;
1a001f6e:	4a0a      	ldr	r2, [pc, #40]	; (1a001f98 <disk_timerproc+0x68>)
1a001f70:	7812      	ldrb	r2, [r2, #0]
1a001f72:	b2d2      	uxtb	r2, r2

		/* write protect NOT supported */

		/* check card detect */
		if (pv)			       /* (Socket empty) */
1a001f74:	b113      	cbz	r3, 1a001f7c <disk_timerproc+0x4c>
			s |= (STA_NODISK | STA_NOINIT);
1a001f76:	f042 0303 	orr.w	r3, r2, #3
1a001f7a:	e001      	b.n	1a001f80 <disk_timerproc+0x50>
		else				       /* (Card inserted) */
			s &= ~STA_NODISK;
1a001f7c:	f002 03fd 	and.w	r3, r2, #253	; 0xfd

		Stat = s;
1a001f80:	4a05      	ldr	r2, [pc, #20]	; (1a001f98 <disk_timerproc+0x68>)
1a001f82:	7013      	strb	r3, [r2, #0]
1a001f84:	4770      	bx	lr
1a001f86:	bf00      	nop
1a001f88:	10000595 	.word	0x10000595
1a001f8c:	10000596 	.word	0x10000596
1a001f90:	10000594 	.word	0x10000594
1a001f94:	400f4000 	.word	0x400f4000
1a001f98:	10000000 	.word	0x10000000

1a001f9c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001f9c:	4b04      	ldr	r3, [pc, #16]	; (1a001fb0 <cyclesCounterInit+0x14>)
1a001f9e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001fa0:	4b04      	ldr	r3, [pc, #16]	; (1a001fb4 <cyclesCounterInit+0x18>)
1a001fa2:	681a      	ldr	r2, [r3, #0]
1a001fa4:	6813      	ldr	r3, [r2, #0]
1a001fa6:	f043 0301 	orr.w	r3, r3, #1
1a001faa:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001fac:	2001      	movs	r0, #1
1a001fae:	4770      	bx	lr
1a001fb0:	10000008 	.word	0x10000008
1a001fb4:	10000004 	.word	0x10000004

1a001fb8 <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a001fb8:	b510      	push	{r4, lr}
1a001fba:	b088      	sub	sp, #32
1a001fbc:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a001fbe:	480a      	ldr	r0, [pc, #40]	; (1a001fe8 <rtcRead+0x30>)
1a001fc0:	4669      	mov	r1, sp
1a001fc2:	f001 fac1 	bl	1a003548 <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a001fc6:	9b00      	ldr	r3, [sp, #0]
1a001fc8:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a001fca:	9b01      	ldr	r3, [sp, #4]
1a001fcc:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a001fce:	9b02      	ldr	r3, [sp, #8]
1a001fd0:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a001fd2:	9b04      	ldr	r3, [sp, #16]
1a001fd4:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a001fd6:	9b03      	ldr	r3, [sp, #12]
1a001fd8:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a001fda:	9b06      	ldr	r3, [sp, #24]
1a001fdc:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a001fde:	9b07      	ldr	r3, [sp, #28]
1a001fe0:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a001fe2:	2001      	movs	r0, #1
1a001fe4:	b008      	add	sp, #32
1a001fe6:	bd10      	pop	{r4, pc}
1a001fe8:	40046000 	.word	0x40046000

1a001fec <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a001fec:	b500      	push	{lr}
1a001fee:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a001ff0:	79c3      	ldrb	r3, [r0, #7]
1a001ff2:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a001ff4:	7983      	ldrb	r3, [r0, #6]
1a001ff6:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a001ff8:	7943      	ldrb	r3, [r0, #5]
1a001ffa:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->wday;
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a001ffc:	78c3      	ldrb	r3, [r0, #3]
1a001ffe:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a002000:	7883      	ldrb	r3, [r0, #2]
1a002002:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a002004:	8803      	ldrh	r3, [r0, #0]
1a002006:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a002008:	4803      	ldr	r0, [pc, #12]	; (1a002018 <rtcWrite+0x2c>)
1a00200a:	4669      	mov	r1, sp
1a00200c:	f001 fa84 	bl	1a003518 <Chip_RTC_SetFullTime>

   return ret_val;
}
1a002010:	2001      	movs	r0, #1
1a002012:	b009      	add	sp, #36	; 0x24
1a002014:	f85d fb04 	ldr.w	pc, [sp], #4
1a002018:	40046000 	.word	0x40046000

1a00201c <rtcInit>:
 * @Brief: Configure RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcInit( rtc_t * rtc )
{
1a00201c:	b538      	push	{r3, r4, r5, lr}
   bool_t ret_val = 1;

   static bool_t init;

   if( init ) {
1a00201e:	4b0a      	ldr	r3, [pc, #40]	; (1a002048 <rtcInit+0x2c>)
1a002020:	781b      	ldrb	r3, [r3, #0]
1a002022:	b97b      	cbnz	r3, 1a002044 <rtcInit+0x28>
1a002024:	4604      	mov	r4, r0
      /* Already initialized */
      ret_val = 0;
   } else {

      /* RTC Block section ------------------------- */
      Chip_RTC_Init(LPC_RTC);
1a002026:	4d09      	ldr	r5, [pc, #36]	; (1a00204c <rtcInit+0x30>)
1a002028:	4628      	mov	r0, r5
1a00202a:	f001 fab5 	bl	1a003598 <Chip_RTC_Init>
      rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = 2;
      rtcTime.time[RTC_TIMETYPE_MONTH]      = 7;
      rtcTime.time[RTC_TIMETYPE_YEAR]       = 2016;
      Chip_RTC_SetFullAlarmTime(LPC_RTC, &rtcTime);
      */
      rtcWrite( rtc );
1a00202e:	4620      	mov	r0, r4
1a002030:	f7ff ffdc 	bl	1a001fec <rtcWrite>

      /* Enable rtc (starts increase the tick counter
         and second counter register) */
      Chip_RTC_Enable(LPC_RTC, ENABLE);
1a002034:	4628      	mov	r0, r5
1a002036:	2101      	movs	r1, #1
1a002038:	f001 fa62 	bl	1a003500 <Chip_RTC_Enable>

      init = 1;
1a00203c:	2001      	movs	r0, #1
1a00203e:	4b02      	ldr	r3, [pc, #8]	; (1a002048 <rtcInit+0x2c>)
1a002040:	7018      	strb	r0, [r3, #0]
1a002042:	bd38      	pop	{r3, r4, r5, pc}

   static bool_t init;

   if( init ) {
      /* Already initialized */
      ret_val = 0;
1a002044:	2000      	movs	r0, #0

      init = 1;
   }

   return ret_val;
}
1a002046:	bd38      	pop	{r3, r4, r5, pc}
1a002048:	10000598 	.word	0x10000598
1a00204c:	40046000 	.word	0x40046000

1a002050 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002050:	2301      	movs	r3, #1
1a002052:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a002054:	4a01      	ldr	r2, [pc, #4]	; (1a00205c <clearInterrupt+0xc>)
1a002056:	6253      	str	r3, [r2, #36]	; 0x24
1a002058:	4770      	bx	lr
1a00205a:	bf00      	nop
1a00205c:	40087000 	.word	0x40087000

1a002060 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a002060:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a002062:	4b13      	ldr	r3, [pc, #76]	; (1a0020b0 <serveInterrupt+0x50>)
1a002064:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a002066:	4a13      	ldr	r2, [pc, #76]	; (1a0020b4 <serveInterrupt+0x54>)
1a002068:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00206a:	2401      	movs	r4, #1
1a00206c:	4084      	lsls	r4, r0
1a00206e:	4214      	tst	r4, r2
1a002070:	d00a      	beq.n	1a002088 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a002072:	4a11      	ldr	r2, [pc, #68]	; (1a0020b8 <serveInterrupt+0x58>)
1a002074:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00207a:	00db      	lsls	r3, r3, #3
1a00207c:	490f      	ldr	r1, [pc, #60]	; (1a0020bc <serveInterrupt+0x5c>)
1a00207e:	440b      	add	r3, r1
1a002080:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a002082:	4b0c      	ldr	r3, [pc, #48]	; (1a0020b4 <serveInterrupt+0x54>)
1a002084:	61dc      	str	r4, [r3, #28]
1a002086:	e00f      	b.n	1a0020a8 <serveInterrupt+0x48>
1a002088:	4a0b      	ldr	r2, [pc, #44]	; (1a0020b8 <serveInterrupt+0x58>)
1a00208a:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00208c:	4d0b      	ldr	r5, [pc, #44]	; (1a0020bc <serveInterrupt+0x5c>)
1a00208e:	005e      	lsls	r6, r3, #1
1a002090:	18f2      	adds	r2, r6, r3
1a002092:	00d2      	lsls	r2, r2, #3
1a002094:	442a      	add	r2, r5
1a002096:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a002098:	6852      	ldr	r2, [r2, #4]
1a00209a:	1a89      	subs	r1, r1, r2
1a00209c:	4433      	add	r3, r6
1a00209e:	00db      	lsls	r3, r3, #3
1a0020a0:	442b      	add	r3, r5
1a0020a2:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0020a4:	4b03      	ldr	r3, [pc, #12]	; (1a0020b4 <serveInterrupt+0x54>)
1a0020a6:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0020a8:	f7ff ffd2 	bl	1a002050 <clearInterrupt>
1a0020ac:	bd70      	pop	{r4, r5, r6, pc}
1a0020ae:	bf00      	nop
1a0020b0:	1a0040c0 	.word	0x1a0040c0
1a0020b4:	40087000 	.word	0x40087000
1a0020b8:	40084000 	.word	0x40084000
1a0020bc:	1000000c 	.word	0x1000000c

1a0020c0 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0020c0:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0020c2:	2000      	movs	r0, #0
1a0020c4:	f7ff ffcc 	bl	1a002060 <serveInterrupt>
1a0020c8:	bd08      	pop	{r3, pc}
1a0020ca:	bf00      	nop

1a0020cc <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0020cc:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0020ce:	2001      	movs	r0, #1
1a0020d0:	f7ff ffc6 	bl	1a002060 <serveInterrupt>
1a0020d4:	bd08      	pop	{r3, pc}
1a0020d6:	bf00      	nop

1a0020d8 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0020d8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0020da:	2002      	movs	r0, #2
1a0020dc:	f7ff ffc0 	bl	1a002060 <serveInterrupt>
1a0020e0:	bd08      	pop	{r3, pc}
1a0020e2:	bf00      	nop

1a0020e4 <int64ToString>:
// C++ version 0.4 char* style "itoa":
// Written by Luk�s Chmela
// Released under GPLv3.
// Modified by Eric Pernia.
bool_t int64ToString( int64_t value, char* result, uint8_t base )
{
1a0020e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0020e8:	4615      	mov	r5, r2
1a0020ea:	4699      	mov	r9, r3
   // check that the base if valid
   if( base < 2 || base > 36 ) {
1a0020ec:	3b02      	subs	r3, #2
1a0020ee:	b2db      	uxtb	r3, r3
1a0020f0:	2b22      	cmp	r3, #34	; 0x22
1a0020f2:	d903      	bls.n	1a0020fc <int64ToString+0x18>
      *result = '\0';
1a0020f4:	2000      	movs	r0, #0
1a0020f6:	7010      	strb	r0, [r2, #0]
      return FALSE;
1a0020f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0020fc:	4606      	mov	r6, r0
1a0020fe:	460f      	mov	r7, r1
1a002100:	4690      	mov	r8, r2
1a002102:	e002      	b.n	1a00210a <int64ToString+0x26>
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a002104:	46f0      	mov	r8, lr
   char* ptr = result, *ptr1 = result, tmp_char;
   int64_t tmp_value;

   do {
      tmp_value = value;
      value /= (int64_t)base;
1a002106:	4606      	mov	r6, r0
1a002108:	460f      	mov	r7, r1
1a00210a:	4630      	mov	r0, r6
1a00210c:	4639      	mov	r1, r7
1a00210e:	464a      	mov	r2, r9
1a002110:	2300      	movs	r3, #0
1a002112:	f001 fc85 	bl	1a003a20 <__aeabi_ldivmod>
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * (int64_t)base)];
1a002116:	f108 0e01 	add.w	lr, r8, #1
1a00211a:	fba9 2300 	umull	r2, r3, r9, r0
1a00211e:	1ab2      	subs	r2, r6, r2
1a002120:	4b12      	ldr	r3, [pc, #72]	; (1a00216c <int64ToString+0x88>)
1a002122:	441a      	add	r2, r3
1a002124:	7813      	ldrb	r3, [r2, #0]
1a002126:	f888 3000 	strb.w	r3, [r8]
   } while ( value );
1a00212a:	ea50 0301 	orrs.w	r3, r0, r1
1a00212e:	d1e9      	bne.n	1a002104 <int64ToString+0x20>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a002130:	2e00      	cmp	r6, #0
1a002132:	f177 0300 	sbcs.w	r3, r7, #0
1a002136:	da04      	bge.n	1a002142 <int64ToString+0x5e>
1a002138:	f108 0e02 	add.w	lr, r8, #2
1a00213c:	232d      	movs	r3, #45	; 0x2d
1a00213e:	f888 3001 	strb.w	r3, [r8, #1]
   *ptr-- = '\0';
1a002142:	f10e 33ff 	add.w	r3, lr, #4294967295
1a002146:	2200      	movs	r2, #0
1a002148:	f88e 2000 	strb.w	r2, [lr]
   while(ptr1 < ptr) {
1a00214c:	e009      	b.n	1a002162 <int64ToString+0x7e>
      tmp_char = *ptr;
1a00214e:	461a      	mov	r2, r3
1a002150:	f812 0901 	ldrb.w	r0, [r2], #-1
      *ptr--= *ptr1;
1a002154:	4629      	mov	r1, r5
1a002156:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00215a:	701c      	strb	r4, [r3, #0]
      *ptr1++ = tmp_char;
1a00215c:	7028      	strb	r0, [r5, #0]
1a00215e:	460d      	mov	r5, r1
   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
      tmp_char = *ptr;
      *ptr--= *ptr1;
1a002160:	4613      	mov	r3, r2
   } while ( value );

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
   *ptr-- = '\0';
   while(ptr1 < ptr) {
1a002162:	429d      	cmp	r5, r3
1a002164:	d3f3      	bcc.n	1a00214e <int64ToString+0x6a>
      tmp_char = *ptr;
      *ptr--= *ptr1;
      *ptr1++ = tmp_char;
   }
   return TRUE;
1a002166:	2001      	movs	r0, #1
}
1a002168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00216c:	1a0040e7 	.word	0x1a0040e7

1a002170 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a002170:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a002172:	4d09      	ldr	r5, [pc, #36]	; (1a002198 <gpioObtainPinInit+0x28>)
1a002174:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a002178:	182c      	adds	r4, r5, r0
1a00217a:	5c28      	ldrb	r0, [r5, r0]
1a00217c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00217e:	7861      	ldrb	r1, [r4, #1]
1a002180:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a002182:	78a2      	ldrb	r2, [r4, #2]
1a002184:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a002186:	78e2      	ldrb	r2, [r4, #3]
1a002188:	9b02      	ldr	r3, [sp, #8]
1a00218a:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00218c:	7922      	ldrb	r2, [r4, #4]
1a00218e:	9b03      	ldr	r3, [sp, #12]
1a002190:	701a      	strb	r2, [r3, #0]
}
1a002192:	bc30      	pop	{r4, r5}
1a002194:	4770      	bx	lr
1a002196:	bf00      	nop
1a002198:	1a004120 	.word	0x1a004120

1a00219c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00219c:	b570      	push	{r4, r5, r6, lr}
1a00219e:	b084      	sub	sp, #16
1a0021a0:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0021a2:	2300      	movs	r3, #0
1a0021a4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0021a8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0021ac:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0021b0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0021b4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0021b8:	ab03      	add	r3, sp, #12
1a0021ba:	9300      	str	r3, [sp, #0]
1a0021bc:	f10d 030b 	add.w	r3, sp, #11
1a0021c0:	9301      	str	r3, [sp, #4]
1a0021c2:	f10d 010f 	add.w	r1, sp, #15
1a0021c6:	f10d 020e 	add.w	r2, sp, #14
1a0021ca:	f10d 030d 	add.w	r3, sp, #13
1a0021ce:	f7ff ffcf 	bl	1a002170 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0021d2:	2c05      	cmp	r4, #5
1a0021d4:	f200 80a8 	bhi.w	1a002328 <gpioInit+0x18c>
1a0021d8:	e8df f004 	tbb	[pc, r4]
1a0021dc:	46278408 	.word	0x46278408
1a0021e0:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0021e2:	4853      	ldr	r0, [pc, #332]	; (1a002330 <gpioInit+0x194>)
1a0021e4:	f001 f9fc 	bl	1a0035e0 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a0021e8:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a0021ea:	e09e      	b.n	1a00232a <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a0021ec:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0021f0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0021f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0021f8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0021fc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002200:	494c      	ldr	r1, [pc, #304]	; (1a002334 <gpioInit+0x198>)
1a002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002206:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00220a:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00220e:	2001      	movs	r0, #1
1a002210:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a002214:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00221c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a002220:	ea22 0204 	bic.w	r2, r2, r4
1a002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002228:	e07f      	b.n	1a00232a <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a00222a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00222e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002232:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002236:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00223a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00223e:	493d      	ldr	r1, [pc, #244]	; (1a002334 <gpioInit+0x198>)
1a002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002244:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002248:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00224c:	2001      	movs	r0, #1
1a00224e:	fa00 f402 	lsl.w	r4, r0, r2
1a002252:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00225a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00225e:	ea22 0204 	bic.w	r2, r2, r4
1a002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a002266:	e060      	b.n	1a00232a <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a002268:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00226c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002270:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a002274:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002278:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00227c:	492d      	ldr	r1, [pc, #180]	; (1a002334 <gpioInit+0x198>)
1a00227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002282:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002286:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00228a:	2001      	movs	r0, #1
1a00228c:	fa00 f402 	lsl.w	r4, r0, r2
1a002290:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a002294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002298:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00229c:	ea22 0204 	bic.w	r2, r2, r4
1a0022a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0022a4:	e041      	b.n	1a00232a <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a0022a6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022ae:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0022b2:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0022b6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022ba:	491e      	ldr	r1, [pc, #120]	; (1a002334 <gpioInit+0x198>)
1a0022bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0022c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0022c4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0022c8:	2001      	movs	r0, #1
1a0022ca:	fa00 f402 	lsl.w	r4, r0, r2
1a0022ce:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0022d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0022d6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0022da:	ea22 0204 	bic.w	r2, r2, r4
1a0022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0022e2:	e022      	b.n	1a00232a <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a0022e4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0022e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0022ec:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0022f0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0022f4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0022f8:	490e      	ldr	r1, [pc, #56]	; (1a002334 <gpioInit+0x198>)
1a0022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a0022fe:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a002302:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002306:	b25a      	sxtb	r2, r3
1a002308:	2001      	movs	r0, #1
1a00230a:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00230e:	4a08      	ldr	r2, [pc, #32]	; (1a002330 <gpioInit+0x194>)
1a002310:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002314:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a002318:	4331      	orrs	r1, r6
1a00231a:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00231e:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a002322:	2100      	movs	r1, #0
1a002324:	54d1      	strb	r1, [r2, r3]
1a002326:	e000      	b.n	1a00232a <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a002328:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a00232a:	b004      	add	sp, #16
1a00232c:	bd70      	pop	{r4, r5, r6, pc}
1a00232e:	bf00      	nop
1a002330:	400f4000 	.word	0x400f4000
1a002334:	40086000 	.word	0x40086000

1a002338 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a002338:	b510      	push	{r4, lr}
1a00233a:	b084      	sub	sp, #16
1a00233c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00233e:	2300      	movs	r3, #0
1a002340:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002344:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002348:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00234c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002350:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002354:	ab03      	add	r3, sp, #12
1a002356:	9300      	str	r3, [sp, #0]
1a002358:	f10d 030b 	add.w	r3, sp, #11
1a00235c:	9301      	str	r3, [sp, #4]
1a00235e:	f10d 010f 	add.w	r1, sp, #15
1a002362:	f10d 020e 	add.w	r2, sp, #14
1a002366:	f10d 030d 	add.w	r3, sp, #13
1a00236a:	f7ff ff01 	bl	1a002170 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00236e:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a002372:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002376:	3400      	adds	r4, #0
1a002378:	bf18      	it	ne
1a00237a:	2401      	movne	r4, #1
1a00237c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002380:	4a02      	ldr	r2, [pc, #8]	; (1a00238c <gpioWrite+0x54>)
1a002382:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a002384:	2001      	movs	r0, #1
1a002386:	b004      	add	sp, #16
1a002388:	bd10      	pop	{r4, pc}
1a00238a:	bf00      	nop
1a00238c:	400f4000 	.word	0x400f4000

1a002390 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a002390:	bf30      	wfi
1a002392:	4770      	bx	lr

1a002394 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a002394:	4b01      	ldr	r3, [pc, #4]	; (1a00239c <tickRead+0x8>)
1a002396:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00239a:	4770      	bx	lr
1a00239c:	100005c8 	.word	0x100005c8

1a0023a0 <tickCallbackSet>:

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
   if( tickCallback != NULL ) {
1a0023a0:	b118      	cbz	r0, 1a0023aa <tickCallbackSet+0xa>
      tickHookFunction = tickCallback;
1a0023a2:	4a05      	ldr	r2, [pc, #20]	; (1a0023b8 <tickCallbackSet+0x18>)
1a0023a4:	6010      	str	r0, [r2, #0]
}

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
1a0023a6:	2001      	movs	r0, #1
1a0023a8:	e000      	b.n	1a0023ac <tickCallbackSet+0xc>
   if( tickCallback != NULL ) {
      tickHookFunction = tickCallback;
   } else {
      retVal = FALSE;
1a0023aa:	2000      	movs	r0, #0
   }
   if( tickCallbackParams != NULL ) {
1a0023ac:	b111      	cbz	r1, 1a0023b4 <tickCallbackSet+0x14>
      callBackFuncParams = tickCallbackParams;
1a0023ae:	4b03      	ldr	r3, [pc, #12]	; (1a0023bc <tickCallbackSet+0x1c>)
1a0023b0:	6019      	str	r1, [r3, #0]
1a0023b2:	4770      	bx	lr
   } else {
      retVal &= FALSE;
1a0023b4:	2000      	movs	r0, #0
   }
   return retVal;
}
1a0023b6:	4770      	bx	lr
1a0023b8:	1000059c 	.word	0x1000059c
1a0023bc:	100005a0 	.word	0x100005a0

1a0023c0 <tickPowerSet>:

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0023c0:	b118      	cbz	r0, 1a0023ca <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0023c2:	2207      	movs	r2, #7
1a0023c4:	4b03      	ldr	r3, [pc, #12]	; (1a0023d4 <tickPowerSet+0x14>)
1a0023c6:	601a      	str	r2, [r3, #0]
1a0023c8:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0023ca:	2200      	movs	r2, #0
1a0023cc:	4b01      	ldr	r3, [pc, #4]	; (1a0023d4 <tickPowerSet+0x14>)
1a0023ce:	601a      	str	r2, [r3, #0]
1a0023d0:	4770      	bx	lr
1a0023d2:	bf00      	nop
1a0023d4:	e000e010 	.word	0xe000e010

1a0023d8 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0023d8:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0023da:	ea50 0301 	orrs.w	r3, r0, r1
1a0023de:	d104      	bne.n	1a0023ea <tickInit+0x12>
         tickPowerSet( OFF );
1a0023e0:	2000      	movs	r0, #0
1a0023e2:	f7ff ffed 	bl	1a0023c0 <tickPowerSet>
         ret_val = 0;
1a0023e6:	2000      	movs	r0, #0
1a0023e8:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0023ea:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0023ee:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0023f2:	2b00      	cmp	r3, #0
1a0023f4:	bf08      	it	eq
1a0023f6:	2a32      	cmpeq	r2, #50	; 0x32
1a0023f8:	d222      	bcs.n	1a002440 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0023fa:	4b12      	ldr	r3, [pc, #72]	; (1a002444 <tickInit+0x6c>)
1a0023fc:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a002400:	4b11      	ldr	r3, [pc, #68]	; (1a002448 <tickInit+0x70>)
1a002402:	681c      	ldr	r4, [r3, #0]
1a002404:	fba4 2300 	umull	r2, r3, r4, r0
1a002408:	fb04 3301 	mla	r3, r4, r1, r3
1a00240c:	4610      	mov	r0, r2
1a00240e:	4619      	mov	r1, r3
1a002410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a002414:	2300      	movs	r3, #0
1a002416:	f001 fb1f 	bl	1a003a58 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00241a:	3801      	subs	r0, #1
1a00241c:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a002420:	d209      	bcs.n	1a002436 <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a002422:	4b0a      	ldr	r3, [pc, #40]	; (1a00244c <tickInit+0x74>)
1a002424:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a002426:	21e0      	movs	r1, #224	; 0xe0
1a002428:	4a09      	ldr	r2, [pc, #36]	; (1a002450 <tickInit+0x78>)
1a00242a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a00242e:	2200      	movs	r2, #0
1a002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a002432:	2207      	movs	r2, #7
1a002434:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a002436:	2001      	movs	r0, #1
1a002438:	f7ff ffc2 	bl	1a0023c0 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a00243c:	2001      	movs	r0, #1
1a00243e:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a002440:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a002442:	bd10      	pop	{r4, pc}
1a002444:	100005d0 	.word	0x100005d0
1a002448:	100005d8 	.word	0x100005d8
1a00244c:	e000e010 	.word	0xe000e010
1a002450:	e000ed00 	.word	0xe000ed00

1a002454 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a002454:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a002456:	4908      	ldr	r1, [pc, #32]	; (1a002478 <SysTick_Handler+0x24>)
1a002458:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00245c:	3201      	adds	r2, #1
1a00245e:	f143 0300 	adc.w	r3, r3, #0
1a002462:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a002466:	4b05      	ldr	r3, [pc, #20]	; (1a00247c <SysTick_Handler+0x28>)
1a002468:	681b      	ldr	r3, [r3, #0]
1a00246a:	b123      	cbz	r3, 1a002476 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00246c:	4b03      	ldr	r3, [pc, #12]	; (1a00247c <SysTick_Handler+0x28>)
1a00246e:	681b      	ldr	r3, [r3, #0]
1a002470:	4a03      	ldr	r2, [pc, #12]	; (1a002480 <SysTick_Handler+0x2c>)
1a002472:	6810      	ldr	r0, [r2, #0]
1a002474:	4798      	blx	r3
1a002476:	bd08      	pop	{r3, pc}
1a002478:	100005c8 	.word	0x100005c8
1a00247c:	1000059c 	.word	0x1000059c
1a002480:	100005a0 	.word	0x100005a0

1a002484 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a002484:	b538      	push	{r3, r4, r5, lr}
1a002486:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a002488:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00248c:	009b      	lsls	r3, r3, #2
1a00248e:	4a22      	ldr	r2, [pc, #136]	; (1a002518 <uartProcessIRQ+0x94>)
1a002490:	58d3      	ldr	r3, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002492:	695d      	ldr	r5, [r3, #20]
1a002494:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a002496:	f015 0f01 	tst.w	r5, #1
1a00249a:	d019      	beq.n	1a0024d0 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00249c:	b930      	cbnz	r0, 1a0024ac <uartProcessIRQ+0x28>
1a00249e:	4b1f      	ldr	r3, [pc, #124]	; (1a00251c <uartProcessIRQ+0x98>)
1a0024a0:	681b      	ldr	r3, [r3, #0]
1a0024a2:	b11b      	cbz	r3, 1a0024ac <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0024a4:	4b1d      	ldr	r3, [pc, #116]	; (1a00251c <uartProcessIRQ+0x98>)
1a0024a6:	681b      	ldr	r3, [r3, #0]
1a0024a8:	2000      	movs	r0, #0
1a0024aa:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0024ac:	2c03      	cmp	r4, #3
1a0024ae:	d106      	bne.n	1a0024be <uartProcessIRQ+0x3a>
1a0024b0:	4b1b      	ldr	r3, [pc, #108]	; (1a002520 <uartProcessIRQ+0x9c>)
1a0024b2:	681b      	ldr	r3, [r3, #0]
1a0024b4:	b11b      	cbz	r3, 1a0024be <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0024b6:	4b1a      	ldr	r3, [pc, #104]	; (1a002520 <uartProcessIRQ+0x9c>)
1a0024b8:	681b      	ldr	r3, [r3, #0]
1a0024ba:	2000      	movs	r0, #0
1a0024bc:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0024be:	2c05      	cmp	r4, #5
1a0024c0:	d106      	bne.n	1a0024d0 <uartProcessIRQ+0x4c>
1a0024c2:	4b18      	ldr	r3, [pc, #96]	; (1a002524 <uartProcessIRQ+0xa0>)
1a0024c4:	681b      	ldr	r3, [r3, #0]
1a0024c6:	b11b      	cbz	r3, 1a0024d0 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0024c8:	4b16      	ldr	r3, [pc, #88]	; (1a002524 <uartProcessIRQ+0xa0>)
1a0024ca:	681b      	ldr	r3, [r3, #0]
1a0024cc:	2000      	movs	r0, #0
1a0024ce:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0024d0:	f015 0f20 	tst.w	r5, #32
1a0024d4:	d01e      	beq.n	1a002514 <uartProcessIRQ+0x90>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0024d6:	4b14      	ldr	r3, [pc, #80]	; (1a002528 <uartProcessIRQ+0xa4>)
1a0024d8:	685b      	ldr	r3, [r3, #4]
1a0024da:	f013 0f02 	tst.w	r3, #2
1a0024de:	d019      	beq.n	1a002514 <uartProcessIRQ+0x90>
       ( Chip_UART_GetIntsEnabled(LPC_USART3) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0024e0:	b934      	cbnz	r4, 1a0024f0 <uartProcessIRQ+0x6c>
1a0024e2:	4b12      	ldr	r3, [pc, #72]	; (1a00252c <uartProcessIRQ+0xa8>)
1a0024e4:	681b      	ldr	r3, [r3, #0]
1a0024e6:	b11b      	cbz	r3, 1a0024f0 <uartProcessIRQ+0x6c>
         (*txIsrCallbackUART0)(0);
1a0024e8:	4b10      	ldr	r3, [pc, #64]	; (1a00252c <uartProcessIRQ+0xa8>)
1a0024ea:	681b      	ldr	r3, [r3, #0]
1a0024ec:	2000      	movs	r0, #0
1a0024ee:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0024f0:	2c03      	cmp	r4, #3
1a0024f2:	d106      	bne.n	1a002502 <uartProcessIRQ+0x7e>
1a0024f4:	4b0e      	ldr	r3, [pc, #56]	; (1a002530 <uartProcessIRQ+0xac>)
1a0024f6:	681b      	ldr	r3, [r3, #0]
1a0024f8:	b11b      	cbz	r3, 1a002502 <uartProcessIRQ+0x7e>
         (*txIsrCallbackUART2)(0);
1a0024fa:	4b0d      	ldr	r3, [pc, #52]	; (1a002530 <uartProcessIRQ+0xac>)
1a0024fc:	681b      	ldr	r3, [r3, #0]
1a0024fe:	2000      	movs	r0, #0
1a002500:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002502:	2c05      	cmp	r4, #5
1a002504:	d106      	bne.n	1a002514 <uartProcessIRQ+0x90>
1a002506:	4b0b      	ldr	r3, [pc, #44]	; (1a002534 <uartProcessIRQ+0xb0>)
1a002508:	681b      	ldr	r3, [r3, #0]
1a00250a:	b11b      	cbz	r3, 1a002514 <uartProcessIRQ+0x90>
         (*txIsrCallbackUART3)(0);
1a00250c:	4b09      	ldr	r3, [pc, #36]	; (1a002534 <uartProcessIRQ+0xb0>)
1a00250e:	681b      	ldr	r3, [r3, #0]
1a002510:	2000      	movs	r0, #0
1a002512:	4798      	blx	r3
1a002514:	bd38      	pop	{r3, r4, r5, pc}
1a002516:	bf00      	nop
1a002518:	1a004258 	.word	0x1a004258
1a00251c:	100005a4 	.word	0x100005a4
1a002520:	100005b4 	.word	0x100005b4
1a002524:	100005b8 	.word	0x100005b8
1a002528:	400c2000 	.word	0x400c2000
1a00252c:	100005a8 	.word	0x100005a8
1a002530:	100005ac 	.word	0x100005ac
1a002534:	100005b0 	.word	0x100005b0

1a002538 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002538:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00253a:	2003      	movs	r0, #3
1a00253c:	f7ff ffa2 	bl	1a002484 <uartProcessIRQ>
1a002540:	bd08      	pop	{r3, pc}
1a002542:	bf00      	nop

1a002544 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a002544:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a002546:	2005      	movs	r0, #5
1a002548:	f7ff ff9c 	bl	1a002484 <uartProcessIRQ>
1a00254c:	bd08      	pop	{r3, pc}
1a00254e:	bf00      	nop

1a002550 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a002550:	b9e8      	cbnz	r0, 1a00258e <spiInit+0x3e>
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{
1a002552:	b510      	push	{r4, lr}
1a002554:	4b0f      	ldr	r3, [pc, #60]	; (1a002594 <spiInit+0x44>)
1a002556:	2200      	movs	r2, #0
1a002558:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a00255c:	21c5      	movs	r1, #197	; 0xc5
1a00255e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a002562:	2105      	movs	r1, #5
1a002564:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a002568:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00256c:	490a      	ldr	r1, [pc, #40]	; (1a002598 <spiInit+0x48>)
1a00256e:	f242 020c 	movw	r2, #8204	; 0x200c
1a002572:	588b      	ldr	r3, [r1, r2]
1a002574:	f043 0301 	orr.w	r3, r3, #1
1a002578:	508b      	str	r3, [r1, r2]

      Chip_SCU_PinMuxSet(0x6, 1, (SCU_MODE_PULLUP | SCU_MODE_FUNC0)); // CS1 configured as GPIO
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 3, 0);

      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
1a00257a:	4c08      	ldr	r4, [pc, #32]	; (1a00259c <spiInit+0x4c>)
1a00257c:	4620      	mov	r0, r4
1a00257e:	f001 f9f1 	bl	1a003964 <Chip_SSP_Init>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002582:	6863      	ldr	r3, [r4, #4]
1a002584:	f043 0302 	orr.w	r3, r3, #2
1a002588:	6063      	str	r3, [r4, #4]
/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;
1a00258a:	2001      	movs	r0, #1
1a00258c:	bd10      	pop	{r4, pc}
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a00258e:	2000      	movs	r0, #0
1a002590:	4770      	bx	lr
1a002592:	bf00      	nop
1a002594:	40086000 	.word	0x40086000
1a002598:	400f4000 	.word	0x400f4000
1a00259c:	400c5000 	.word	0x400c5000

1a0025a0 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a0025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0025a4:	4680      	mov	r8, r0
1a0025a6:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0025a8:	f7ff fef4 	bl	1a002394 <tickRead>
1a0025ac:	4606      	mov	r6, r0
1a0025ae:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a0025b0:	f7ff fef0 	bl	1a002394 <tickRead>
1a0025b4:	1b84      	subs	r4, r0, r6
1a0025b6:	eb61 0507 	sbc.w	r5, r1, r7
1a0025ba:	4640      	mov	r0, r8
1a0025bc:	4649      	mov	r1, r9
1a0025be:	4b05      	ldr	r3, [pc, #20]	; (1a0025d4 <delay+0x34>)
1a0025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0025c4:	f001 fa48 	bl	1a003a58 <__aeabi_uldivmod>
1a0025c8:	428d      	cmp	r5, r1
1a0025ca:	bf08      	it	eq
1a0025cc:	4284      	cmpeq	r4, r0
1a0025ce:	d3ef      	bcc.n	1a0025b0 <delay+0x10>
}
1a0025d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0025d4:	100005d0 	.word	0x100005d0

1a0025d8 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0025d8:	b510      	push	{r4, lr}
1a0025da:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a0025dc:	4610      	mov	r0, r2
1a0025de:	4619      	mov	r1, r3
1a0025e0:	4b04      	ldr	r3, [pc, #16]	; (1a0025f4 <delayInit+0x1c>)
1a0025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0025e6:	f001 fa37 	bl	1a003a58 <__aeabi_uldivmod>
1a0025ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0025ee:	2300      	movs	r3, #0
1a0025f0:	7423      	strb	r3, [r4, #16]
1a0025f2:	bd10      	pop	{r4, pc}
1a0025f4:	100005d0 	.word	0x100005d0

1a0025f8 <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a0025f8:	b510      	push	{r4, lr}
1a0025fa:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0025fc:	7c03      	ldrb	r3, [r0, #16]
1a0025fe:	b93b      	cbnz	r3, 1a002610 <delayRead+0x18>
      delay->startTime = tickRead();
1a002600:	f7ff fec8 	bl	1a002394 <tickRead>
1a002604:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002608:	2301      	movs	r3, #1
1a00260a:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a00260c:	2000      	movs	r0, #0
1a00260e:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a002610:	f7ff fec0 	bl	1a002394 <tickRead>
1a002614:	e9d4 2300 	ldrd	r2, r3, [r4]
1a002618:	1a80      	subs	r0, r0, r2
1a00261a:	eb61 0103 	sbc.w	r1, r1, r3
1a00261e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a002622:	4299      	cmp	r1, r3
1a002624:	bf08      	it	eq
1a002626:	4290      	cmpeq	r0, r2
1a002628:	d303      	bcc.n	1a002632 <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a00262a:	2300      	movs	r3, #0
1a00262c:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a00262e:	2001      	movs	r0, #1
1a002630:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a002632:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a002634:	bd10      	pop	{r4, pc}
1a002636:	bf00      	nop

1a002638 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a002638:	e7fe      	b.n	1a002638 <errorOcurred>
1a00263a:	bf00      	nop

1a00263c <doNothing>:
}

static void doNothing( void* ptr )
{
1a00263c:	4770      	bx	lr
1a00263e:	bf00      	nop

1a002640 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a002640:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002642:	2400      	movs	r4, #0
1a002644:	e013      	b.n	1a00266e <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002646:	4b0b      	ldr	r3, [pc, #44]	; (1a002674 <TIMER0_IRQHandler+0x34>)
1a002648:	681a      	ldr	r2, [r3, #0]
1a00264a:	f004 010f 	and.w	r1, r4, #15
1a00264e:	2301      	movs	r3, #1
1a002650:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a002652:	421a      	tst	r2, r3
1a002654:	d009      	beq.n	1a00266a <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002656:	4b08      	ldr	r3, [pc, #32]	; (1a002678 <TIMER0_IRQHandler+0x38>)
1a002658:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00265c:	2000      	movs	r0, #0
1a00265e:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002660:	b262      	sxtb	r2, r4
1a002662:	2301      	movs	r3, #1
1a002664:	4093      	lsls	r3, r2
1a002666:	4a03      	ldr	r2, [pc, #12]	; (1a002674 <TIMER0_IRQHandler+0x34>)
1a002668:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00266a:	3401      	adds	r4, #1
1a00266c:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00266e:	2c03      	cmp	r4, #3
1a002670:	d9e9      	bls.n	1a002646 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a002672:	bd10      	pop	{r4, pc}
1a002674:	40084000 	.word	0x40084000
1a002678:	10000054 	.word	0x10000054

1a00267c <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a00267c:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00267e:	2400      	movs	r4, #0
1a002680:	e014      	b.n	1a0026ac <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002682:	4b0c      	ldr	r3, [pc, #48]	; (1a0026b4 <TIMER1_IRQHandler+0x38>)
1a002684:	681a      	ldr	r2, [r3, #0]
1a002686:	f004 010f 	and.w	r1, r4, #15
1a00268a:	2301      	movs	r3, #1
1a00268c:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00268e:	421a      	tst	r2, r3
1a002690:	d00a      	beq.n	1a0026a8 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002692:	1d23      	adds	r3, r4, #4
1a002694:	4a08      	ldr	r2, [pc, #32]	; (1a0026b8 <TIMER1_IRQHandler+0x3c>)
1a002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00269a:	2000      	movs	r0, #0
1a00269c:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00269e:	b262      	sxtb	r2, r4
1a0026a0:	2301      	movs	r3, #1
1a0026a2:	4093      	lsls	r3, r2
1a0026a4:	4a03      	ldr	r2, [pc, #12]	; (1a0026b4 <TIMER1_IRQHandler+0x38>)
1a0026a6:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0026a8:	3401      	adds	r4, #1
1a0026aa:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0026ac:	2c03      	cmp	r4, #3
1a0026ae:	d9e8      	bls.n	1a002682 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0026b0:	bd10      	pop	{r4, pc}
1a0026b2:	bf00      	nop
1a0026b4:	40085000 	.word	0x40085000
1a0026b8:	10000054 	.word	0x10000054

1a0026bc <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0026bc:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0026be:	2400      	movs	r4, #0
1a0026c0:	e015      	b.n	1a0026ee <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0026c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0026f4 <TIMER2_IRQHandler+0x38>)
1a0026c4:	681a      	ldr	r2, [r3, #0]
1a0026c6:	f004 010f 	and.w	r1, r4, #15
1a0026ca:	2301      	movs	r3, #1
1a0026cc:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0026ce:	421a      	tst	r2, r3
1a0026d0:	d00b      	beq.n	1a0026ea <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0026d2:	f104 0308 	add.w	r3, r4, #8
1a0026d6:	4a08      	ldr	r2, [pc, #32]	; (1a0026f8 <TIMER2_IRQHandler+0x3c>)
1a0026d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0026dc:	2000      	movs	r0, #0
1a0026de:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0026e0:	b262      	sxtb	r2, r4
1a0026e2:	2301      	movs	r3, #1
1a0026e4:	4093      	lsls	r3, r2
1a0026e6:	4a03      	ldr	r2, [pc, #12]	; (1a0026f4 <TIMER2_IRQHandler+0x38>)
1a0026e8:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0026ea:	3401      	adds	r4, #1
1a0026ec:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0026ee:	2c03      	cmp	r4, #3
1a0026f0:	d9e7      	bls.n	1a0026c2 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0026f2:	bd10      	pop	{r4, pc}
1a0026f4:	400c3000 	.word	0x400c3000
1a0026f8:	10000054 	.word	0x10000054

1a0026fc <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0026fc:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0026fe:	2400      	movs	r4, #0
1a002700:	e015      	b.n	1a00272e <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a002702:	4b0c      	ldr	r3, [pc, #48]	; (1a002734 <TIMER3_IRQHandler+0x38>)
1a002704:	681a      	ldr	r2, [r3, #0]
1a002706:	f004 010f 	and.w	r1, r4, #15
1a00270a:	2301      	movs	r3, #1
1a00270c:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a00270e:	421a      	tst	r2, r3
1a002710:	d00b      	beq.n	1a00272a <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a002712:	f104 030c 	add.w	r3, r4, #12
1a002716:	4a08      	ldr	r2, [pc, #32]	; (1a002738 <TIMER3_IRQHandler+0x3c>)
1a002718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00271c:	2000      	movs	r0, #0
1a00271e:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002720:	b262      	sxtb	r2, r4
1a002722:	2301      	movs	r3, #1
1a002724:	4093      	lsls	r3, r2
1a002726:	4a03      	ldr	r2, [pc, #12]	; (1a002734 <TIMER3_IRQHandler+0x38>)
1a002728:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00272a:	3401      	adds	r4, #1
1a00272c:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00272e:	2c03      	cmp	r4, #3
1a002730:	d9e7      	bls.n	1a002702 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a002732:	bd10      	pop	{r4, pc}
1a002734:	400c4000 	.word	0x400c4000
1a002738:	10000054 	.word	0x10000054

1a00273c <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a00273c:	b510      	push	{r4, lr}
1a00273e:	b082      	sub	sp, #8

   switch(config) {
1a002740:	b110      	cbz	r0, 1a002748 <adcInit+0xc>
1a002742:	2801      	cmp	r0, #1
1a002744:	d037      	beq.n	1a0027b6 <adcInit+0x7a>
1a002746:	e039      	b.n	1a0027bc <adcInit+0x80>

      /* Initialized to default values:
      *   - Sample rate:ADC_MAX_SAMPLE_RATE=400KHz
      *   - resolution: ADC_10BITS
      *   - burst mode: DISABLE */
      Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a002748:	4c1d      	ldr	r4, [pc, #116]	; (1a0027c0 <adcInit+0x84>)
1a00274a:	4620      	mov	r0, r4
1a00274c:	4669      	mov	r1, sp
1a00274e:	f000 fb01 	bl	1a002d54 <Chip_ADC_Init>
      /* Disable burst mode */
      Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a002752:	4620      	mov	r0, r4
1a002754:	2100      	movs	r1, #0
1a002756:	f000 fb9d 	bl	1a002e94 <Chip_ADC_SetBurstCmd>
      /* Set sample rate to 200KHz */
      Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a00275a:	4620      	mov	r0, r4
1a00275c:	4669      	mov	r1, sp
1a00275e:	4a19      	ldr	r2, [pc, #100]	; (1a0027c4 <adcInit+0x88>)
1a002760:	f000 fb64 	bl	1a002e2c <Chip_ADC_SetSampleRate>
      /* Disable all channels */
      Chip_ADC_EnableChannel( LPC_ADC0,ADC_CH1, DISABLE );
1a002764:	4620      	mov	r0, r4
1a002766:	2101      	movs	r1, #1
1a002768:	2200      	movs	r2, #0
1a00276a:	f000 fb7f 	bl	1a002e6c <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a00276e:	4620      	mov	r0, r4
1a002770:	2101      	movs	r1, #1
1a002772:	2200      	movs	r2, #0
1a002774:	f000 fb3a 	bl	1a002dec <Chip_ADC_Int_SetChannelCmd>

      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a002778:	4620      	mov	r0, r4
1a00277a:	2102      	movs	r1, #2
1a00277c:	2200      	movs	r2, #0
1a00277e:	f000 fb75 	bl	1a002e6c <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a002782:	4620      	mov	r0, r4
1a002784:	2102      	movs	r1, #2
1a002786:	2200      	movs	r2, #0
1a002788:	f000 fb30 	bl	1a002dec <Chip_ADC_Int_SetChannelCmd>

      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a00278c:	4620      	mov	r0, r4
1a00278e:	2103      	movs	r1, #3
1a002790:	2200      	movs	r2, #0
1a002792:	f000 fb6b 	bl	1a002e6c <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a002796:	4620      	mov	r0, r4
1a002798:	2103      	movs	r1, #3
1a00279a:	2200      	movs	r2, #0
1a00279c:	f000 fb26 	bl	1a002dec <Chip_ADC_Int_SetChannelCmd>

      Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a0027a0:	4620      	mov	r0, r4
1a0027a2:	2104      	movs	r1, #4
1a0027a4:	2200      	movs	r2, #0
1a0027a6:	f000 fb61 	bl	1a002e6c <Chip_ADC_EnableChannel>
      Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a0027aa:	4620      	mov	r0, r4
1a0027ac:	2104      	movs	r1, #4
1a0027ae:	2200      	movs	r2, #0
1a0027b0:	f000 fb1c 	bl	1a002dec <Chip_ADC_Int_SetChannelCmd>

      // Chip_SCU_ADC_Channel_Config( 0, 4 ); // Pablo Gomez
   }
   break;
1a0027b4:	e002      	b.n	1a0027bc <adcInit+0x80>

   case ADC_DISABLE:
      /* Disable ADC peripheral */
      Chip_ADC_DeInit( LPC_ADC0 );
1a0027b6:	4802      	ldr	r0, [pc, #8]	; (1a0027c0 <adcInit+0x84>)
1a0027b8:	f000 faec 	bl	1a002d94 <Chip_ADC_DeInit>
      break;
   }

}
1a0027bc:	b002      	add	sp, #8
1a0027be:	bd10      	pop	{r4, pc}
1a0027c0:	400e3000 	.word	0x400e3000
1a0027c4:	00030d40 	.word	0x00030d40

1a0027c8 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a0027c8:	b570      	push	{r4, r5, r6, lr}
1a0027ca:	b082      	sub	sp, #8

   uint8_t lpcAdcChannel = 66 - analogInput;
1a0027cc:	f1c0 0042 	rsb	r0, r0, #66	; 0x42
1a0027d0:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a0027d2:	2500      	movs	r5, #0
1a0027d4:	f8ad 5006 	strh.w	r5, [sp, #6]

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a0027d8:	4e10      	ldr	r6, [pc, #64]	; (1a00281c <adcRead+0x54>)
1a0027da:	4630      	mov	r0, r6
1a0027dc:	4621      	mov	r1, r4
1a0027de:	2201      	movs	r2, #1
1a0027e0:	f000 fb44 	bl	1a002e6c <Chip_ADC_EnableChannel>
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a0027e4:	4630      	mov	r0, r6
1a0027e6:	2101      	movs	r1, #1
1a0027e8:	462a      	mov	r2, r5
1a0027ea:	f000 fb0f 	bl	1a002e0c <Chip_ADC_SetStartMode>

   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a0027ee:	480b      	ldr	r0, [pc, #44]	; (1a00281c <adcRead+0x54>)
1a0027f0:	4621      	mov	r1, r4
1a0027f2:	2200      	movs	r2, #0
1a0027f4:	f000 fade 	bl	1a002db4 <Chip_ADC_ReadStatus>
   uint16_t analogValue = 0;

   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);

   while(
1a0027f8:	2801      	cmp	r0, #1
1a0027fa:	d1f8      	bne.n	1a0027ee <adcRead+0x26>
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
   );
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a0027fc:	4d07      	ldr	r5, [pc, #28]	; (1a00281c <adcRead+0x54>)
1a0027fe:	4628      	mov	r0, r5
1a002800:	4621      	mov	r1, r4
1a002802:	f10d 0206 	add.w	r2, sp, #6
1a002806:	f000 fad1 	bl	1a002dac <Chip_ADC_ReadValue>

   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a00280a:	4628      	mov	r0, r5
1a00280c:	4621      	mov	r1, r4
1a00280e:	2200      	movs	r2, #0
1a002810:	f000 fb2c 	bl	1a002e6c <Chip_ADC_EnableChannel>

   return analogValue;
}
1a002814:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a002818:	b002      	add	sp, #8
1a00281a:	bd70      	pop	{r4, r5, r6, pc}
1a00281c:	400e3000 	.word	0x400e3000

1a002820 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002820:	b508      	push	{r3, lr}

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a002822:	f000 fb49 	bl	1a002eb8 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a002826:	4b3b      	ldr	r3, [pc, #236]	; (1a002914 <boardInit+0xf4>)
1a002828:	6818      	ldr	r0, [r3, #0]
1a00282a:	f7ff fbb7 	bl	1a001f9c <cyclesCounterInit>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00282e:	f000 f927 	bl	1a002a80 <Board_Init>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002832:	2001      	movs	r0, #1
1a002834:	2100      	movs	r1, #0
1a002836:	f7ff fdcf 	bl	1a0023d8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00283a:	2000      	movs	r0, #0
1a00283c:	2105      	movs	r1, #5
1a00283e:	f7ff fcad 	bl	1a00219c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a002842:	2024      	movs	r0, #36	; 0x24
1a002844:	2100      	movs	r1, #0
1a002846:	f7ff fca9 	bl	1a00219c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00284a:	2025      	movs	r0, #37	; 0x25
1a00284c:	2100      	movs	r1, #0
1a00284e:	f7ff fca5 	bl	1a00219c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a002852:	2026      	movs	r0, #38	; 0x26
1a002854:	2100      	movs	r1, #0
1a002856:	f7ff fca1 	bl	1a00219c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00285a:	2027      	movs	r0, #39	; 0x27
1a00285c:	2100      	movs	r1, #0
1a00285e:	f7ff fc9d 	bl	1a00219c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002862:	2028      	movs	r0, #40	; 0x28
1a002864:	2101      	movs	r1, #1
1a002866:	f7ff fc99 	bl	1a00219c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00286a:	2029      	movs	r0, #41	; 0x29
1a00286c:	2101      	movs	r1, #1
1a00286e:	f7ff fc95 	bl	1a00219c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002872:	202a      	movs	r0, #42	; 0x2a
1a002874:	2101      	movs	r1, #1
1a002876:	f7ff fc91 	bl	1a00219c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00287a:	202b      	movs	r0, #43	; 0x2b
1a00287c:	2101      	movs	r1, #1
1a00287e:	f7ff fc8d 	bl	1a00219c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002882:	202c      	movs	r0, #44	; 0x2c
1a002884:	2101      	movs	r1, #1
1a002886:	f7ff fc89 	bl	1a00219c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a00288a:	202d      	movs	r0, #45	; 0x2d
1a00288c:	2101      	movs	r1, #1
1a00288e:	f7ff fc85 	bl	1a00219c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002892:	202e      	movs	r0, #46	; 0x2e
1a002894:	2100      	movs	r1, #0
1a002896:	f7ff fc81 	bl	1a00219c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a00289a:	202f      	movs	r0, #47	; 0x2f
1a00289c:	2100      	movs	r1, #0
1a00289e:	f7ff fc7d 	bl	1a00219c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0028a2:	2030      	movs	r0, #48	; 0x30
1a0028a4:	2100      	movs	r1, #0
1a0028a6:	f7ff fc79 	bl	1a00219c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0028aa:	2031      	movs	r0, #49	; 0x31
1a0028ac:	2100      	movs	r1, #0
1a0028ae:	f7ff fc75 	bl	1a00219c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0028b2:	2032      	movs	r0, #50	; 0x32
1a0028b4:	2100      	movs	r1, #0
1a0028b6:	f7ff fc71 	bl	1a00219c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0028ba:	2033      	movs	r0, #51	; 0x33
1a0028bc:	2100      	movs	r1, #0
1a0028be:	f7ff fc6d 	bl	1a00219c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0028c2:	2034      	movs	r0, #52	; 0x34
1a0028c4:	2100      	movs	r1, #0
1a0028c6:	f7ff fc69 	bl	1a00219c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0028ca:	2035      	movs	r0, #53	; 0x35
1a0028cc:	2100      	movs	r1, #0
1a0028ce:	f7ff fc65 	bl	1a00219c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0028d2:	2036      	movs	r0, #54	; 0x36
1a0028d4:	2101      	movs	r1, #1
1a0028d6:	f7ff fc61 	bl	1a00219c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a0028da:	2037      	movs	r0, #55	; 0x37
1a0028dc:	2101      	movs	r1, #1
1a0028de:	f7ff fc5d 	bl	1a00219c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a0028e2:	2038      	movs	r0, #56	; 0x38
1a0028e4:	2101      	movs	r1, #1
1a0028e6:	f7ff fc59 	bl	1a00219c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0028ea:	2039      	movs	r0, #57	; 0x39
1a0028ec:	2101      	movs	r1, #1
1a0028ee:	f7ff fc55 	bl	1a00219c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0028f2:	203a      	movs	r0, #58	; 0x3a
1a0028f4:	2101      	movs	r1, #1
1a0028f6:	f7ff fc51 	bl	1a00219c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0028fa:	203b      	movs	r0, #59	; 0x3b
1a0028fc:	2101      	movs	r1, #1
1a0028fe:	f7ff fc4d 	bl	1a00219c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002902:	203c      	movs	r0, #60	; 0x3c
1a002904:	2101      	movs	r1, #1
1a002906:	f7ff fc49 	bl	1a00219c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00290a:	203d      	movs	r0, #61	; 0x3d
1a00290c:	2101      	movs	r1, #1
1a00290e:	f7ff fc45 	bl	1a00219c <gpioInit>
1a002912:	bd08      	pop	{r3, pc}
1a002914:	100005d8 	.word	0x100005d8

1a002918 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a002918:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00291a:	2200      	movs	r2, #0
1a00291c:	e014      	b.n	1a002948 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a00291e:	4b0c      	ldr	r3, [pc, #48]	; (1a002950 <Board_LED_Init+0x38>)
1a002920:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a002924:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a002928:	7859      	ldrb	r1, [r3, #1]
1a00292a:	480a      	ldr	r0, [pc, #40]	; (1a002954 <Board_LED_Init+0x3c>)
1a00292c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a002930:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a002934:	2301      	movs	r3, #1
1a002936:	408b      	lsls	r3, r1
1a002938:	4333      	orrs	r3, r6
1a00293a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00293e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a002942:	2300      	movs	r3, #0
1a002944:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002946:	3201      	adds	r2, #1
1a002948:	2a05      	cmp	r2, #5
1a00294a:	d9e8      	bls.n	1a00291e <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a00294c:	bc70      	pop	{r4, r5, r6}
1a00294e:	4770      	bx	lr
1a002950:	1a0042c4 	.word	0x1a0042c4
1a002954:	400f4000 	.word	0x400f4000

1a002958 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a002958:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00295a:	2300      	movs	r3, #0
1a00295c:	e011      	b.n	1a002982 <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00295e:	490b      	ldr	r1, [pc, #44]	; (1a00298c <Board_TEC_Init+0x34>)
1a002960:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002964:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002968:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00296a:	4c09      	ldr	r4, [pc, #36]	; (1a002990 <Board_TEC_Init+0x38>)
1a00296c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002970:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002974:	2101      	movs	r1, #1
1a002976:	40a9      	lsls	r1, r5
1a002978:	ea20 0101 	bic.w	r1, r0, r1
1a00297c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002980:	3301      	adds	r3, #1
1a002982:	2b03      	cmp	r3, #3
1a002984:	d9eb      	bls.n	1a00295e <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002986:	bc30      	pop	{r4, r5}
1a002988:	4770      	bx	lr
1a00298a:	bf00      	nop
1a00298c:	1a0042bc 	.word	0x1a0042bc
1a002990:	400f4000 	.word	0x400f4000

1a002994 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a002994:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002996:	2300      	movs	r3, #0
1a002998:	e011      	b.n	1a0029be <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00299a:	490b      	ldr	r1, [pc, #44]	; (1a0029c8 <Board_GPIO_Init+0x34>)
1a00299c:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0029a0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0029a4:	784d      	ldrb	r5, [r1, #1]
1a0029a6:	4c09      	ldr	r4, [pc, #36]	; (1a0029cc <Board_GPIO_Init+0x38>)
1a0029a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0029ac:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a0029b0:	2101      	movs	r1, #1
1a0029b2:	40a9      	lsls	r1, r5
1a0029b4:	ea20 0101 	bic.w	r1, r0, r1
1a0029b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0029bc:	3301      	adds	r3, #1
1a0029be:	2b08      	cmp	r3, #8
1a0029c0:	d9eb      	bls.n	1a00299a <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a0029c2:	bc30      	pop	{r4, r5}
1a0029c4:	4770      	bx	lr
1a0029c6:	bf00      	nop
1a0029c8:	1a0042a0 	.word	0x1a0042a0
1a0029cc:	400f4000 	.word	0x400f4000

1a0029d0 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a0029d0:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a0029d2:	4c0b      	ldr	r4, [pc, #44]	; (1a002a00 <Board_SPI_Init+0x30>)
1a0029d4:	4620      	mov	r0, r4
1a0029d6:	f000 ffc5 	bl	1a003964 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0029da:	6863      	ldr	r3, [r4, #4]
1a0029dc:	f023 0304 	bic.w	r3, r3, #4
1a0029e0:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0029e2:	6823      	ldr	r3, [r4, #0]
1a0029e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0029e8:	f043 0307 	orr.w	r3, r3, #7
1a0029ec:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0029ee:	4620      	mov	r0, r4
1a0029f0:	4904      	ldr	r1, [pc, #16]	; (1a002a04 <Board_SPI_Init+0x34>)
1a0029f2:	f000 ff97 	bl	1a003924 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0029f6:	6863      	ldr	r3, [r4, #4]
1a0029f8:	f043 0302 	orr.w	r3, r3, #2
1a0029fc:	6063      	str	r3, [r4, #4]
1a0029fe:	bd10      	pop	{r4, pc}
1a002a00:	400c5000 	.word	0x400c5000
1a002a04:	000186a0 	.word	0x000186a0

1a002a08 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a002a08:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a002a0a:	2000      	movs	r0, #0
1a002a0c:	f000 fea2 	bl	1a003754 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002a10:	f640 0208 	movw	r2, #2056	; 0x808
1a002a14:	4b03      	ldr	r3, [pc, #12]	; (1a002a24 <Board_I2C_Init+0x1c>)
1a002a16:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002a1a:	2000      	movs	r0, #0
1a002a1c:	4902      	ldr	r1, [pc, #8]	; (1a002a28 <Board_I2C_Init+0x20>)
1a002a1e:	f000 feab 	bl	1a003778 <Chip_I2C_SetClockRate>
1a002a22:	bd08      	pop	{r3, pc}
1a002a24:	40086000 	.word	0x40086000
1a002a28:	000f4240 	.word	0x000f4240

1a002a2c <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002a2c:	b510      	push	{r4, lr}
1a002a2e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a002a30:	4c08      	ldr	r4, [pc, #32]	; (1a002a54 <Board_ADC_Init+0x28>)
1a002a32:	4620      	mov	r0, r4
1a002a34:	4669      	mov	r1, sp
1a002a36:	f000 f98d 	bl	1a002d54 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002a3a:	4620      	mov	r0, r4
1a002a3c:	4669      	mov	r1, sp
1a002a3e:	4a06      	ldr	r2, [pc, #24]	; (1a002a58 <Board_ADC_Init+0x2c>)
1a002a40:	f000 f9f4 	bl	1a002e2c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002a44:	4620      	mov	r0, r4
1a002a46:	4669      	mov	r1, sp
1a002a48:	2200      	movs	r2, #0
1a002a4a:	f000 fa09 	bl	1a002e60 <Chip_ADC_SetResolution>
}
1a002a4e:	b002      	add	sp, #8
1a002a50:	bd10      	pop	{r4, pc}
1a002a52:	bf00      	nop
1a002a54:	400e3000 	.word	0x400e3000
1a002a58:	00061a80 	.word	0x00061a80

1a002a5c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002a5c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002a5e:	4c07      	ldr	r4, [pc, #28]	; (1a002a7c <Board_Debug_Init+0x20>)
1a002a60:	4620      	mov	r0, r4
1a002a62:	f000 f8a5 	bl	1a002bb0 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002a66:	4620      	mov	r0, r4
1a002a68:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002a6c:	f000 f8ca 	bl	1a002c04 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002a70:	2303      	movs	r3, #3
1a002a72:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002a74:	2301      	movs	r3, #1
1a002a76:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002a78:	bd10      	pop	{r4, pc}
1a002a7a:	bf00      	nop
1a002a7c:	400c1000 	.word	0x400c1000

1a002a80 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002a80:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002a82:	f7ff ffeb 	bl	1a002a5c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002a86:	480b      	ldr	r0, [pc, #44]	; (1a002ab4 <Board_Init+0x34>)
1a002a88:	f000 fdaa 	bl	1a0035e0 <Chip_GPIO_Init>

   Board_LED_Init();
1a002a8c:	f7ff ff44 	bl	1a002918 <Board_LED_Init>
   Board_TEC_Init();
1a002a90:	f7ff ff62 	bl	1a002958 <Board_TEC_Init>
   Board_SPI_Init();
1a002a94:	f7ff ff9c 	bl	1a0029d0 <Board_SPI_Init>
   Board_GPIO_Init();
1a002a98:	f7ff ff7c 	bl	1a002994 <Board_GPIO_Init>
   Board_I2C_Init();
1a002a9c:	f7ff ffb4 	bl	1a002a08 <Board_I2C_Init>
   Board_ADC_Init();
1a002aa0:	f7ff ffc4 	bl	1a002a2c <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a002aa4:	4a04      	ldr	r2, [pc, #16]	; (1a002ab8 <Board_Init+0x38>)
1a002aa6:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a002aaa:	f043 0304 	orr.w	r3, r3, #4
1a002aae:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a002ab2:	bd08      	pop	{r3, pc}
1a002ab4:	400f4000 	.word	0x400f4000
1a002ab8:	40043000 	.word	0x40043000

1a002abc <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a002abc:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a002abe:	4b04      	ldr	r3, [pc, #16]	; (1a002ad0 <SystemInit+0x14>)
1a002ac0:	4a04      	ldr	r2, [pc, #16]	; (1a002ad4 <SystemInit+0x18>)
1a002ac2:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a002ac4:	f000 fcde 	bl	1a003484 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a002ac8:	f000 f856 	bl	1a002b78 <Board_SystemInit>
1a002acc:	bd08      	pop	{r3, pc}
1a002ace:	bf00      	nop
1a002ad0:	e000ed08 	.word	0xe000ed08
1a002ad4:	1a000000 	.word	0x1a000000

1a002ad8 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a002ad8:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002ada:	2300      	movs	r3, #0
1a002adc:	e00c      	b.n	1a002af8 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002ade:	4a09      	ldr	r2, [pc, #36]	; (1a002b04 <Board_SetupMuxing+0x2c>)
1a002ae0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002ae4:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002ae8:	784a      	ldrb	r2, [r1, #1]
1a002aea:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002aec:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002af0:	4905      	ldr	r1, [pc, #20]	; (1a002b08 <Board_SetupMuxing+0x30>)
1a002af2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002af6:	3301      	adds	r3, #1
1a002af8:	2b25      	cmp	r3, #37	; 0x25
1a002afa:	d9f0      	bls.n	1a002ade <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002afc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002b00:	4770      	bx	lr
1a002b02:	bf00      	nop
1a002b04:	1a0042dc 	.word	0x1a0042dc
1a002b08:	40086000 	.word	0x40086000

1a002b0c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002b0c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002b0e:	4a17      	ldr	r2, [pc, #92]	; (1a002b6c <Board_SetupClocking+0x60>)
1a002b10:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002b18:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002b1c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002b20:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002b28:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002b2c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002b30:	2006      	movs	r0, #6
1a002b32:	490f      	ldr	r1, [pc, #60]	; (1a002b70 <Board_SetupClocking+0x64>)
1a002b34:	2201      	movs	r2, #1
1a002b36:	f000 fd55 	bl	1a0035e4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002b3a:	2400      	movs	r4, #0
1a002b3c:	e00a      	b.n	1a002b54 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002b3e:	4a0d      	ldr	r2, [pc, #52]	; (1a002b74 <Board_SetupClocking+0x68>)
1a002b40:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002b44:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002b48:	7859      	ldrb	r1, [r3, #1]
1a002b4a:	789a      	ldrb	r2, [r3, #2]
1a002b4c:	78db      	ldrb	r3, [r3, #3]
1a002b4e:	f000 fbdb 	bl	1a003308 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002b52:	3401      	adds	r4, #1
1a002b54:	2c02      	cmp	r4, #2
1a002b56:	d9f2      	bls.n	1a002b3e <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002b58:	4b04      	ldr	r3, [pc, #16]	; (1a002b6c <Board_SetupClocking+0x60>)
1a002b5a:	685a      	ldr	r2, [r3, #4]
1a002b5c:	f022 020c 	bic.w	r2, r2, #12
1a002b60:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002b62:	685a      	ldr	r2, [r3, #4]
1a002b64:	f042 0203 	orr.w	r2, r2, #3
1a002b68:	605a      	str	r2, [r3, #4]
1a002b6a:	bd10      	pop	{r4, pc}
1a002b6c:	40043000 	.word	0x40043000
1a002b70:	0c28cb00 	.word	0x0c28cb00
1a002b74:	1a0042d0 	.word	0x1a0042d0

1a002b78 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002b78:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002b7a:	f7ff ffad 	bl	1a002ad8 <Board_SetupMuxing>
    Board_SetupClocking();
1a002b7e:	f7ff ffc5 	bl	1a002b0c <Board_SetupClocking>
1a002b82:	bd08      	pop	{r3, pc}

1a002b84 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002b84:	4b09      	ldr	r3, [pc, #36]	; (1a002bac <Chip_UART_GetIndex+0x28>)
1a002b86:	4298      	cmp	r0, r3
1a002b88:	d009      	beq.n	1a002b9e <Chip_UART_GetIndex+0x1a>
1a002b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002b8e:	4298      	cmp	r0, r3
1a002b90:	d007      	beq.n	1a002ba2 <Chip_UART_GetIndex+0x1e>
1a002b92:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002b96:	4298      	cmp	r0, r3
1a002b98:	d005      	beq.n	1a002ba6 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002b9a:	2000      	movs	r0, #0
1a002b9c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002b9e:	2002      	movs	r0, #2
1a002ba0:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002ba2:	2003      	movs	r0, #3
1a002ba4:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a002ba6:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002ba8:	4770      	bx	lr
1a002baa:	bf00      	nop
1a002bac:	400c1000 	.word	0x400c1000

1a002bb0 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002bb0:	b510      	push	{r4, lr}
1a002bb2:	b082      	sub	sp, #8
1a002bb4:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002bb6:	f7ff ffe5 	bl	1a002b84 <Chip_UART_GetIndex>
1a002bba:	4b10      	ldr	r3, [pc, #64]	; (1a002bfc <Chip_UART_Init+0x4c>)
1a002bbc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002bc0:	2101      	movs	r1, #1
1a002bc2:	460a      	mov	r2, r1
1a002bc4:	460b      	mov	r3, r1
1a002bc6:	f000 fbd9 	bl	1a00337c <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002bca:	2307      	movs	r3, #7
1a002bcc:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a002bce:	2300      	movs	r3, #0
1a002bd0:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002bd2:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002bd4:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002bd6:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002bd8:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002bda:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002bdc:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002bde:	4b08      	ldr	r3, [pc, #32]	; (1a002c00 <Chip_UART_Init+0x50>)
1a002be0:	429c      	cmp	r4, r3
1a002be2:	d103      	bne.n	1a002bec <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a002be4:	2300      	movs	r3, #0
1a002be6:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a002be8:	69a3      	ldr	r3, [r4, #24]
1a002bea:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002bec:	2303      	movs	r3, #3
1a002bee:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002bf0:	2310      	movs	r3, #16
1a002bf2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002bf4:	9b01      	ldr	r3, [sp, #4]
}
1a002bf6:	b002      	add	sp, #8
1a002bf8:	bd10      	pop	{r4, pc}
1a002bfa:	bf00      	nop
1a002bfc:	1a00437c 	.word	0x1a00437c
1a002c00:	40082000 	.word	0x40082000

1a002c04 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c08:	b083      	sub	sp, #12
1a002c0a:	4683      	mov	fp, r0
1a002c0c:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002c0e:	f7ff ffb9 	bl	1a002b84 <Chip_UART_GetIndex>
1a002c12:	4b34      	ldr	r3, [pc, #208]	; (1a002ce4 <Chip_UART_SetBaudFDR+0xe0>)
1a002c14:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002c18:	f000 fc0e 	bl	1a003438 <Chip_Clock_GetRate>
1a002c1c:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a002c1e:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002c22:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002c24:	2300      	movs	r3, #0
1a002c26:	9301      	str	r3, [sp, #4]
1a002c28:	46a2      	mov	sl, r4
1a002c2a:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002c2c:	e029      	b.n	1a002c82 <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002c2e:	2300      	movs	r3, #0
1a002c30:	0932      	lsrs	r2, r6, #4
1a002c32:	0730      	lsls	r0, r6, #28
1a002c34:	fba0 0104 	umull	r0, r1, r0, r4
1a002c38:	fb04 1102 	mla	r1, r4, r2, r1
1a002c3c:	1962      	adds	r2, r4, r5
1a002c3e:	fb08 f202 	mul.w	r2, r8, r2
1a002c42:	f000 ff09 	bl	1a003a58 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a002c46:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a002c48:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a002c4a:	2800      	cmp	r0, #0
1a002c4c:	da01      	bge.n	1a002c52 <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a002c4e:	4243      	negs	r3, r0
				div ++;
1a002c50:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002c52:	429f      	cmp	r7, r3
1a002c54:	d30a      	bcc.n	1a002c6c <Chip_UART_SetBaudFDR+0x68>
1a002c56:	b14a      	cbz	r2, 1a002c6c <Chip_UART_SetBaudFDR+0x68>
1a002c58:	0c11      	lsrs	r1, r2, #16
1a002c5a:	d107      	bne.n	1a002c6c <Chip_UART_SetBaudFDR+0x68>
1a002c5c:	2a02      	cmp	r2, #2
1a002c5e:	d800      	bhi.n	1a002c62 <Chip_UART_SetBaudFDR+0x5e>
1a002c60:	b925      	cbnz	r5, 1a002c6c <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002c62:	b14b      	cbz	r3, 1a002c78 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002c64:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002c66:	9501      	str	r5, [sp, #4]
			sm = m;
1a002c68:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002c6a:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a002c6c:	3501      	adds	r5, #1
1a002c6e:	e000      	b.n	1a002c72 <Chip_UART_SetBaudFDR+0x6e>
1a002c70:	2500      	movs	r5, #0
1a002c72:	42a5      	cmp	r5, r4
1a002c74:	d3db      	bcc.n	1a002c2e <Chip_UART_SetBaudFDR+0x2a>
1a002c76:	e003      	b.n	1a002c80 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002c78:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002c7a:	9501      	str	r5, [sp, #4]
			sm = m;
1a002c7c:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002c7e:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002c80:	3401      	adds	r4, #1
1a002c82:	b10f      	cbz	r7, 1a002c88 <Chip_UART_SetBaudFDR+0x84>
1a002c84:	2c0f      	cmp	r4, #15
1a002c86:	d9f3      	bls.n	1a002c70 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002c88:	f1b9 0f00 	cmp.w	r9, #0
1a002c8c:	d026      	beq.n	1a002cdc <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002c8e:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002c96:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002c9a:	fa5f f389 	uxtb.w	r3, r9
1a002c9e:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a002ca2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002ca6:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002caa:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002cb2:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002cb6:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002cba:	b2da      	uxtb	r2, r3
1a002cbc:	9901      	ldr	r1, [sp, #4]
1a002cbe:	f001 030f 	and.w	r3, r1, #15
1a002cc2:	4313      	orrs	r3, r2
1a002cc4:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002cc8:	0933      	lsrs	r3, r6, #4
1a002cca:	fb0a f303 	mul.w	r3, sl, r3
1a002cce:	eb0a 0001 	add.w	r0, sl, r1
1a002cd2:	fb09 f000 	mul.w	r0, r9, r0
1a002cd6:	fbb3 f0f0 	udiv	r0, r3, r0
1a002cda:	e000      	b.n	1a002cde <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a002cdc:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a002cde:	b003      	add	sp, #12
1a002ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002ce4:	1a004374 	.word	0x1a004374

1a002ce8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a002ce8:	4b03      	ldr	r3, [pc, #12]	; (1a002cf8 <Chip_ADC_GetClockIndex+0x10>)
1a002cea:	4298      	cmp	r0, r3
1a002cec:	d101      	bne.n	1a002cf2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a002cee:	2004      	movs	r0, #4
1a002cf0:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002cf2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002cf4:	4770      	bx	lr
1a002cf6:	bf00      	nop
1a002cf8:	400e4000 	.word	0x400e4000

1a002cfc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a002cfc:	b570      	push	{r4, r5, r6, lr}
1a002cfe:	460d      	mov	r5, r1
1a002d00:	4614      	mov	r4, r2
1a002d02:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a002d04:	f7ff fff0 	bl	1a002ce8 <Chip_ADC_GetClockIndex>
1a002d08:	f000 fb96 	bl	1a003438 <Chip_Clock_GetRate>
	if (burstMode) {
1a002d0c:	b115      	cbz	r5, 1a002d14 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a002d0e:	fb04 f406 	mul.w	r4, r4, r6
1a002d12:	e003      	b.n	1a002d1c <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a002d14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002d18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002d1c:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002d20:	0064      	lsls	r4, r4, #1
1a002d22:	fbb0 f4f4 	udiv	r4, r0, r4
1a002d26:	1e60      	subs	r0, r4, #1
	return div;
}
1a002d28:	b2c0      	uxtb	r0, r0
1a002d2a:	bd70      	pop	{r4, r5, r6, pc}

1a002d2c <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a002d2c:	6803      	ldr	r3, [r0, #0]
1a002d2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a002d32:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a002d36:	6001      	str	r1, [r0, #0]
1a002d38:	4770      	bx	lr
1a002d3a:	bf00      	nop

1a002d3c <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a002d3c:	3104      	adds	r1, #4
1a002d3e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a002d42:	2b00      	cmp	r3, #0
1a002d44:	da04      	bge.n	1a002d50 <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a002d46:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a002d4a:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a002d4c:	2001      	movs	r0, #1
1a002d4e:	4770      	bx	lr
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
	if (!ADC_DR_DONE(temp)) {
		return ERROR;
1a002d50:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a002d52:	4770      	bx	lr

1a002d54 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002d54:	b538      	push	{r3, r4, r5, lr}
1a002d56:	4605      	mov	r5, r0
1a002d58:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002d5a:	f7ff ffc5 	bl	1a002ce8 <Chip_ADC_GetClockIndex>
1a002d5e:	2101      	movs	r1, #1
1a002d60:	460a      	mov	r2, r1
1a002d62:	460b      	mov	r3, r1
1a002d64:	f000 fb0a 	bl	1a00337c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002d68:	2100      	movs	r1, #0
1a002d6a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002d6c:	4a08      	ldr	r2, [pc, #32]	; (1a002d90 <Chip_ADC_Init+0x3c>)
1a002d6e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002d70:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002d72:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002d74:	4628      	mov	r0, r5
1a002d76:	230b      	movs	r3, #11
1a002d78:	f7ff ffc0 	bl	1a002cfc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002d7c:	0200      	lsls	r0, r0, #8
1a002d7e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002d82:	7920      	ldrb	r0, [r4, #4]
1a002d84:	f000 0007 	and.w	r0, r0, #7
1a002d88:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a002d8c:	6028      	str	r0, [r5, #0]
1a002d8e:	bd38      	pop	{r3, r4, r5, pc}
1a002d90:	00061a80 	.word	0x00061a80

1a002d94 <Chip_ADC_DeInit>:
}

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a002d94:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a002d96:	f44f 7280 	mov.w	r2, #256	; 0x100
1a002d9a:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a002d9c:	2200      	movs	r2, #0
1a002d9e:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a002da0:	f7ff ffa2 	bl	1a002ce8 <Chip_ADC_GetClockIndex>
1a002da4:	f000 fb2e 	bl	1a003404 <Chip_Clock_Disable>
1a002da8:	bd08      	pop	{r3, pc}
1a002daa:	bf00      	nop

1a002dac <Chip_ADC_ReadValue>:
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a002dac:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a002dae:	f7ff ffc5 	bl	1a002d3c <readAdcVal>
}
1a002db2:	bd08      	pop	{r3, pc}

1a002db4 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a002db4:	2a01      	cmp	r2, #1
1a002db6:	d009      	beq.n	1a002dcc <Chip_ADC_ReadStatus+0x18>
1a002db8:	b112      	cbz	r2, 1a002dc0 <Chip_ADC_ReadStatus+0xc>
1a002dba:	2a02      	cmp	r2, #2
1a002dbc:	d00e      	beq.n	1a002ddc <Chip_ADC_ReadStatus+0x28>
1a002dbe:	e013      	b.n	1a002de8 <Chip_ADC_ReadStatus+0x34>
	case ADC_DR_DONE_STAT:
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002dc0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002dc2:	40c8      	lsrs	r0, r1
1a002dc4:	f000 0001 	and.w	r0, r0, #1
1a002dc8:	b2c0      	uxtb	r0, r0
1a002dca:	4770      	bx	lr

	case ADC_DR_OVERRUN_STAT:
		channel += 8;
1a002dcc:	3108      	adds	r1, #8
1a002dce:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a002dd0:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a002dd2:	40c8      	lsrs	r0, r1
1a002dd4:	f000 0001 	and.w	r0, r0, #1
1a002dd8:	b2c0      	uxtb	r0, r0
1a002dda:	4770      	bx	lr

	case ADC_DR_ADINT_STAT:
		return pADC->STAT >> 16 ? SET : RESET;
1a002ddc:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a002dde:	0c1b      	lsrs	r3, r3, #16
1a002de0:	bf14      	ite	ne
1a002de2:	2001      	movne	r0, #1
1a002de4:	2000      	moveq	r0, #0
1a002de6:	4770      	bx	lr

	default:
		break;
	}
	return RESET;
1a002de8:	2000      	movs	r0, #0
}
1a002dea:	4770      	bx	lr

1a002dec <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002dec:	2a01      	cmp	r2, #1
1a002dee:	d105      	bne.n	1a002dfc <Chip_ADC_Int_SetChannelCmd+0x10>
		pADC->INTEN |= (1UL << channel);
1a002df0:	68c2      	ldr	r2, [r0, #12]
1a002df2:	2301      	movs	r3, #1
1a002df4:	408b      	lsls	r3, r1
1a002df6:	4313      	orrs	r3, r2
1a002df8:	60c3      	str	r3, [r0, #12]
1a002dfa:	4770      	bx	lr
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a002dfc:	68c2      	ldr	r2, [r0, #12]
1a002dfe:	2301      	movs	r3, #1
1a002e00:	408b      	lsls	r3, r1
1a002e02:	ea22 0303 	bic.w	r3, r2, r3
1a002e06:	60c3      	str	r3, [r0, #12]
1a002e08:	4770      	bx	lr
1a002e0a:	bf00      	nop

1a002e0c <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a002e0c:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a002e0e:	2901      	cmp	r1, #1
1a002e10:	d909      	bls.n	1a002e26 <Chip_ADC_SetStartMode+0x1a>
		if (EdgeOption) {
1a002e12:	b122      	cbz	r2, 1a002e1e <Chip_ADC_SetStartMode+0x12>
			pADC->CR |= ADC_CR_EDGE;
1a002e14:	6803      	ldr	r3, [r0, #0]
1a002e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a002e1a:	6003      	str	r3, [r0, #0]
1a002e1c:	e003      	b.n	1a002e26 <Chip_ADC_SetStartMode+0x1a>
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a002e1e:	6803      	ldr	r3, [r0, #0]
1a002e20:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a002e24:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a002e26:	f7ff ff81 	bl	1a002d2c <setStartMode>
1a002e2a:	bd08      	pop	{r3, pc}

1a002e2c <Chip_ADC_SetSampleRate>:
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002e2c:	b570      	push	{r4, r5, r6, lr}
1a002e2e:	4606      	mov	r6, r0
1a002e30:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002e32:	6804      	ldr	r4, [r0, #0]
1a002e34:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002e38:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002e3c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002e3e:	790b      	ldrb	r3, [r1, #4]
1a002e40:	f1c3 030b 	rsb	r3, r3, #11
1a002e44:	7949      	ldrb	r1, [r1, #5]
1a002e46:	b2db      	uxtb	r3, r3
1a002e48:	f7ff ff58 	bl	1a002cfc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002e4c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002e50:	792c      	ldrb	r4, [r5, #4]
1a002e52:	f004 0407 	and.w	r4, r4, #7
1a002e56:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a002e5a:	6030      	str	r0, [r6, #0]
1a002e5c:	bd70      	pop	{r4, r5, r6, pc}
1a002e5e:	bf00      	nop

1a002e60 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002e60:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002e62:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002e64:	680a      	ldr	r2, [r1, #0]
1a002e66:	f7ff ffe1 	bl	1a002e2c <Chip_ADC_SetSampleRate>
1a002e6a:	bd08      	pop	{r3, pc}

1a002e6c <Chip_ADC_EnableChannel>:
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a002e6c:	2a01      	cmp	r2, #1
1a002e6e:	d105      	bne.n	1a002e7c <Chip_ADC_EnableChannel+0x10>
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a002e70:	6802      	ldr	r2, [r0, #0]
1a002e72:	2301      	movs	r3, #1
1a002e74:	408b      	lsls	r3, r1
1a002e76:	4313      	orrs	r3, r2
1a002e78:	6003      	str	r3, [r0, #0]
1a002e7a:	4770      	bx	lr
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a002e7c:	6803      	ldr	r3, [r0, #0]
1a002e7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a002e82:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a002e84:	6802      	ldr	r2, [r0, #0]
1a002e86:	2301      	movs	r3, #1
1a002e88:	408b      	lsls	r3, r1
1a002e8a:	ea22 0303 	bic.w	r3, r2, r3
1a002e8e:	6003      	str	r3, [r0, #0]
1a002e90:	4770      	bx	lr
1a002e92:	bf00      	nop

1a002e94 <Chip_ADC_SetBurstCmd>:
	}
}

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a002e94:	b538      	push	{r3, r4, r5, lr}
1a002e96:	4604      	mov	r4, r0
1a002e98:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a002e9a:	2100      	movs	r1, #0
1a002e9c:	f7ff ff46 	bl	1a002d2c <setStartMode>
	
    if (NewState == DISABLE) {
1a002ea0:	b925      	cbnz	r5, 1a002eac <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a002ea2:	6823      	ldr	r3, [r4, #0]
1a002ea4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a002ea8:	6023      	str	r3, [r4, #0]
1a002eaa:	bd38      	pop	{r3, r4, r5, pc}
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a002eac:	6823      	ldr	r3, [r4, #0]
1a002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a002eb2:	6023      	str	r3, [r4, #0]
1a002eb4:	bd38      	pop	{r3, r4, r5, pc}
1a002eb6:	bf00      	nop

1a002eb8 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002eb8:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002eba:	2069      	movs	r0, #105	; 0x69
1a002ebc:	f000 fabc 	bl	1a003438 <Chip_Clock_GetRate>
1a002ec0:	4b01      	ldr	r3, [pc, #4]	; (1a002ec8 <SystemCoreClockUpdate+0x10>)
1a002ec2:	6018      	str	r0, [r3, #0]
1a002ec4:	bd08      	pop	{r3, pc}
1a002ec6:	bf00      	nop
1a002ec8:	100005d8 	.word	0x100005d8

1a002ecc <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002ece:	680b      	ldr	r3, [r1, #0]
1a002ed0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002ed4:	d002      	beq.n	1a002edc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002eda:	600b      	str	r3, [r1, #0]
1a002edc:	4686      	mov	lr, r0
1a002ede:	2601      	movs	r6, #1
1a002ee0:	e041      	b.n	1a002f66 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a002ee2:	680d      	ldr	r5, [r1, #0]
1a002ee4:	f015 0f40 	tst.w	r5, #64	; 0x40
1a002ee8:	d008      	beq.n	1a002efc <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002eea:	1c7b      	adds	r3, r7, #1
1a002eec:	fa04 f203 	lsl.w	r2, r4, r3
1a002ef0:	694b      	ldr	r3, [r1, #20]
1a002ef2:	fb03 f302 	mul.w	r3, r3, r2
1a002ef6:	fbb3 f3f6 	udiv	r3, r3, r6
1a002efa:	e004      	b.n	1a002f06 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a002efc:	694b      	ldr	r3, [r1, #20]
1a002efe:	fb04 f303 	mul.w	r3, r4, r3
1a002f02:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002f06:	4a19      	ldr	r2, [pc, #100]	; (1a002f6c <pll_calc_divs+0xa0>)
1a002f08:	4293      	cmp	r3, r2
1a002f0a:	d920      	bls.n	1a002f4e <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002f0c:	4a18      	ldr	r2, [pc, #96]	; (1a002f70 <pll_calc_divs+0xa4>)
1a002f0e:	4293      	cmp	r3, r2
1a002f10:	d823      	bhi.n	1a002f5a <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a002f12:	f015 0f80 	tst.w	r5, #128	; 0x80
1a002f16:	d103      	bne.n	1a002f20 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a002f18:	1c7a      	adds	r2, r7, #1
1a002f1a:	fa23 f202 	lsr.w	r2, r3, r2
1a002f1e:	e000      	b.n	1a002f22 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002f20:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002f22:	1a85      	subs	r5, r0, r2
1a002f24:	d502      	bpl.n	1a002f2c <pll_calc_divs+0x60>
		return -val;
1a002f26:	f1c5 0c00 	rsb	ip, r5, #0
1a002f2a:	e000      	b.n	1a002f2e <pll_calc_divs+0x62>
	return val;
1a002f2c:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002f2e:	45e6      	cmp	lr, ip
1a002f30:	d90d      	bls.n	1a002f4e <pll_calc_divs+0x82>
					ppll->nsel = n;
1a002f32:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a002f34:	f107 0e01 	add.w	lr, r7, #1
1a002f38:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a002f3c:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a002f3e:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a002f40:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002f42:	2d00      	cmp	r5, #0
1a002f44:	da02      	bge.n	1a002f4c <pll_calc_divs+0x80>
		return -val;
1a002f46:	f1c5 0e00 	rsb	lr, r5, #0
1a002f4a:	e000      	b.n	1a002f4e <pll_calc_divs+0x82>
	return val;
1a002f4c:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a002f4e:	3401      	adds	r4, #1
1a002f50:	e000      	b.n	1a002f54 <pll_calc_divs+0x88>
1a002f52:	2401      	movs	r4, #1
1a002f54:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a002f58:	ddc3      	ble.n	1a002ee2 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002f5a:	3701      	adds	r7, #1
1a002f5c:	e000      	b.n	1a002f60 <pll_calc_divs+0x94>
1a002f5e:	2700      	movs	r7, #0
1a002f60:	2f03      	cmp	r7, #3
1a002f62:	ddf6      	ble.n	1a002f52 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a002f64:	3601      	adds	r6, #1
1a002f66:	2e04      	cmp	r6, #4
1a002f68:	ddf9      	ble.n	1a002f5e <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002f6c:	094c5eff 	.word	0x094c5eff
1a002f70:	1312d000 	.word	0x1312d000

1a002f74 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002f76:	b099      	sub	sp, #100	; 0x64
1a002f78:	4605      	mov	r5, r0
1a002f7a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002f7c:	4668      	mov	r0, sp
1a002f7e:	2100      	movs	r1, #0
1a002f80:	2260      	movs	r2, #96	; 0x60
1a002f82:	f001 f85d 	bl	1a004040 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002f86:	2380      	movs	r3, #128	; 0x80
1a002f88:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002f8a:	6963      	ldr	r3, [r4, #20]
1a002f8c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002f8e:	7923      	ldrb	r3, [r4, #4]
1a002f90:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002f94:	4628      	mov	r0, r5
1a002f96:	4669      	mov	r1, sp
1a002f98:	f7ff ff98 	bl	1a002ecc <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002f9c:	9b06      	ldr	r3, [sp, #24]
1a002f9e:	42ab      	cmp	r3, r5
1a002fa0:	d107      	bne.n	1a002fb2 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a002fa2:	466d      	mov	r5, sp
1a002fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002fa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002fb0:	e05e      	b.n	1a003070 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002fb2:	1aeb      	subs	r3, r5, r3
1a002fb4:	d500      	bpl.n	1a002fb8 <pll_get_frac+0x44>
		return -val;
1a002fb6:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002fb8:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002fc0:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002fc2:	6963      	ldr	r3, [r4, #20]
1a002fc4:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002fc6:	7923      	ldrb	r3, [r4, #4]
1a002fc8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002fcc:	4628      	mov	r0, r5
1a002fce:	a910      	add	r1, sp, #64	; 0x40
1a002fd0:	f7ff ff7c 	bl	1a002ecc <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002fd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002fd6:	42ab      	cmp	r3, r5
1a002fd8:	d107      	bne.n	1a002fea <pll_get_frac+0x76>
		*ppll = pll[2];
1a002fda:	ad10      	add	r5, sp, #64	; 0x40
1a002fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002fe4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002fe8:	e042      	b.n	1a003070 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002fea:	1aeb      	subs	r3, r5, r3
1a002fec:	d500      	bpl.n	1a002ff0 <pll_get_frac+0x7c>
		return -val;
1a002fee:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002ff0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002ff2:	4b20      	ldr	r3, [pc, #128]	; (1a003074 <pll_get_frac+0x100>)
1a002ff4:	429d      	cmp	r5, r3
1a002ff6:	d812      	bhi.n	1a00301e <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a002ff8:	2340      	movs	r3, #64	; 0x40
1a002ffa:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002ffc:	6963      	ldr	r3, [r4, #20]
1a002ffe:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a003000:	4628      	mov	r0, r5
1a003002:	a908      	add	r1, sp, #32
1a003004:	f7ff ff62 	bl	1a002ecc <pll_calc_divs>
		if (pll[1].fout == freq) {
1a003008:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00300a:	42ab      	cmp	r3, r5
1a00300c:	d107      	bne.n	1a00301e <pll_get_frac+0xaa>
			*ppll = pll[1];
1a00300e:	ad08      	add	r5, sp, #32
1a003010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003014:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00301c:	e028      	b.n	1a003070 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00301e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a003020:	1aed      	subs	r5, r5, r3
1a003022:	d500      	bpl.n	1a003026 <pll_get_frac+0xb2>
		return -val;
1a003024:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a003026:	42ae      	cmp	r6, r5
1a003028:	dc11      	bgt.n	1a00304e <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a00302a:	42be      	cmp	r6, r7
1a00302c:	dc07      	bgt.n	1a00303e <pll_get_frac+0xca>
			*ppll = pll[0];
1a00302e:	466d      	mov	r5, sp
1a003030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00303c:	e018      	b.n	1a003070 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00303e:	ad10      	add	r5, sp, #64	; 0x40
1a003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00304c:	e010      	b.n	1a003070 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00304e:	42af      	cmp	r7, r5
1a003050:	db07      	blt.n	1a003062 <pll_get_frac+0xee>
			*ppll = pll[1];
1a003052:	ad08      	add	r5, sp, #32
1a003054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003058:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00305c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003060:	e006      	b.n	1a003070 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a003062:	ad10      	add	r5, sp, #64	; 0x40
1a003064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003068:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00306c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a003070:	b019      	add	sp, #100	; 0x64
1a003072:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a003074:	068e7780 	.word	0x068e7780

1a003078 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003078:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00307a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00307c:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00307e:	e010      	b.n	1a0030a2 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003080:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003084:	0052      	lsls	r2, r2, #1
1a003086:	4d0d      	ldr	r5, [pc, #52]	; (1a0030bc <Chip_Clock_FindBaseClock+0x44>)
1a003088:	5aaa      	ldrh	r2, [r5, r2]
1a00308a:	4282      	cmp	r2, r0
1a00308c:	d806      	bhi.n	1a00309c <Chip_Clock_FindBaseClock+0x24>
1a00308e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003092:	0052      	lsls	r2, r2, #1
1a003094:	442a      	add	r2, r5
1a003096:	8852      	ldrh	r2, [r2, #2]
1a003098:	4282      	cmp	r2, r0
1a00309a:	d201      	bcs.n	1a0030a0 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00309c:	3301      	adds	r3, #1
1a00309e:	e000      	b.n	1a0030a2 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a0030a0:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0030a2:	291c      	cmp	r1, #28
1a0030a4:	d107      	bne.n	1a0030b6 <Chip_Clock_FindBaseClock+0x3e>
1a0030a6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0030aa:	0052      	lsls	r2, r2, #1
1a0030ac:	4c03      	ldr	r4, [pc, #12]	; (1a0030bc <Chip_Clock_FindBaseClock+0x44>)
1a0030ae:	4422      	add	r2, r4
1a0030b0:	7914      	ldrb	r4, [r2, #4]
1a0030b2:	428c      	cmp	r4, r1
1a0030b4:	d1e4      	bne.n	1a003080 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a0030b6:	4608      	mov	r0, r1
1a0030b8:	bc30      	pop	{r4, r5}
1a0030ba:	4770      	bx	lr
1a0030bc:	1a004390 	.word	0x1a004390

1a0030c0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0030c0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0030c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0030c6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0030c8:	4a0d      	ldr	r2, [pc, #52]	; (1a003100 <Chip_Clock_EnableCrystal+0x40>)
1a0030ca:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0030cc:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0030d0:	6992      	ldr	r2, [r2, #24]
1a0030d2:	428a      	cmp	r2, r1
1a0030d4:	d001      	beq.n	1a0030da <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0030d6:	4a0a      	ldr	r2, [pc, #40]	; (1a003100 <Chip_Clock_EnableCrystal+0x40>)
1a0030d8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0030da:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0030de:	4a09      	ldr	r2, [pc, #36]	; (1a003104 <Chip_Clock_EnableCrystal+0x44>)
1a0030e0:	6811      	ldr	r1, [r2, #0]
1a0030e2:	4a09      	ldr	r2, [pc, #36]	; (1a003108 <Chip_Clock_EnableCrystal+0x48>)
1a0030e4:	4291      	cmp	r1, r2
1a0030e6:	d901      	bls.n	1a0030ec <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0030e8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0030ec:	4a04      	ldr	r2, [pc, #16]	; (1a003100 <Chip_Clock_EnableCrystal+0x40>)
1a0030ee:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0030f0:	9b01      	ldr	r3, [sp, #4]
1a0030f2:	1e5a      	subs	r2, r3, #1
1a0030f4:	9201      	str	r2, [sp, #4]
1a0030f6:	2b00      	cmp	r3, #0
1a0030f8:	d1fa      	bne.n	1a0030f0 <Chip_Clock_EnableCrystal+0x30>
}
1a0030fa:	b002      	add	sp, #8
1a0030fc:	4770      	bx	lr
1a0030fe:	bf00      	nop
1a003100:	40050000 	.word	0x40050000
1a003104:	1a0042b4 	.word	0x1a0042b4
1a003108:	01312cff 	.word	0x01312cff

1a00310c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a00310c:	3012      	adds	r0, #18
1a00310e:	4b05      	ldr	r3, [pc, #20]	; (1a003124 <Chip_Clock_GetDividerSource+0x18>)
1a003110:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a003114:	f010 0f01 	tst.w	r0, #1
1a003118:	d102      	bne.n	1a003120 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00311a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00311e:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a003120:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003122:	4770      	bx	lr
1a003124:	40050000 	.word	0x40050000

1a003128 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a003128:	f100 0212 	add.w	r2, r0, #18
1a00312c:	4b03      	ldr	r3, [pc, #12]	; (1a00313c <Chip_Clock_GetDividerDivisor+0x14>)
1a00312e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a003132:	4b03      	ldr	r3, [pc, #12]	; (1a003140 <Chip_Clock_GetDividerDivisor+0x18>)
1a003134:	5c18      	ldrb	r0, [r3, r0]
}
1a003136:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00313a:	4770      	bx	lr
1a00313c:	40050000 	.word	0x40050000
1a003140:	1a004388 	.word	0x1a004388

1a003144 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003144:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003146:	2810      	cmp	r0, #16
1a003148:	d80a      	bhi.n	1a003160 <Chip_Clock_GetClockInputHz+0x1c>
1a00314a:	e8df f000 	tbb	[pc, r0]
1a00314e:	0b42      	.short	0x0b42
1a003150:	091f160d 	.word	0x091f160d
1a003154:	2b282522 	.word	0x2b282522
1a003158:	322e0909 	.word	0x322e0909
1a00315c:	3a36      	.short	0x3a36
1a00315e:	3e          	.byte	0x3e
1a00315f:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003160:	2000      	movs	r0, #0
1a003162:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003164:	481e      	ldr	r0, [pc, #120]	; (1a0031e0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003166:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003168:	4b1e      	ldr	r3, [pc, #120]	; (1a0031e4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00316a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00316e:	f003 0307 	and.w	r3, r3, #7
1a003172:	2b04      	cmp	r3, #4
1a003174:	d130      	bne.n	1a0031d8 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a003176:	2000      	movs	r0, #0
1a003178:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00317a:	4b1a      	ldr	r3, [pc, #104]	; (1a0031e4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00317c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a003180:	f003 0307 	and.w	r3, r3, #7
1a003184:	2b04      	cmp	r3, #4
1a003186:	d029      	beq.n	1a0031dc <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003188:	4817      	ldr	r0, [pc, #92]	; (1a0031e8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00318a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00318c:	4b17      	ldr	r3, [pc, #92]	; (1a0031ec <Chip_Clock_GetClockInputHz+0xa8>)
1a00318e:	6818      	ldr	r0, [r3, #0]
		break;
1a003190:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a003192:	4b17      	ldr	r3, [pc, #92]	; (1a0031f0 <Chip_Clock_GetClockInputHz+0xac>)
1a003194:	6818      	ldr	r0, [r3, #0]
		break;
1a003196:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003198:	4b16      	ldr	r3, [pc, #88]	; (1a0031f4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00319a:	6818      	ldr	r0, [r3, #0]
		break;
1a00319c:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00319e:	4b15      	ldr	r3, [pc, #84]	; (1a0031f4 <Chip_Clock_GetClockInputHz+0xb0>)
1a0031a0:	6858      	ldr	r0, [r3, #4]
		break;
1a0031a2:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0031a4:	f000 f86a 	bl	1a00327c <Chip_Clock_GetMainPLLHz>
		break;
1a0031a8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0031aa:	2100      	movs	r1, #0
1a0031ac:	f000 f89a 	bl	1a0032e4 <Chip_Clock_GetDivRate>
		break;
1a0031b0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0031b2:	2101      	movs	r1, #1
1a0031b4:	f000 f896 	bl	1a0032e4 <Chip_Clock_GetDivRate>
		break;
1a0031b8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0031ba:	2102      	movs	r1, #2
1a0031bc:	f000 f892 	bl	1a0032e4 <Chip_Clock_GetDivRate>
		break;
1a0031c0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0031c2:	2103      	movs	r1, #3
1a0031c4:	f000 f88e 	bl	1a0032e4 <Chip_Clock_GetDivRate>
		break;
1a0031c8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0031ca:	2104      	movs	r1, #4
1a0031cc:	f000 f88a 	bl	1a0032e4 <Chip_Clock_GetDivRate>
		break;
1a0031d0:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0031d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0031d6:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0031d8:	4803      	ldr	r0, [pc, #12]	; (1a0031e8 <Chip_Clock_GetClockInputHz+0xa4>)
1a0031da:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0031dc:	4806      	ldr	r0, [pc, #24]	; (1a0031f8 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0031de:	bd08      	pop	{r3, pc}
1a0031e0:	00b71b00 	.word	0x00b71b00
1a0031e4:	40043000 	.word	0x40043000
1a0031e8:	017d7840 	.word	0x017d7840
1a0031ec:	1a0042b8 	.word	0x1a0042b8
1a0031f0:	1a0042b4 	.word	0x1a0042b4
1a0031f4:	100005bc 	.word	0x100005bc
1a0031f8:	02faf080 	.word	0x02faf080

1a0031fc <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0031fc:	b538      	push	{r3, r4, r5, lr}
1a0031fe:	4605      	mov	r5, r0
1a003200:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a003202:	7908      	ldrb	r0, [r1, #4]
1a003204:	f7ff ff9e 	bl	1a003144 <Chip_Clock_GetClockInputHz>
1a003208:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a00320a:	4b19      	ldr	r3, [pc, #100]	; (1a003270 <Chip_Clock_CalcMainPLLValue+0x74>)
1a00320c:	442b      	add	r3, r5
1a00320e:	4a19      	ldr	r2, [pc, #100]	; (1a003274 <Chip_Clock_CalcMainPLLValue+0x78>)
1a003210:	4293      	cmp	r3, r2
1a003212:	d821      	bhi.n	1a003258 <Chip_Clock_CalcMainPLLValue+0x5c>
1a003214:	b318      	cbz	r0, 1a00325e <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a003216:	2380      	movs	r3, #128	; 0x80
1a003218:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a00321a:	2300      	movs	r3, #0
1a00321c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00321e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a003220:	fbb5 f3f0 	udiv	r3, r5, r0
1a003224:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a003226:	4a14      	ldr	r2, [pc, #80]	; (1a003278 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a003228:	4295      	cmp	r5, r2
1a00322a:	d903      	bls.n	1a003234 <Chip_Clock_CalcMainPLLValue+0x38>
1a00322c:	fb03 f000 	mul.w	r0, r3, r0
1a003230:	42a8      	cmp	r0, r5
1a003232:	d007      	beq.n	1a003244 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a003234:	4628      	mov	r0, r5
1a003236:	4621      	mov	r1, r4
1a003238:	f7ff fe9c 	bl	1a002f74 <pll_get_frac>
		if (!ppll->nsel) {
1a00323c:	68a3      	ldr	r3, [r4, #8]
1a00323e:	b18b      	cbz	r3, 1a003264 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a003240:	3b01      	subs	r3, #1
1a003242:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a003244:	6923      	ldr	r3, [r4, #16]
1a003246:	b183      	cbz	r3, 1a00326a <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a003248:	68e2      	ldr	r2, [r4, #12]
1a00324a:	b10a      	cbz	r2, 1a003250 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00324c:	3a01      	subs	r2, #1
1a00324e:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a003250:	3b01      	subs	r3, #1
1a003252:	6123      	str	r3, [r4, #16]

	return 0;
1a003254:	2000      	movs	r0, #0
1a003256:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a003258:	f04f 30ff 	mov.w	r0, #4294967295
1a00325c:	bd38      	pop	{r3, r4, r5, pc}
1a00325e:	f04f 30ff 	mov.w	r0, #4294967295
1a003262:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a003264:	f04f 30ff 	mov.w	r0, #4294967295
1a003268:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a00326a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a00326e:	bd38      	pop	{r3, r4, r5, pc}
1a003270:	ff6b3a10 	.word	0xff6b3a10
1a003274:	0b940510 	.word	0x0b940510
1a003278:	094c5eff 	.word	0x094c5eff

1a00327c <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a00327c:	b570      	push	{r4, r5, r6, lr}
1a00327e:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a003280:	4d16      	ldr	r5, [pc, #88]	; (1a0032dc <Chip_Clock_GetMainPLLHz+0x60>)
1a003282:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003284:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003288:	f7ff ff5c 	bl	1a003144 <Chip_Clock_GetClockInputHz>
1a00328c:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00328e:	4b14      	ldr	r3, [pc, #80]	; (1a0032e0 <Chip_Clock_GetMainPLLHz+0x64>)
1a003290:	6818      	ldr	r0, [r3, #0]
1a003292:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a003294:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a003296:	f010 0001 	ands.w	r0, r0, #1
1a00329a:	d01d      	beq.n	1a0032d8 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a00329c:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0032a0:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0032a4:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a0032a8:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a0032ac:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a0032ae:	3201      	adds	r2, #1
	p = ptab[psel];
1a0032b0:	a802      	add	r0, sp, #8
1a0032b2:	4401      	add	r1, r0
1a0032b4:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a0032b8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0032bc:	d100      	bne.n	1a0032c0 <Chip_Clock_GetMainPLLHz+0x44>
1a0032be:	b125      	cbz	r5, 1a0032ca <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a0032c0:	fbb6 f0f2 	udiv	r0, r6, r2
1a0032c4:	fb03 f000 	mul.w	r0, r3, r0
1a0032c8:	e006      	b.n	1a0032d8 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a0032ca:	0040      	lsls	r0, r0, #1
1a0032cc:	fbb3 f3f0 	udiv	r3, r3, r0
1a0032d0:	fbb6 f0f2 	udiv	r0, r6, r2
1a0032d4:	fb00 f003 	mul.w	r0, r0, r3
}
1a0032d8:	b002      	add	sp, #8
1a0032da:	bd70      	pop	{r4, r5, r6, pc}
1a0032dc:	40050000 	.word	0x40050000
1a0032e0:	1a004384 	.word	0x1a004384

1a0032e4 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0032e4:	b538      	push	{r3, r4, r5, lr}
1a0032e6:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0032e8:	4608      	mov	r0, r1
1a0032ea:	f7ff ff0f 	bl	1a00310c <Chip_Clock_GetDividerSource>
1a0032ee:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0032f0:	4620      	mov	r0, r4
1a0032f2:	f7ff ff19 	bl	1a003128 <Chip_Clock_GetDividerDivisor>
1a0032f6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0032f8:	4628      	mov	r0, r5
1a0032fa:	f7ff ff23 	bl	1a003144 <Chip_Clock_GetClockInputHz>
1a0032fe:	3401      	adds	r4, #1
}
1a003300:	fbb0 f0f4 	udiv	r0, r0, r4
1a003304:	bd38      	pop	{r3, r4, r5, pc}
1a003306:	bf00      	nop

1a003308 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a003308:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a00330a:	0085      	lsls	r5, r0, #2
1a00330c:	4c0d      	ldr	r4, [pc, #52]	; (1a003344 <Chip_Clock_SetBaseClock+0x3c>)
1a00330e:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a003310:	281b      	cmp	r0, #27
1a003312:	d80f      	bhi.n	1a003334 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a003314:	2911      	cmp	r1, #17
1a003316:	d012      	beq.n	1a00333e <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a003318:	4c0b      	ldr	r4, [pc, #44]	; (1a003348 <Chip_Clock_SetBaseClock+0x40>)
1a00331a:	402c      	ands	r4, r5

			if (autoblocken) {
1a00331c:	b10a      	cbz	r2, 1a003322 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a00331e:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a003322:	b10b      	cbz	r3, 1a003328 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a003324:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a003328:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00332c:	0080      	lsls	r0, r0, #2
1a00332e:	4b05      	ldr	r3, [pc, #20]	; (1a003344 <Chip_Clock_SetBaseClock+0x3c>)
1a003330:	501c      	str	r4, [r3, r0]
1a003332:	e004      	b.n	1a00333e <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003334:	f045 0501 	orr.w	r5, r5, #1
1a003338:	0080      	lsls	r0, r0, #2
1a00333a:	4b02      	ldr	r3, [pc, #8]	; (1a003344 <Chip_Clock_SetBaseClock+0x3c>)
1a00333c:	501d      	str	r5, [r3, r0]
	}
}
1a00333e:	bc30      	pop	{r4, r5}
1a003340:	4770      	bx	lr
1a003342:	bf00      	nop
1a003344:	4005005c 	.word	0x4005005c
1a003348:	e0fff7fe 	.word	0xe0fff7fe

1a00334c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00334c:	281b      	cmp	r0, #27
1a00334e:	d808      	bhi.n	1a003362 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003350:	0080      	lsls	r0, r0, #2
1a003352:	4b06      	ldr	r3, [pc, #24]	; (1a00336c <Chip_Clock_GetBaseClock+0x20>)
1a003354:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a003356:	f010 0f01 	tst.w	r0, #1
1a00335a:	d104      	bne.n	1a003366 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00335c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a003360:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a003362:	2011      	movs	r0, #17
1a003364:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a003366:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a003368:	4770      	bx	lr
1a00336a:	bf00      	nop
1a00336c:	4005005c 	.word	0x4005005c

1a003370 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a003370:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003372:	f7ff ffeb 	bl	1a00334c <Chip_Clock_GetBaseClock>
1a003376:	f7ff fee5 	bl	1a003144 <Chip_Clock_GetClockInputHz>
}
1a00337a:	bd08      	pop	{r3, pc}

1a00337c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00337c:	b909      	cbnz	r1, 1a003382 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a00337e:	2101      	movs	r1, #1
1a003380:	e000      	b.n	1a003384 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a003382:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a003384:	b10a      	cbz	r2, 1a00338a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a003386:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00338a:	2b02      	cmp	r3, #2
1a00338c:	d101      	bne.n	1a003392 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a00338e:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003392:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003396:	d305      	bcc.n	1a0033a4 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a003398:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00339c:	4b04      	ldr	r3, [pc, #16]	; (1a0033b0 <Chip_Clock_EnableOpts+0x34>)
1a00339e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0033a2:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0033a4:	3020      	adds	r0, #32
1a0033a6:	4b03      	ldr	r3, [pc, #12]	; (1a0033b4 <Chip_Clock_EnableOpts+0x38>)
1a0033a8:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0033ac:	4770      	bx	lr
1a0033ae:	bf00      	nop
1a0033b0:	40052000 	.word	0x40052000
1a0033b4:	40051000 	.word	0x40051000

1a0033b8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0033b8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0033bc:	d309      	bcc.n	1a0033d2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0033be:	4a09      	ldr	r2, [pc, #36]	; (1a0033e4 <Chip_Clock_Enable+0x2c>)
1a0033c0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0033c4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0033c8:	f043 0301 	orr.w	r3, r3, #1
1a0033cc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0033d0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0033d2:	4a05      	ldr	r2, [pc, #20]	; (1a0033e8 <Chip_Clock_Enable+0x30>)
1a0033d4:	3020      	adds	r0, #32
1a0033d6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0033da:	f043 0301 	orr.w	r3, r3, #1
1a0033de:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0033e2:	4770      	bx	lr
1a0033e4:	40052000 	.word	0x40052000
1a0033e8:	40051000 	.word	0x40051000

1a0033ec <Chip_Clock_RTCEnable>:
}

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a0033ec:	4b04      	ldr	r3, [pc, #16]	; (1a003400 <Chip_Clock_RTCEnable+0x14>)
1a0033ee:	685a      	ldr	r2, [r3, #4]
1a0033f0:	f022 020c 	bic.w	r2, r2, #12
1a0033f4:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a0033f6:	685a      	ldr	r2, [r3, #4]
1a0033f8:	f042 0203 	orr.w	r2, r2, #3
1a0033fc:	605a      	str	r2, [r3, #4]
1a0033fe:	4770      	bx	lr
1a003400:	40043000 	.word	0x40043000

1a003404 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a003404:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003408:	d309      	bcc.n	1a00341e <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a00340a:	4a09      	ldr	r2, [pc, #36]	; (1a003430 <Chip_Clock_Disable+0x2c>)
1a00340c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003410:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003414:	f023 0301 	bic.w	r3, r3, #1
1a003418:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00341c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a00341e:	4a05      	ldr	r2, [pc, #20]	; (1a003434 <Chip_Clock_Disable+0x30>)
1a003420:	3020      	adds	r0, #32
1a003422:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a003426:	f023 0301 	bic.w	r3, r3, #1
1a00342a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00342e:	4770      	bx	lr
1a003430:	40052000 	.word	0x40052000
1a003434:	40051000 	.word	0x40051000

1a003438 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a003438:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a00343a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00343e:	d305      	bcc.n	1a00344c <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a003440:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a003444:	4a0d      	ldr	r2, [pc, #52]	; (1a00347c <Chip_Clock_GetRate+0x44>)
1a003446:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00344a:	e004      	b.n	1a003456 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00344c:	f100 0320 	add.w	r3, r0, #32
1a003450:	4a0b      	ldr	r2, [pc, #44]	; (1a003480 <Chip_Clock_GetRate+0x48>)
1a003452:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a003456:	f014 0f01 	tst.w	r4, #1
1a00345a:	d00c      	beq.n	1a003476 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00345c:	f7ff fe0c 	bl	1a003078 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003460:	f7ff ff86 	bl	1a003370 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a003464:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003468:	d101      	bne.n	1a00346e <Chip_Clock_GetRate+0x36>
			div = 1;
1a00346a:	2301      	movs	r3, #1
1a00346c:	e000      	b.n	1a003470 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a00346e:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a003470:	fbb0 f0f3 	udiv	r0, r0, r3
1a003474:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a003476:	2000      	movs	r0, #0
	}

	return rate;
}
1a003478:	bd10      	pop	{r4, pc}
1a00347a:	bf00      	nop
1a00347c:	40052000 	.word	0x40052000
1a003480:	40051000 	.word	0x40051000

1a003484 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a003484:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a003486:	4b10      	ldr	r3, [pc, #64]	; (1a0034c8 <fpuInit+0x44>)
1a003488:	681b      	ldr	r3, [r3, #0]
1a00348a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a00348c:	4b0f      	ldr	r3, [pc, #60]	; (1a0034cc <fpuInit+0x48>)
1a00348e:	681b      	ldr	r3, [r3, #0]
1a003490:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a003492:	9a02      	ldr	r2, [sp, #8]
1a003494:	4b0e      	ldr	r3, [pc, #56]	; (1a0034d0 <fpuInit+0x4c>)
1a003496:	429a      	cmp	r2, r3
1a003498:	d105      	bne.n	1a0034a6 <fpuInit+0x22>
1a00349a:	9a01      	ldr	r2, [sp, #4]
1a00349c:	4b0d      	ldr	r3, [pc, #52]	; (1a0034d4 <fpuInit+0x50>)
1a00349e:	429a      	cmp	r2, r3
1a0034a0:	d003      	beq.n	1a0034aa <fpuInit+0x26>
1a0034a2:	2300      	movs	r3, #0
1a0034a4:	e002      	b.n	1a0034ac <fpuInit+0x28>
1a0034a6:	2300      	movs	r3, #0
1a0034a8:	e000      	b.n	1a0034ac <fpuInit+0x28>
1a0034aa:	2301      	movs	r3, #1

	if (vfpPresent) {
1a0034ac:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0034b0:	d008      	beq.n	1a0034c4 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a0034b2:	4a09      	ldr	r2, [pc, #36]	; (1a0034d8 <fpuInit+0x54>)
1a0034b4:	6813      	ldr	r3, [r2, #0]
1a0034b6:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0034b8:	9b03      	ldr	r3, [sp, #12]
1a0034ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0034be:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0034c0:	9b03      	ldr	r3, [sp, #12]
1a0034c2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0034c4:	b004      	add	sp, #16
1a0034c6:	4770      	bx	lr
1a0034c8:	e000ef40 	.word	0xe000ef40
1a0034cc:	e000ef44 	.word	0xe000ef44
1a0034d0:	10110021 	.word	0x10110021
1a0034d4:	11000011 	.word	0x11000011
1a0034d8:	e000ed88 	.word	0xe000ed88

1a0034dc <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a0034dc:	6883      	ldr	r3, [r0, #8]
1a0034de:	f043 0302 	orr.w	r3, r3, #2
1a0034e2:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a0034e4:	6883      	ldr	r3, [r0, #8]
1a0034e6:	f013 0f02 	tst.w	r3, #2
1a0034ea:	d0fb      	beq.n	1a0034e4 <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a0034ec:	6883      	ldr	r3, [r0, #8]
1a0034ee:	f003 0311 	and.w	r3, r3, #17
1a0034f2:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a0034f4:	6883      	ldr	r3, [r0, #8]
1a0034f6:	f013 0f02 	tst.w	r3, #2
1a0034fa:	d1fb      	bne.n	1a0034f4 <Chip_RTC_ResetClockTickCounter+0x18>
}
1a0034fc:	4770      	bx	lr
1a0034fe:	bf00      	nop

1a003500 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003500:	2901      	cmp	r1, #1
1a003502:	d104      	bne.n	1a00350e <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
1a003504:	6883      	ldr	r3, [r0, #8]
1a003506:	f043 0301 	orr.w	r3, r3, #1
1a00350a:	6083      	str	r3, [r0, #8]
1a00350c:	4770      	bx	lr
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a00350e:	6883      	ldr	r3, [r0, #8]
1a003510:	f003 0312 	and.w	r3, r3, #18
1a003514:	6083      	str	r3, [r0, #8]
1a003516:	4770      	bx	lr

1a003518 <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003518:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a00351a:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a00351c:	f015 0f01 	tst.w	r5, #1
1a003520:	d002      	beq.n	1a003528 <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a003522:	f005 0312 	and.w	r3, r5, #18
1a003526:	6083      	str	r3, [r0, #8]
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003528:	2300      	movs	r3, #0
1a00352a:	e007      	b.n	1a00353c <Chip_RTC_SetFullTime+0x24>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
		pRTC->TIME[i] = pFullTime->time[i];
1a00352c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a003530:	f103 0208 	add.w	r2, r3, #8
1a003534:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	if (ccr_val & RTC_CCR_CLKEN) {
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a003538:	3301      	adds	r3, #1
1a00353a:	b2db      	uxtb	r3, r3
1a00353c:	2b07      	cmp	r3, #7
1a00353e:	d9f5      	bls.n	1a00352c <Chip_RTC_SetFullTime+0x14>
		pRTC->TIME[i] = pFullTime->time[i];
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a003540:	6085      	str	r5, [r0, #8]
}
1a003542:	bc30      	pop	{r4, r5}
1a003544:	4770      	bx	lr
1a003546:	bf00      	nop

1a003548 <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003548:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a00354a:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a00354c:	e00e      	b.n	1a00356c <Chip_RTC_GetFullTime+0x24>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a00354e:	6a03      	ldr	r3, [r0, #32]
1a003550:	600b      	str	r3, [r1, #0]
1a003552:	461c      	mov	r4, r3
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a003554:	2301      	movs	r3, #1
1a003556:	e007      	b.n	1a003568 <Chip_RTC_GetFullTime+0x20>
			pFullTime->time[i] = pRTC->TIME[i];
1a003558:	f103 0208 	add.w	r2, r3, #8
1a00355c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a003560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a003564:	3301      	adds	r3, #1
1a003566:	b2db      	uxtb	r3, r3
1a003568:	2b07      	cmp	r3, #7
1a00356a:	d9f5      	bls.n	1a003558 <Chip_RTC_GetFullTime+0x10>
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a00356c:	6a03      	ldr	r3, [r0, #32]
1a00356e:	42a3      	cmp	r3, r4
1a003570:	d1ed      	bne.n	1a00354e <Chip_RTC_GetFullTime+0x6>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
		}
	}
}
1a003572:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003576:	4770      	bx	lr

1a003578 <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003578:	2901      	cmp	r1, #1
1a00357a:	d108      	bne.n	1a00358e <Chip_RTC_CalibCounterCmd+0x16>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a00357c:	6883      	ldr	r3, [r0, #8]
1a00357e:	f003 0303 	and.w	r3, r3, #3
1a003582:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a003584:	6883      	ldr	r3, [r0, #8]
1a003586:	f013 0f10 	tst.w	r3, #16
1a00358a:	d1f7      	bne.n	1a00357c <Chip_RTC_CalibCounterCmd+0x4>
1a00358c:	4770      	bx	lr
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a00358e:	6883      	ldr	r3, [r0, #8]
1a003590:	f043 0310 	orr.w	r3, r3, #16
1a003594:	6083      	str	r3, [r0, #8]
1a003596:	4770      	bx	lr

1a003598 <Chip_RTC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the RTC peripheral */
void Chip_RTC_Init(LPC_RTC_T *pRTC)
{
1a003598:	b510      	push	{r4, lr}
1a00359a:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a00359c:	f7ff ff26 	bl	1a0033ec <Chip_Clock_RTCEnable>

	/* 2-Second delay after enabling RTC clock */
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a0035a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a0035a4:	4b0d      	ldr	r3, [pc, #52]	; (1a0035dc <Chip_RTC_Init+0x44>)
1a0035a6:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a0035a8:	4b0c      	ldr	r3, [pc, #48]	; (1a0035dc <Chip_RTC_Init+0x44>)
1a0035aa:	681b      	ldr	r3, [r3, #0]
1a0035ac:	2b00      	cmp	r3, #0
1a0035ae:	d1fb      	bne.n	1a0035a8 <Chip_RTC_Init+0x10>

	/* Disable RTC */
	Chip_RTC_Enable(pRTC, DISABLE);
1a0035b0:	4620      	mov	r0, r4
1a0035b2:	2100      	movs	r1, #0
1a0035b4:	f7ff ffa4 	bl	1a003500 <Chip_RTC_Enable>

	/* Disable Calibration */
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a0035b8:	4620      	mov	r0, r4
1a0035ba:	2100      	movs	r1, #0
1a0035bc:	f7ff ffdc 	bl	1a003578 <Chip_RTC_CalibCounterCmd>

	/* Reset RTC Clock */
	Chip_RTC_ResetClockTickCounter(pRTC);
1a0035c0:	4620      	mov	r0, r4
1a0035c2:	f7ff ff8b 	bl	1a0034dc <Chip_RTC_ResetClockTickCounter>

	/* Clear counter increment and alarm interrupt */
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a0035c6:	2303      	movs	r3, #3
1a0035c8:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a0035ca:	6823      	ldr	r3, [r4, #0]
1a0035cc:	2b00      	cmp	r3, #0
1a0035ce:	d1fc      	bne.n	1a0035ca <Chip_RTC_Init+0x32>

	/* Clear all register to be default */
	pRTC->CIIR = 0x00;
1a0035d0:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a0035d2:	22ff      	movs	r2, #255	; 0xff
1a0035d4:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a0035d6:	6423      	str	r3, [r4, #64]	; 0x40
1a0035d8:	bd10      	pop	{r4, pc}
1a0035da:	bf00      	nop
1a0035dc:	40040000 	.word	0x40040000

1a0035e0 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0035e0:	4770      	bx	lr
1a0035e2:	bf00      	nop

1a0035e4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0035e4:	b570      	push	{r4, r5, r6, lr}
1a0035e6:	b08a      	sub	sp, #40	; 0x28
1a0035e8:	4605      	mov	r5, r0
1a0035ea:	460e      	mov	r6, r1
1a0035ec:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0035ee:	f242 7310 	movw	r3, #10000	; 0x2710
1a0035f2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0035f4:	2806      	cmp	r0, #6
1a0035f6:	d101      	bne.n	1a0035fc <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0035f8:	f7ff fd62 	bl	1a0030c0 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0035fc:	2004      	movs	r0, #4
1a0035fe:	4629      	mov	r1, r5
1a003600:	2201      	movs	r2, #1
1a003602:	2300      	movs	r3, #0
1a003604:	f7ff fe80 	bl	1a003308 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003608:	4a47      	ldr	r2, [pc, #284]	; (1a003728 <Chip_SetupCoreClock+0x144>)
1a00360a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00360c:	f043 0301 	orr.w	r3, r3, #1
1a003610:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003612:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003616:	4630      	mov	r0, r6
1a003618:	a901      	add	r1, sp, #4
1a00361a:	f7ff fdef 	bl	1a0031fc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00361e:	4b43      	ldr	r3, [pc, #268]	; (1a00372c <Chip_SetupCoreClock+0x148>)
1a003620:	429e      	cmp	r6, r3
1a003622:	d913      	bls.n	1a00364c <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a003624:	9b01      	ldr	r3, [sp, #4]
1a003626:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00362a:	d000      	beq.n	1a00362e <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00362c:	e7fe      	b.n	1a00362c <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00362e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003632:	d005      	beq.n	1a003640 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003638:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00363a:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a00363c:	2601      	movs	r6, #1
1a00363e:	e007      	b.n	1a003650 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a003640:	9b04      	ldr	r3, [sp, #16]
1a003642:	3301      	adds	r3, #1
1a003644:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a003646:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003648:	2600      	movs	r6, #0
1a00364a:	e001      	b.n	1a003650 <Chip_SetupCoreClock+0x6c>
1a00364c:	2500      	movs	r5, #0
1a00364e:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003650:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003654:	9b01      	ldr	r3, [sp, #4]
1a003656:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00365a:	9a05      	ldr	r2, [sp, #20]
1a00365c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003660:	9a03      	ldr	r2, [sp, #12]
1a003662:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003666:	9a04      	ldr	r2, [sp, #16]
1a003668:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00366c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003670:	4a2d      	ldr	r2, [pc, #180]	; (1a003728 <Chip_SetupCoreClock+0x144>)
1a003672:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a003674:	4b2c      	ldr	r3, [pc, #176]	; (1a003728 <Chip_SetupCoreClock+0x144>)
1a003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a003678:	f013 0f01 	tst.w	r3, #1
1a00367c:	d0fa      	beq.n	1a003674 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00367e:	2004      	movs	r0, #4
1a003680:	2109      	movs	r1, #9
1a003682:	2201      	movs	r2, #1
1a003684:	2300      	movs	r3, #0
1a003686:	f7ff fe3f 	bl	1a003308 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00368a:	b1ee      	cbz	r6, 1a0036c8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00368c:	f242 7310 	movw	r3, #10000	; 0x2710
1a003690:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a003692:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003694:	1e5a      	subs	r2, r3, #1
1a003696:	9209      	str	r2, [sp, #36]	; 0x24
1a003698:	2b00      	cmp	r3, #0
1a00369a:	d1fa      	bne.n	1a003692 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a00369c:	9b01      	ldr	r3, [sp, #4]
1a00369e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0036a2:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0036a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0036a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0036ac:	9a05      	ldr	r2, [sp, #20]
1a0036ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0036b2:	9a03      	ldr	r2, [sp, #12]
1a0036b4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0036b8:	9a04      	ldr	r2, [sp, #16]
1a0036ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0036be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0036c2:	4a19      	ldr	r2, [pc, #100]	; (1a003728 <Chip_SetupCoreClock+0x144>)
1a0036c4:	6453      	str	r3, [r2, #68]	; 0x44
1a0036c6:	e01c      	b.n	1a003702 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0036c8:	b1dd      	cbz	r5, 1a003702 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0036ca:	f242 7310 	movw	r3, #10000	; 0x2710
1a0036ce:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0036d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0036d2:	1e5a      	subs	r2, r3, #1
1a0036d4:	9209      	str	r2, [sp, #36]	; 0x24
1a0036d6:	2b00      	cmp	r3, #0
1a0036d8:	d1fa      	bne.n	1a0036d0 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0036da:	9b04      	ldr	r3, [sp, #16]
1a0036dc:	1e59      	subs	r1, r3, #1
1a0036de:	9104      	str	r1, [sp, #16]
1a0036e0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0036e4:	9b01      	ldr	r3, [sp, #4]
1a0036e6:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0036ea:	9b05      	ldr	r3, [sp, #20]
1a0036ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0036f0:	9b03      	ldr	r3, [sp, #12]
1a0036f2:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0036f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0036fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0036fe:	4a0a      	ldr	r2, [pc, #40]	; (1a003728 <Chip_SetupCoreClock+0x144>)
1a003700:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003702:	b964      	cbnz	r4, 1a00371e <Chip_SetupCoreClock+0x13a>
1a003704:	e00e      	b.n	1a003724 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003706:	4a0a      	ldr	r2, [pc, #40]	; (1a003730 <Chip_SetupCoreClock+0x14c>)
1a003708:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a00370c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003710:	7859      	ldrb	r1, [r3, #1]
1a003712:	789a      	ldrb	r2, [r3, #2]
1a003714:	78db      	ldrb	r3, [r3, #3]
1a003716:	f7ff fdf7 	bl	1a003308 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00371a:	3401      	adds	r4, #1
1a00371c:	e000      	b.n	1a003720 <Chip_SetupCoreClock+0x13c>
1a00371e:	2400      	movs	r4, #0
1a003720:	2c11      	cmp	r4, #17
1a003722:	d9f0      	bls.n	1a003706 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003724:	b00a      	add	sp, #40	; 0x28
1a003726:	bd70      	pop	{r4, r5, r6, pc}
1a003728:	40050000 	.word	0x40050000
1a00372c:	068e7780 	.word	0x068e7780
1a003730:	1a0043fc 	.word	0x1a0043fc

1a003734 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003734:	2901      	cmp	r1, #1
1a003736:	d109      	bne.n	1a00374c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003738:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00373c:	0080      	lsls	r0, r0, #2
1a00373e:	4b04      	ldr	r3, [pc, #16]	; (1a003750 <Chip_I2C_EventHandler+0x1c>)
1a003740:	4418      	add	r0, r3
1a003742:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003744:	7d13      	ldrb	r3, [r2, #20]
1a003746:	b2db      	uxtb	r3, r3
1a003748:	2b04      	cmp	r3, #4
1a00374a:	d0fb      	beq.n	1a003744 <Chip_I2C_EventHandler+0x10>
1a00374c:	4770      	bx	lr
1a00374e:	bf00      	nop
1a003750:	10000094 	.word	0x10000094

1a003754 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003754:	b570      	push	{r4, r5, r6, lr}
1a003756:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a003758:	4e06      	ldr	r6, [pc, #24]	; (1a003774 <Chip_I2C_Init+0x20>)
1a00375a:	00c4      	lsls	r4, r0, #3
1a00375c:	1a23      	subs	r3, r4, r0
1a00375e:	009b      	lsls	r3, r3, #2
1a003760:	4433      	add	r3, r6
1a003762:	8898      	ldrh	r0, [r3, #4]
1a003764:	f7ff fe28 	bl	1a0033b8 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003768:	1b60      	subs	r0, r4, r5
1a00376a:	0080      	lsls	r0, r0, #2
1a00376c:	5833      	ldr	r3, [r6, r0]
1a00376e:	226c      	movs	r2, #108	; 0x6c
1a003770:	619a      	str	r2, [r3, #24]
1a003772:	bd70      	pop	{r4, r5, r6, pc}
1a003774:	10000094 	.word	0x10000094

1a003778 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00377c:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a00377e:	4f09      	ldr	r7, [pc, #36]	; (1a0037a4 <Chip_I2C_SetClockRate+0x2c>)
1a003780:	00c5      	lsls	r5, r0, #3
1a003782:	1a2e      	subs	r6, r5, r0
1a003784:	00b6      	lsls	r6, r6, #2
1a003786:	19bb      	adds	r3, r7, r6
1a003788:	8898      	ldrh	r0, [r3, #4]
1a00378a:	f7ff fe55 	bl	1a003438 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00378e:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003792:	59bb      	ldr	r3, [r7, r6]
1a003794:	0842      	lsrs	r2, r0, #1
1a003796:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003798:	59bb      	ldr	r3, [r7, r6]
1a00379a:	691a      	ldr	r2, [r3, #16]
1a00379c:	1a80      	subs	r0, r0, r2
1a00379e:	6158      	str	r0, [r3, #20]
1a0037a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0037a4:	10000094 	.word	0x10000094

1a0037a8 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0037a8:	680b      	ldr	r3, [r1, #0]
1a0037aa:	b11b      	cbz	r3, 1a0037b4 <SSP_Write2BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a0037ac:	684a      	ldr	r2, [r1, #4]
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a0037ae:	5a9b      	ldrh	r3, [r3, r2]
 * @param	tx_data	: SSP 16-bit data to be transmited
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_SendFrame(LPC_SSP_T *pSSP, uint16_t tx_data)
{
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a0037b0:	6083      	str	r3, [r0, #8]
1a0037b2:	e002      	b.n	1a0037ba <SSP_Write2BFifo+0x12>
1a0037b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0037b8:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a0037ba:	684b      	ldr	r3, [r1, #4]
1a0037bc:	3302      	adds	r3, #2
1a0037be:	604b      	str	r3, [r1, #4]
1a0037c0:	4770      	bx	lr
1a0037c2:	bf00      	nop

1a0037c4 <SSP_Write1BFifo>:
}

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0037c4:	680b      	ldr	r3, [r1, #0]
1a0037c6:	b11b      	cbz	r3, 1a0037d0 <SSP_Write1BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0037c8:	684a      	ldr	r2, [r1, #4]
1a0037ca:	5c9b      	ldrb	r3, [r3, r2]
1a0037cc:	6083      	str	r3, [r0, #8]
1a0037ce:	e001      	b.n	1a0037d4 <SSP_Write1BFifo+0x10>
1a0037d0:	23ff      	movs	r3, #255	; 0xff
1a0037d2:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a0037d4:	684b      	ldr	r3, [r1, #4]
1a0037d6:	3301      	adds	r3, #1
1a0037d8:	604b      	str	r3, [r1, #4]
1a0037da:	4770      	bx	lr

1a0037dc <SSP_Read2BFifo>:
}

/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0037dc:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0037de:	e007      	b.n	1a0037f0 <SSP_Read2BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0037e0:	6883      	ldr	r3, [r0, #8]
1a0037e2:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a0037e4:	688c      	ldr	r4, [r1, #8]
1a0037e6:	b104      	cbz	r4, 1a0037ea <SSP_Read2BFifo+0xe>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0037e8:	5313      	strh	r3, [r2, r4]
		}

		xf_setup->rx_cnt += 2;
1a0037ea:	68cb      	ldr	r3, [r1, #12]
1a0037ec:	3302      	adds	r3, #2
1a0037ee:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a0037f0:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0037f2:	f013 0f04 	tst.w	r3, #4
1a0037f6:	d003      	beq.n	1a003800 <SSP_Read2BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0037f8:	68ca      	ldr	r2, [r1, #12]
1a0037fa:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0037fc:	429a      	cmp	r2, r3
1a0037fe:	d3ef      	bcc.n	1a0037e0 <SSP_Read2BFifo+0x4>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
	}
}
1a003800:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003804:	4770      	bx	lr
1a003806:	bf00      	nop

1a003808 <SSP_Read1BFifo>:

/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a003808:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00380a:	e007      	b.n	1a00381c <SSP_Read1BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00380c:	6883      	ldr	r3, [r0, #8]
1a00380e:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a003810:	688c      	ldr	r4, [r1, #8]
1a003812:	b104      	cbz	r4, 1a003816 <SSP_Read1BFifo+0xe>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a003814:	5513      	strb	r3, [r2, r4]
		}

		xf_setup->rx_cnt++;
1a003816:	68cb      	ldr	r3, [r1, #12]
1a003818:	3301      	adds	r3, #1
1a00381a:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a00381c:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00381e:	f013 0f04 	tst.w	r3, #4
1a003822:	d003      	beq.n	1a00382c <SSP_Read1BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a003824:	68ca      	ldr	r2, [r1, #12]
1a003826:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a003828:	429a      	cmp	r2, r3
1a00382a:	d3ef      	bcc.n	1a00380c <SSP_Read1BFifo+0x4>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
	}
}
1a00382c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003830:	4770      	bx	lr
1a003832:	bf00      	nop

1a003834 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003834:	4b03      	ldr	r3, [pc, #12]	; (1a003844 <Chip_SSP_GetClockIndex+0x10>)
1a003836:	4298      	cmp	r0, r3
1a003838:	d101      	bne.n	1a00383e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00383a:	20a5      	movs	r0, #165	; 0xa5
1a00383c:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00383e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003840:	4770      	bx	lr
1a003842:	bf00      	nop
1a003844:	400c5000 	.word	0x400c5000

1a003848 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003848:	4b04      	ldr	r3, [pc, #16]	; (1a00385c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00384a:	4298      	cmp	r0, r3
1a00384c:	d102      	bne.n	1a003854 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a00384e:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003852:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003854:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003858:	4770      	bx	lr
1a00385a:	bf00      	nop
1a00385c:	400c5000 	.word	0x400c5000

1a003860 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003860:	6803      	ldr	r3, [r0, #0]
1a003862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003866:	0209      	lsls	r1, r1, #8
1a003868:	b289      	uxth	r1, r1
1a00386a:	430b      	orrs	r3, r1
1a00386c:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a00386e:	6102      	str	r2, [r0, #16]
1a003870:	4770      	bx	lr
1a003872:	bf00      	nop

1a003874 <Chip_SSP_RWFrames_Blocking>:
}

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a003874:	b538      	push	{r3, r4, r5, lr}
1a003876:	4604      	mov	r4, r0
1a003878:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a00387a:	e000      	b.n	1a00387e <Chip_SSP_RWFrames_Blocking+0xa>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00387c:	68a3      	ldr	r3, [r4, #8]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a00387e:	68e3      	ldr	r3, [r4, #12]
1a003880:	f013 0f04 	tst.w	r3, #4
1a003884:	d1fa      	bne.n	1a00387c <Chip_SSP_RWFrames_Blocking+0x8>
 * @return	 Nothing
 * @note	Software can clear one or more interrupt condition(s) in the SSP controller
 */
STATIC INLINE void Chip_SSP_ClearIntPending(LPC_SSP_T *pSSP, SSP_INTCLEAR_T IntClear)
{
	pSSP->ICR = IntClear;
1a003886:	2303      	movs	r3, #3
1a003888:	6223      	str	r3, [r4, #32]
 * @return	 the number of bits transferred in each frame minus one
 * @note	The return value is 0x03 -> 0xF corresponding to 4bit -> 16bit transfer
 */
STATIC INLINE uint8_t Chip_SSP_GetDataSize(LPC_SSP_T *pSSP)
{
	return SSP_CR0_DSS(pSSP->CR0);
1a00388a:	6823      	ldr	r3, [r4, #0]
1a00388c:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a003890:	2b07      	cmp	r3, #7
1a003892:	d815      	bhi.n	1a0038c0 <Chip_SSP_RWFrames_Blocking+0x4c>
1a003894:	e031      	b.n	1a0038fa <Chip_SSP_RWFrames_Blocking+0x86>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a003896:	68e2      	ldr	r2, [r4, #12]
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a003898:	f012 0f02 	tst.w	r2, #2
1a00389c:	d006      	beq.n	1a0038ac <Chip_SSP_RWFrames_Blocking+0x38>
1a00389e:	686a      	ldr	r2, [r5, #4]
1a0038a0:	4293      	cmp	r3, r2
1a0038a2:	d903      	bls.n	1a0038ac <Chip_SSP_RWFrames_Blocking+0x38>
				SSP_Write2BFifo(pSSP, xf_setup);
1a0038a4:	4620      	mov	r0, r4
1a0038a6:	4629      	mov	r1, r5
1a0038a8:	f7ff ff7e 	bl	1a0037a8 <SSP_Write2BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0038ac:	69a3      	ldr	r3, [r4, #24]
1a0038ae:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0038b2:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0038b6:	d12f      	bne.n	1a003918 <Chip_SSP_RWFrames_Blocking+0xa4>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a0038b8:	4620      	mov	r0, r4
1a0038ba:	4629      	mov	r1, r5
1a0038bc:	f7ff ff8e 	bl	1a0037dc <SSP_Read2BFifo>

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0038c0:	68ea      	ldr	r2, [r5, #12]
1a0038c2:	692b      	ldr	r3, [r5, #16]
1a0038c4:	429a      	cmp	r2, r3
1a0038c6:	d3e6      	bcc.n	1a003896 <Chip_SSP_RWFrames_Blocking+0x22>
1a0038c8:	686a      	ldr	r2, [r5, #4]
1a0038ca:	4293      	cmp	r3, r2
1a0038cc:	d8e3      	bhi.n	1a003896 <Chip_SSP_RWFrames_Blocking+0x22>
1a0038ce:	e01b      	b.n	1a003908 <Chip_SSP_RWFrames_Blocking+0x94>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a0038d0:	68e2      	ldr	r2, [r4, #12]
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0038d2:	f012 0f02 	tst.w	r2, #2
1a0038d6:	d006      	beq.n	1a0038e6 <Chip_SSP_RWFrames_Blocking+0x72>
1a0038d8:	686a      	ldr	r2, [r5, #4]
1a0038da:	4293      	cmp	r3, r2
1a0038dc:	d903      	bls.n	1a0038e6 <Chip_SSP_RWFrames_Blocking+0x72>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0038de:	4620      	mov	r0, r4
1a0038e0:	4629      	mov	r1, r5
1a0038e2:	f7ff ff6f 	bl	1a0037c4 <SSP_Write1BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0038e6:	69a3      	ldr	r3, [r4, #24]
1a0038e8:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0038ec:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0038f0:	d114      	bne.n	1a00391c <Chip_SSP_RWFrames_Blocking+0xa8>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a0038f2:	4620      	mov	r0, r4
1a0038f4:	4629      	mov	r1, r5
1a0038f6:	f7ff ff87 	bl	1a003808 <SSP_Read1BFifo>
			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0038fa:	68ea      	ldr	r2, [r5, #12]
1a0038fc:	692b      	ldr	r3, [r5, #16]
1a0038fe:	429a      	cmp	r2, r3
1a003900:	d3e6      	bcc.n	1a0038d0 <Chip_SSP_RWFrames_Blocking+0x5c>
1a003902:	686a      	ldr	r2, [r5, #4]
1a003904:	4293      	cmp	r3, r2
1a003906:	d8e3      	bhi.n	1a0038d0 <Chip_SSP_RWFrames_Blocking+0x5c>

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
		}
	}
	if (xf_setup->tx_data) {
1a003908:	682b      	ldr	r3, [r5, #0]
1a00390a:	b10b      	cbz	r3, 1a003910 <Chip_SSP_RWFrames_Blocking+0x9c>
		return xf_setup->tx_cnt;
1a00390c:	6868      	ldr	r0, [r5, #4]
1a00390e:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
1a003910:	68ab      	ldr	r3, [r5, #8]
1a003912:	b12b      	cbz	r3, 1a003920 <Chip_SSP_RWFrames_Blocking+0xac>
		return xf_setup->rx_cnt;
1a003914:	68e8      	ldr	r0, [r5, #12]
1a003916:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a003918:	2000      	movs	r0, #0
1a00391a:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a00391c:	2000      	movs	r0, #0
1a00391e:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
		return xf_setup->rx_cnt;
	}

	return 0;
1a003920:	2000      	movs	r0, #0
}
1a003922:	bd38      	pop	{r3, r4, r5, pc}

1a003924 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003924:	b570      	push	{r4, r5, r6, lr}
1a003926:	4606      	mov	r6, r0
1a003928:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00392a:	f7ff ff8d 	bl	1a003848 <Chip_SSP_GetPeriphClockIndex>
1a00392e:	f7ff fd83 	bl	1a003438 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003932:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a003934:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a003938:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00393a:	e00c      	b.n	1a003956 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00393c:	1c4c      	adds	r4, r1, #1
1a00393e:	fb02 f304 	mul.w	r3, r2, r4
1a003942:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003946:	42ab      	cmp	r3, r5
1a003948:	d905      	bls.n	1a003956 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00394a:	2cff      	cmp	r4, #255	; 0xff
1a00394c:	d902      	bls.n	1a003954 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a00394e:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a003950:	2100      	movs	r1, #0
1a003952:	e000      	b.n	1a003956 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003954:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a003956:	42ab      	cmp	r3, r5
1a003958:	d8f0      	bhi.n	1a00393c <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00395a:	4630      	mov	r0, r6
1a00395c:	f7ff ff80 	bl	1a003860 <Chip_SSP_SetClockRate>
1a003960:	bd70      	pop	{r4, r5, r6, pc}
1a003962:	bf00      	nop

1a003964 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003964:	b510      	push	{r4, lr}
1a003966:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003968:	f7ff ff64 	bl	1a003834 <Chip_SSP_GetClockIndex>
1a00396c:	f7ff fd24 	bl	1a0033b8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003970:	4620      	mov	r0, r4
1a003972:	f7ff ff69 	bl	1a003848 <Chip_SSP_GetPeriphClockIndex>
1a003976:	f7ff fd1f 	bl	1a0033b8 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00397a:	6863      	ldr	r3, [r4, #4]
1a00397c:	f023 0304 	bic.w	r3, r3, #4
1a003980:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003982:	6823      	ldr	r3, [r4, #0]
1a003984:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003988:	f043 0307 	orr.w	r3, r3, #7
1a00398c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00398e:	4620      	mov	r0, r4
1a003990:	4901      	ldr	r1, [pc, #4]	; (1a003998 <Chip_SSP_Init+0x34>)
1a003992:	f7ff ffc7 	bl	1a003924 <Chip_SSP_SetBitRate>
1a003996:	bd10      	pop	{r4, pc}
1a003998:	000186a0 	.word	0x000186a0

1a00399c <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a00399c:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00399e:	4a18      	ldr	r2, [pc, #96]	; (1a003a00 <ResetISR+0x64>)
1a0039a0:	4b18      	ldr	r3, [pc, #96]	; (1a003a04 <ResetISR+0x68>)
1a0039a2:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0039a4:	4a18      	ldr	r2, [pc, #96]	; (1a003a08 <ResetISR+0x6c>)
1a0039a6:	3304      	adds	r3, #4
1a0039a8:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0039aa:	2300      	movs	r3, #0
1a0039ac:	e005      	b.n	1a0039ba <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0039ae:	f04f 31ff 	mov.w	r1, #4294967295
1a0039b2:	4a16      	ldr	r2, [pc, #88]	; (1a003a0c <ResetISR+0x70>)
1a0039b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0039b8:	3301      	adds	r3, #1
1a0039ba:	2b07      	cmp	r3, #7
1a0039bc:	d9f7      	bls.n	1a0039ae <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0039be:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0039c0:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0039c2:	f7ff f87b 	bl	1a002abc <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0039c6:	4b12      	ldr	r3, [pc, #72]	; (1a003a10 <ResetISR+0x74>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0039c8:	e007      	b.n	1a0039da <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039ca:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0039ce:	6818      	ldr	r0, [r3, #0]
1a0039d0:	6859      	ldr	r1, [r3, #4]
1a0039d2:	689a      	ldr	r2, [r3, #8]
1a0039d4:	f7fc fbea 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039d8:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0039da:	4a0e      	ldr	r2, [pc, #56]	; (1a003a14 <ResetISR+0x78>)
1a0039dc:	4293      	cmp	r3, r2
1a0039de:	d3f4      	bcc.n	1a0039ca <ResetISR+0x2e>
1a0039e0:	e006      	b.n	1a0039f0 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a0039e2:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0039e4:	f854 0b08 	ldr.w	r0, [r4], #8
1a0039e8:	6859      	ldr	r1, [r3, #4]
1a0039ea:	f7fc fbed 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0039ee:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0039f0:	4a09      	ldr	r2, [pc, #36]	; (1a003a18 <ResetISR+0x7c>)
1a0039f2:	4293      	cmp	r3, r2
1a0039f4:	d3f5      	bcc.n	1a0039e2 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a0039f6:	f000 fafd 	bl	1a003ff4 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a0039fa:	f7fc fd3b 	bl	1a000474 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a0039fe:	e7fe      	b.n	1a0039fe <ResetISR+0x62>
1a003a00:	10df1000 	.word	0x10df1000
1a003a04:	40053100 	.word	0x40053100
1a003a08:	01dff7ff 	.word	0x01dff7ff
1a003a0c:	e000e280 	.word	0xe000e280
1a003a10:	1a000114 	.word	0x1a000114
1a003a14:	1a000150 	.word	0x1a000150
1a003a18:	1a000178 	.word	0x1a000178

1a003a1c <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a003a1c:	4770      	bx	lr
1a003a1e:	bf00      	nop

1a003a20 <__aeabi_ldivmod>:
1a003a20:	b97b      	cbnz	r3, 1a003a42 <__aeabi_ldivmod+0x22>
1a003a22:	b972      	cbnz	r2, 1a003a42 <__aeabi_ldivmod+0x22>
1a003a24:	2900      	cmp	r1, #0
1a003a26:	bfbe      	ittt	lt
1a003a28:	2000      	movlt	r0, #0
1a003a2a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
1a003a2e:	e006      	blt.n	1a003a3e <__aeabi_ldivmod+0x1e>
1a003a30:	bf08      	it	eq
1a003a32:	2800      	cmpeq	r0, #0
1a003a34:	bf1c      	itt	ne
1a003a36:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
1a003a3a:	f04f 30ff 	movne.w	r0, #4294967295
1a003a3e:	f000 b853 	b.w	1a003ae8 <__aeabi_idiv0>
1a003a42:	b082      	sub	sp, #8
1a003a44:	46ec      	mov	ip, sp
1a003a46:	e92d 5000 	stmdb	sp!, {ip, lr}
1a003a4a:	f000 f81d 	bl	1a003a88 <__gnu_ldivmod_helper>
1a003a4e:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003a52:	b002      	add	sp, #8
1a003a54:	bc0c      	pop	{r2, r3}
1a003a56:	4770      	bx	lr

1a003a58 <__aeabi_uldivmod>:
1a003a58:	b953      	cbnz	r3, 1a003a70 <__aeabi_uldivmod+0x18>
1a003a5a:	b94a      	cbnz	r2, 1a003a70 <__aeabi_uldivmod+0x18>
1a003a5c:	2900      	cmp	r1, #0
1a003a5e:	bf08      	it	eq
1a003a60:	2800      	cmpeq	r0, #0
1a003a62:	bf1c      	itt	ne
1a003a64:	f04f 31ff 	movne.w	r1, #4294967295
1a003a68:	f04f 30ff 	movne.w	r0, #4294967295
1a003a6c:	f000 b83c 	b.w	1a003ae8 <__aeabi_idiv0>
1a003a70:	b082      	sub	sp, #8
1a003a72:	46ec      	mov	ip, sp
1a003a74:	e92d 5000 	stmdb	sp!, {ip, lr}
1a003a78:	f000 f81e 	bl	1a003ab8 <__gnu_uldivmod_helper>
1a003a7c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003a80:	b002      	add	sp, #8
1a003a82:	bc0c      	pop	{r2, r3}
1a003a84:	4770      	bx	lr
1a003a86:	bf00      	nop

1a003a88 <__gnu_ldivmod_helper>:
1a003a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003a8c:	9c06      	ldr	r4, [sp, #24]
1a003a8e:	4615      	mov	r5, r2
1a003a90:	4606      	mov	r6, r0
1a003a92:	460f      	mov	r7, r1
1a003a94:	4698      	mov	r8, r3
1a003a96:	f000 f829 	bl	1a003aec <__divdi3>
1a003a9a:	fb05 f301 	mul.w	r3, r5, r1
1a003a9e:	fb00 3808 	mla	r8, r0, r8, r3
1a003aa2:	fba5 2300 	umull	r2, r3, r5, r0
1a003aa6:	1ab2      	subs	r2, r6, r2
1a003aa8:	4443      	add	r3, r8
1a003aaa:	eb67 0303 	sbc.w	r3, r7, r3
1a003aae:	e9c4 2300 	strd	r2, r3, [r4]
1a003ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003ab6:	bf00      	nop

1a003ab8 <__gnu_uldivmod_helper>:
1a003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003abc:	9c06      	ldr	r4, [sp, #24]
1a003abe:	4690      	mov	r8, r2
1a003ac0:	4606      	mov	r6, r0
1a003ac2:	460f      	mov	r7, r1
1a003ac4:	461d      	mov	r5, r3
1a003ac6:	f000 f95f 	bl	1a003d88 <__udivdi3>
1a003aca:	fb00 f505 	mul.w	r5, r0, r5
1a003ace:	fba0 2308 	umull	r2, r3, r0, r8
1a003ad2:	fb08 5501 	mla	r5, r8, r1, r5
1a003ad6:	1ab2      	subs	r2, r6, r2
1a003ad8:	442b      	add	r3, r5
1a003ada:	eb67 0303 	sbc.w	r3, r7, r3
1a003ade:	e9c4 2300 	strd	r2, r3, [r4]
1a003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003ae6:	bf00      	nop

1a003ae8 <__aeabi_idiv0>:
1a003ae8:	4770      	bx	lr
1a003aea:	bf00      	nop

1a003aec <__divdi3>:
1a003aec:	2900      	cmp	r1, #0
1a003aee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003af2:	f2c0 80a6 	blt.w	1a003c42 <__divdi3+0x156>
1a003af6:	2600      	movs	r6, #0
1a003af8:	2b00      	cmp	r3, #0
1a003afa:	f2c0 809c 	blt.w	1a003c36 <__divdi3+0x14a>
1a003afe:	4688      	mov	r8, r1
1a003b00:	4694      	mov	ip, r2
1a003b02:	469e      	mov	lr, r3
1a003b04:	4615      	mov	r5, r2
1a003b06:	4604      	mov	r4, r0
1a003b08:	460f      	mov	r7, r1
1a003b0a:	2b00      	cmp	r3, #0
1a003b0c:	d13d      	bne.n	1a003b8a <__divdi3+0x9e>
1a003b0e:	428a      	cmp	r2, r1
1a003b10:	d959      	bls.n	1a003bc6 <__divdi3+0xda>
1a003b12:	fab2 f382 	clz	r3, r2
1a003b16:	b13b      	cbz	r3, 1a003b28 <__divdi3+0x3c>
1a003b18:	f1c3 0220 	rsb	r2, r3, #32
1a003b1c:	409f      	lsls	r7, r3
1a003b1e:	fa20 f202 	lsr.w	r2, r0, r2
1a003b22:	409d      	lsls	r5, r3
1a003b24:	4317      	orrs	r7, r2
1a003b26:	409c      	lsls	r4, r3
1a003b28:	0c29      	lsrs	r1, r5, #16
1a003b2a:	0c22      	lsrs	r2, r4, #16
1a003b2c:	fbb7 fef1 	udiv	lr, r7, r1
1a003b30:	b2a8      	uxth	r0, r5
1a003b32:	fb01 771e 	mls	r7, r1, lr, r7
1a003b36:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a003b3a:	fb00 f30e 	mul.w	r3, r0, lr
1a003b3e:	42bb      	cmp	r3, r7
1a003b40:	d90a      	bls.n	1a003b58 <__divdi3+0x6c>
1a003b42:	197f      	adds	r7, r7, r5
1a003b44:	f10e 32ff 	add.w	r2, lr, #4294967295
1a003b48:	f080 8105 	bcs.w	1a003d56 <__divdi3+0x26a>
1a003b4c:	42bb      	cmp	r3, r7
1a003b4e:	f240 8102 	bls.w	1a003d56 <__divdi3+0x26a>
1a003b52:	f1ae 0e02 	sub.w	lr, lr, #2
1a003b56:	442f      	add	r7, r5
1a003b58:	1aff      	subs	r7, r7, r3
1a003b5a:	b2a4      	uxth	r4, r4
1a003b5c:	fbb7 f3f1 	udiv	r3, r7, r1
1a003b60:	fb01 7713 	mls	r7, r1, r3, r7
1a003b64:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003b68:	fb00 f003 	mul.w	r0, r0, r3
1a003b6c:	42b8      	cmp	r0, r7
1a003b6e:	d908      	bls.n	1a003b82 <__divdi3+0x96>
1a003b70:	197f      	adds	r7, r7, r5
1a003b72:	f103 32ff 	add.w	r2, r3, #4294967295
1a003b76:	f080 80f0 	bcs.w	1a003d5a <__divdi3+0x26e>
1a003b7a:	42b8      	cmp	r0, r7
1a003b7c:	f240 80ed 	bls.w	1a003d5a <__divdi3+0x26e>
1a003b80:	3b02      	subs	r3, #2
1a003b82:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a003b86:	2200      	movs	r2, #0
1a003b88:	e003      	b.n	1a003b92 <__divdi3+0xa6>
1a003b8a:	428b      	cmp	r3, r1
1a003b8c:	d90f      	bls.n	1a003bae <__divdi3+0xc2>
1a003b8e:	2200      	movs	r2, #0
1a003b90:	4613      	mov	r3, r2
1a003b92:	1c34      	adds	r4, r6, #0
1a003b94:	bf18      	it	ne
1a003b96:	2401      	movne	r4, #1
1a003b98:	4260      	negs	r0, r4
1a003b9a:	f04f 0500 	mov.w	r5, #0
1a003b9e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a003ba2:	4058      	eors	r0, r3
1a003ba4:	4051      	eors	r1, r2
1a003ba6:	1900      	adds	r0, r0, r4
1a003ba8:	4169      	adcs	r1, r5
1a003baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003bae:	fab3 f283 	clz	r2, r3
1a003bb2:	2a00      	cmp	r2, #0
1a003bb4:	f040 8086 	bne.w	1a003cc4 <__divdi3+0x1d8>
1a003bb8:	428b      	cmp	r3, r1
1a003bba:	d302      	bcc.n	1a003bc2 <__divdi3+0xd6>
1a003bbc:	4584      	cmp	ip, r0
1a003bbe:	f200 80db 	bhi.w	1a003d78 <__divdi3+0x28c>
1a003bc2:	2301      	movs	r3, #1
1a003bc4:	e7e5      	b.n	1a003b92 <__divdi3+0xa6>
1a003bc6:	b912      	cbnz	r2, 1a003bce <__divdi3+0xe2>
1a003bc8:	2301      	movs	r3, #1
1a003bca:	fbb3 f5f2 	udiv	r5, r3, r2
1a003bce:	fab5 f085 	clz	r0, r5
1a003bd2:	2800      	cmp	r0, #0
1a003bd4:	d13b      	bne.n	1a003c4e <__divdi3+0x162>
1a003bd6:	1b78      	subs	r0, r7, r5
1a003bd8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003bdc:	fa1f fc85 	uxth.w	ip, r5
1a003be0:	2201      	movs	r2, #1
1a003be2:	fbb0 f8fe 	udiv	r8, r0, lr
1a003be6:	0c21      	lsrs	r1, r4, #16
1a003be8:	fb0e 0718 	mls	r7, lr, r8, r0
1a003bec:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003bf0:	fb0c f308 	mul.w	r3, ip, r8
1a003bf4:	42bb      	cmp	r3, r7
1a003bf6:	d907      	bls.n	1a003c08 <__divdi3+0x11c>
1a003bf8:	197f      	adds	r7, r7, r5
1a003bfa:	f108 31ff 	add.w	r1, r8, #4294967295
1a003bfe:	d202      	bcs.n	1a003c06 <__divdi3+0x11a>
1a003c00:	42bb      	cmp	r3, r7
1a003c02:	f200 80bd 	bhi.w	1a003d80 <__divdi3+0x294>
1a003c06:	4688      	mov	r8, r1
1a003c08:	1aff      	subs	r7, r7, r3
1a003c0a:	b2a4      	uxth	r4, r4
1a003c0c:	fbb7 f3fe 	udiv	r3, r7, lr
1a003c10:	fb0e 7713 	mls	r7, lr, r3, r7
1a003c14:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003c18:	fb0c fc03 	mul.w	ip, ip, r3
1a003c1c:	45bc      	cmp	ip, r7
1a003c1e:	d907      	bls.n	1a003c30 <__divdi3+0x144>
1a003c20:	197f      	adds	r7, r7, r5
1a003c22:	f103 31ff 	add.w	r1, r3, #4294967295
1a003c26:	d202      	bcs.n	1a003c2e <__divdi3+0x142>
1a003c28:	45bc      	cmp	ip, r7
1a003c2a:	f200 80a7 	bhi.w	1a003d7c <__divdi3+0x290>
1a003c2e:	460b      	mov	r3, r1
1a003c30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003c34:	e7ad      	b.n	1a003b92 <__divdi3+0xa6>
1a003c36:	4252      	negs	r2, r2
1a003c38:	ea6f 0606 	mvn.w	r6, r6
1a003c3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003c40:	e75d      	b.n	1a003afe <__divdi3+0x12>
1a003c42:	4240      	negs	r0, r0
1a003c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003c48:	f04f 36ff 	mov.w	r6, #4294967295
1a003c4c:	e754      	b.n	1a003af8 <__divdi3+0xc>
1a003c4e:	f1c0 0220 	rsb	r2, r0, #32
1a003c52:	fa24 f102 	lsr.w	r1, r4, r2
1a003c56:	fa07 f300 	lsl.w	r3, r7, r0
1a003c5a:	4085      	lsls	r5, r0
1a003c5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c60:	40d7      	lsrs	r7, r2
1a003c62:	4319      	orrs	r1, r3
1a003c64:	fbb7 f2fe 	udiv	r2, r7, lr
1a003c68:	0c0b      	lsrs	r3, r1, #16
1a003c6a:	fb0e 7712 	mls	r7, lr, r2, r7
1a003c6e:	fa1f fc85 	uxth.w	ip, r5
1a003c72:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a003c76:	fb0c f702 	mul.w	r7, ip, r2
1a003c7a:	429f      	cmp	r7, r3
1a003c7c:	fa04 f400 	lsl.w	r4, r4, r0
1a003c80:	d907      	bls.n	1a003c92 <__divdi3+0x1a6>
1a003c82:	195b      	adds	r3, r3, r5
1a003c84:	f102 30ff 	add.w	r0, r2, #4294967295
1a003c88:	d274      	bcs.n	1a003d74 <__divdi3+0x288>
1a003c8a:	429f      	cmp	r7, r3
1a003c8c:	d972      	bls.n	1a003d74 <__divdi3+0x288>
1a003c8e:	3a02      	subs	r2, #2
1a003c90:	442b      	add	r3, r5
1a003c92:	1bdf      	subs	r7, r3, r7
1a003c94:	b289      	uxth	r1, r1
1a003c96:	fbb7 f8fe 	udiv	r8, r7, lr
1a003c9a:	fb0e 7318 	mls	r3, lr, r8, r7
1a003c9e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003ca2:	fb0c f708 	mul.w	r7, ip, r8
1a003ca6:	429f      	cmp	r7, r3
1a003ca8:	d908      	bls.n	1a003cbc <__divdi3+0x1d0>
1a003caa:	195b      	adds	r3, r3, r5
1a003cac:	f108 31ff 	add.w	r1, r8, #4294967295
1a003cb0:	d25c      	bcs.n	1a003d6c <__divdi3+0x280>
1a003cb2:	429f      	cmp	r7, r3
1a003cb4:	d95a      	bls.n	1a003d6c <__divdi3+0x280>
1a003cb6:	f1a8 0802 	sub.w	r8, r8, #2
1a003cba:	442b      	add	r3, r5
1a003cbc:	1bd8      	subs	r0, r3, r7
1a003cbe:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a003cc2:	e78e      	b.n	1a003be2 <__divdi3+0xf6>
1a003cc4:	f1c2 0320 	rsb	r3, r2, #32
1a003cc8:	fa2c f103 	lsr.w	r1, ip, r3
1a003ccc:	fa0e fe02 	lsl.w	lr, lr, r2
1a003cd0:	fa20 f703 	lsr.w	r7, r0, r3
1a003cd4:	ea41 0e0e 	orr.w	lr, r1, lr
1a003cd8:	fa08 f002 	lsl.w	r0, r8, r2
1a003cdc:	fa28 f103 	lsr.w	r1, r8, r3
1a003ce0:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003ce4:	4338      	orrs	r0, r7
1a003ce6:	fbb1 f8f5 	udiv	r8, r1, r5
1a003cea:	0c03      	lsrs	r3, r0, #16
1a003cec:	fb05 1118 	mls	r1, r5, r8, r1
1a003cf0:	fa1f f78e 	uxth.w	r7, lr
1a003cf4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003cf8:	fb07 f308 	mul.w	r3, r7, r8
1a003cfc:	428b      	cmp	r3, r1
1a003cfe:	fa0c fc02 	lsl.w	ip, ip, r2
1a003d02:	d909      	bls.n	1a003d18 <__divdi3+0x22c>
1a003d04:	eb11 010e 	adds.w	r1, r1, lr
1a003d08:	f108 39ff 	add.w	r9, r8, #4294967295
1a003d0c:	d230      	bcs.n	1a003d70 <__divdi3+0x284>
1a003d0e:	428b      	cmp	r3, r1
1a003d10:	d92e      	bls.n	1a003d70 <__divdi3+0x284>
1a003d12:	f1a8 0802 	sub.w	r8, r8, #2
1a003d16:	4471      	add	r1, lr
1a003d18:	1ac9      	subs	r1, r1, r3
1a003d1a:	b280      	uxth	r0, r0
1a003d1c:	fbb1 f3f5 	udiv	r3, r1, r5
1a003d20:	fb05 1113 	mls	r1, r5, r3, r1
1a003d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003d28:	fb07 f703 	mul.w	r7, r7, r3
1a003d2c:	428f      	cmp	r7, r1
1a003d2e:	d908      	bls.n	1a003d42 <__divdi3+0x256>
1a003d30:	eb11 010e 	adds.w	r1, r1, lr
1a003d34:	f103 30ff 	add.w	r0, r3, #4294967295
1a003d38:	d216      	bcs.n	1a003d68 <__divdi3+0x27c>
1a003d3a:	428f      	cmp	r7, r1
1a003d3c:	d914      	bls.n	1a003d68 <__divdi3+0x27c>
1a003d3e:	3b02      	subs	r3, #2
1a003d40:	4471      	add	r1, lr
1a003d42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003d46:	1bc9      	subs	r1, r1, r7
1a003d48:	fba3 890c 	umull	r8, r9, r3, ip
1a003d4c:	4549      	cmp	r1, r9
1a003d4e:	d309      	bcc.n	1a003d64 <__divdi3+0x278>
1a003d50:	d005      	beq.n	1a003d5e <__divdi3+0x272>
1a003d52:	2200      	movs	r2, #0
1a003d54:	e71d      	b.n	1a003b92 <__divdi3+0xa6>
1a003d56:	4696      	mov	lr, r2
1a003d58:	e6fe      	b.n	1a003b58 <__divdi3+0x6c>
1a003d5a:	4613      	mov	r3, r2
1a003d5c:	e711      	b.n	1a003b82 <__divdi3+0x96>
1a003d5e:	4094      	lsls	r4, r2
1a003d60:	4544      	cmp	r4, r8
1a003d62:	d2f6      	bcs.n	1a003d52 <__divdi3+0x266>
1a003d64:	3b01      	subs	r3, #1
1a003d66:	e7f4      	b.n	1a003d52 <__divdi3+0x266>
1a003d68:	4603      	mov	r3, r0
1a003d6a:	e7ea      	b.n	1a003d42 <__divdi3+0x256>
1a003d6c:	4688      	mov	r8, r1
1a003d6e:	e7a5      	b.n	1a003cbc <__divdi3+0x1d0>
1a003d70:	46c8      	mov	r8, r9
1a003d72:	e7d1      	b.n	1a003d18 <__divdi3+0x22c>
1a003d74:	4602      	mov	r2, r0
1a003d76:	e78c      	b.n	1a003c92 <__divdi3+0x1a6>
1a003d78:	4613      	mov	r3, r2
1a003d7a:	e70a      	b.n	1a003b92 <__divdi3+0xa6>
1a003d7c:	3b02      	subs	r3, #2
1a003d7e:	e757      	b.n	1a003c30 <__divdi3+0x144>
1a003d80:	f1a8 0802 	sub.w	r8, r8, #2
1a003d84:	442f      	add	r7, r5
1a003d86:	e73f      	b.n	1a003c08 <__divdi3+0x11c>

1a003d88 <__udivdi3>:
1a003d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003d8c:	2b00      	cmp	r3, #0
1a003d8e:	d144      	bne.n	1a003e1a <__udivdi3+0x92>
1a003d90:	428a      	cmp	r2, r1
1a003d92:	4615      	mov	r5, r2
1a003d94:	4604      	mov	r4, r0
1a003d96:	d94f      	bls.n	1a003e38 <__udivdi3+0xb0>
1a003d98:	fab2 f782 	clz	r7, r2
1a003d9c:	460e      	mov	r6, r1
1a003d9e:	b14f      	cbz	r7, 1a003db4 <__udivdi3+0x2c>
1a003da0:	f1c7 0320 	rsb	r3, r7, #32
1a003da4:	40b9      	lsls	r1, r7
1a003da6:	fa20 f603 	lsr.w	r6, r0, r3
1a003daa:	fa02 f507 	lsl.w	r5, r2, r7
1a003dae:	430e      	orrs	r6, r1
1a003db0:	fa00 f407 	lsl.w	r4, r0, r7
1a003db4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003db8:	0c23      	lsrs	r3, r4, #16
1a003dba:	fbb6 f0fe 	udiv	r0, r6, lr
1a003dbe:	b2af      	uxth	r7, r5
1a003dc0:	fb0e 6110 	mls	r1, lr, r0, r6
1a003dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003dc8:	fb07 f100 	mul.w	r1, r7, r0
1a003dcc:	4299      	cmp	r1, r3
1a003dce:	d909      	bls.n	1a003de4 <__udivdi3+0x5c>
1a003dd0:	195b      	adds	r3, r3, r5
1a003dd2:	f100 32ff 	add.w	r2, r0, #4294967295
1a003dd6:	f080 80ec 	bcs.w	1a003fb2 <__udivdi3+0x22a>
1a003dda:	4299      	cmp	r1, r3
1a003ddc:	f240 80e9 	bls.w	1a003fb2 <__udivdi3+0x22a>
1a003de0:	3802      	subs	r0, #2
1a003de2:	442b      	add	r3, r5
1a003de4:	1a5a      	subs	r2, r3, r1
1a003de6:	b2a4      	uxth	r4, r4
1a003de8:	fbb2 f3fe 	udiv	r3, r2, lr
1a003dec:	fb0e 2213 	mls	r2, lr, r3, r2
1a003df0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003df4:	fb07 f703 	mul.w	r7, r7, r3
1a003df8:	4297      	cmp	r7, r2
1a003dfa:	d908      	bls.n	1a003e0e <__udivdi3+0x86>
1a003dfc:	1952      	adds	r2, r2, r5
1a003dfe:	f103 31ff 	add.w	r1, r3, #4294967295
1a003e02:	f080 80d8 	bcs.w	1a003fb6 <__udivdi3+0x22e>
1a003e06:	4297      	cmp	r7, r2
1a003e08:	f240 80d5 	bls.w	1a003fb6 <__udivdi3+0x22e>
1a003e0c:	3b02      	subs	r3, #2
1a003e0e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003e12:	2600      	movs	r6, #0
1a003e14:	4631      	mov	r1, r6
1a003e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e1a:	428b      	cmp	r3, r1
1a003e1c:	d847      	bhi.n	1a003eae <__udivdi3+0x126>
1a003e1e:	fab3 f683 	clz	r6, r3
1a003e22:	2e00      	cmp	r6, #0
1a003e24:	d148      	bne.n	1a003eb8 <__udivdi3+0x130>
1a003e26:	428b      	cmp	r3, r1
1a003e28:	d302      	bcc.n	1a003e30 <__udivdi3+0xa8>
1a003e2a:	4282      	cmp	r2, r0
1a003e2c:	f200 80cd 	bhi.w	1a003fca <__udivdi3+0x242>
1a003e30:	2001      	movs	r0, #1
1a003e32:	4631      	mov	r1, r6
1a003e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e38:	b912      	cbnz	r2, 1a003e40 <__udivdi3+0xb8>
1a003e3a:	2501      	movs	r5, #1
1a003e3c:	fbb5 f5f2 	udiv	r5, r5, r2
1a003e40:	fab5 f885 	clz	r8, r5
1a003e44:	f1b8 0f00 	cmp.w	r8, #0
1a003e48:	d177      	bne.n	1a003f3a <__udivdi3+0x1b2>
1a003e4a:	1b4a      	subs	r2, r1, r5
1a003e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003e50:	b2af      	uxth	r7, r5
1a003e52:	2601      	movs	r6, #1
1a003e54:	fbb2 f0fe 	udiv	r0, r2, lr
1a003e58:	0c23      	lsrs	r3, r4, #16
1a003e5a:	fb0e 2110 	mls	r1, lr, r0, r2
1a003e5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003e62:	fb07 f300 	mul.w	r3, r7, r0
1a003e66:	428b      	cmp	r3, r1
1a003e68:	d907      	bls.n	1a003e7a <__udivdi3+0xf2>
1a003e6a:	1949      	adds	r1, r1, r5
1a003e6c:	f100 32ff 	add.w	r2, r0, #4294967295
1a003e70:	d202      	bcs.n	1a003e78 <__udivdi3+0xf0>
1a003e72:	428b      	cmp	r3, r1
1a003e74:	f200 80ba 	bhi.w	1a003fec <__udivdi3+0x264>
1a003e78:	4610      	mov	r0, r2
1a003e7a:	1ac9      	subs	r1, r1, r3
1a003e7c:	b2a4      	uxth	r4, r4
1a003e7e:	fbb1 f3fe 	udiv	r3, r1, lr
1a003e82:	fb0e 1113 	mls	r1, lr, r3, r1
1a003e86:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a003e8a:	fb07 f703 	mul.w	r7, r7, r3
1a003e8e:	42a7      	cmp	r7, r4
1a003e90:	d908      	bls.n	1a003ea4 <__udivdi3+0x11c>
1a003e92:	1964      	adds	r4, r4, r5
1a003e94:	f103 32ff 	add.w	r2, r3, #4294967295
1a003e98:	f080 808f 	bcs.w	1a003fba <__udivdi3+0x232>
1a003e9c:	42a7      	cmp	r7, r4
1a003e9e:	f240 808c 	bls.w	1a003fba <__udivdi3+0x232>
1a003ea2:	3b02      	subs	r3, #2
1a003ea4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003ea8:	4631      	mov	r1, r6
1a003eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003eae:	2600      	movs	r6, #0
1a003eb0:	4630      	mov	r0, r6
1a003eb2:	4631      	mov	r1, r6
1a003eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003eb8:	f1c6 0420 	rsb	r4, r6, #32
1a003ebc:	fa22 f504 	lsr.w	r5, r2, r4
1a003ec0:	40b3      	lsls	r3, r6
1a003ec2:	432b      	orrs	r3, r5
1a003ec4:	fa20 fc04 	lsr.w	ip, r0, r4
1a003ec8:	fa01 f706 	lsl.w	r7, r1, r6
1a003ecc:	fa21 f504 	lsr.w	r5, r1, r4
1a003ed0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003ed4:	ea4c 0707 	orr.w	r7, ip, r7
1a003ed8:	fbb5 f8fe 	udiv	r8, r5, lr
1a003edc:	0c39      	lsrs	r1, r7, #16
1a003ede:	fb0e 5518 	mls	r5, lr, r8, r5
1a003ee2:	fa1f fc83 	uxth.w	ip, r3
1a003ee6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a003eea:	fb0c f108 	mul.w	r1, ip, r8
1a003eee:	42a9      	cmp	r1, r5
1a003ef0:	fa02 f206 	lsl.w	r2, r2, r6
1a003ef4:	d904      	bls.n	1a003f00 <__udivdi3+0x178>
1a003ef6:	18ed      	adds	r5, r5, r3
1a003ef8:	f108 34ff 	add.w	r4, r8, #4294967295
1a003efc:	d367      	bcc.n	1a003fce <__udivdi3+0x246>
1a003efe:	46a0      	mov	r8, r4
1a003f00:	1a6d      	subs	r5, r5, r1
1a003f02:	b2bf      	uxth	r7, r7
1a003f04:	fbb5 f4fe 	udiv	r4, r5, lr
1a003f08:	fb0e 5514 	mls	r5, lr, r4, r5
1a003f0c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003f10:	fb0c fc04 	mul.w	ip, ip, r4
1a003f14:	458c      	cmp	ip, r1
1a003f16:	d904      	bls.n	1a003f22 <__udivdi3+0x19a>
1a003f18:	18c9      	adds	r1, r1, r3
1a003f1a:	f104 35ff 	add.w	r5, r4, #4294967295
1a003f1e:	d35c      	bcc.n	1a003fda <__udivdi3+0x252>
1a003f20:	462c      	mov	r4, r5
1a003f22:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003f26:	ebcc 0101 	rsb	r1, ip, r1
1a003f2a:	fba4 2302 	umull	r2, r3, r4, r2
1a003f2e:	4299      	cmp	r1, r3
1a003f30:	d348      	bcc.n	1a003fc4 <__udivdi3+0x23c>
1a003f32:	d044      	beq.n	1a003fbe <__udivdi3+0x236>
1a003f34:	4620      	mov	r0, r4
1a003f36:	2600      	movs	r6, #0
1a003f38:	e76c      	b.n	1a003e14 <__udivdi3+0x8c>
1a003f3a:	f1c8 0420 	rsb	r4, r8, #32
1a003f3e:	fa01 f308 	lsl.w	r3, r1, r8
1a003f42:	fa05 f508 	lsl.w	r5, r5, r8
1a003f46:	fa20 f704 	lsr.w	r7, r0, r4
1a003f4a:	40e1      	lsrs	r1, r4
1a003f4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003f50:	431f      	orrs	r7, r3
1a003f52:	fbb1 f6fe 	udiv	r6, r1, lr
1a003f56:	0c3a      	lsrs	r2, r7, #16
1a003f58:	fb0e 1116 	mls	r1, lr, r6, r1
1a003f5c:	fa1f fc85 	uxth.w	ip, r5
1a003f60:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003f64:	fb0c f206 	mul.w	r2, ip, r6
1a003f68:	429a      	cmp	r2, r3
1a003f6a:	fa00 f408 	lsl.w	r4, r0, r8
1a003f6e:	d907      	bls.n	1a003f80 <__udivdi3+0x1f8>
1a003f70:	195b      	adds	r3, r3, r5
1a003f72:	f106 31ff 	add.w	r1, r6, #4294967295
1a003f76:	d237      	bcs.n	1a003fe8 <__udivdi3+0x260>
1a003f78:	429a      	cmp	r2, r3
1a003f7a:	d935      	bls.n	1a003fe8 <__udivdi3+0x260>
1a003f7c:	3e02      	subs	r6, #2
1a003f7e:	442b      	add	r3, r5
1a003f80:	1a9b      	subs	r3, r3, r2
1a003f82:	b2bf      	uxth	r7, r7
1a003f84:	fbb3 f0fe 	udiv	r0, r3, lr
1a003f88:	fb0e 3310 	mls	r3, lr, r0, r3
1a003f8c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a003f90:	fb0c f100 	mul.w	r1, ip, r0
1a003f94:	4299      	cmp	r1, r3
1a003f96:	d907      	bls.n	1a003fa8 <__udivdi3+0x220>
1a003f98:	195b      	adds	r3, r3, r5
1a003f9a:	f100 32ff 	add.w	r2, r0, #4294967295
1a003f9e:	d221      	bcs.n	1a003fe4 <__udivdi3+0x25c>
1a003fa0:	4299      	cmp	r1, r3
1a003fa2:	d91f      	bls.n	1a003fe4 <__udivdi3+0x25c>
1a003fa4:	3802      	subs	r0, #2
1a003fa6:	442b      	add	r3, r5
1a003fa8:	1a5a      	subs	r2, r3, r1
1a003faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a003fae:	4667      	mov	r7, ip
1a003fb0:	e750      	b.n	1a003e54 <__udivdi3+0xcc>
1a003fb2:	4610      	mov	r0, r2
1a003fb4:	e716      	b.n	1a003de4 <__udivdi3+0x5c>
1a003fb6:	460b      	mov	r3, r1
1a003fb8:	e729      	b.n	1a003e0e <__udivdi3+0x86>
1a003fba:	4613      	mov	r3, r2
1a003fbc:	e772      	b.n	1a003ea4 <__udivdi3+0x11c>
1a003fbe:	40b0      	lsls	r0, r6
1a003fc0:	4290      	cmp	r0, r2
1a003fc2:	d2b7      	bcs.n	1a003f34 <__udivdi3+0x1ac>
1a003fc4:	1e60      	subs	r0, r4, #1
1a003fc6:	2600      	movs	r6, #0
1a003fc8:	e724      	b.n	1a003e14 <__udivdi3+0x8c>
1a003fca:	4630      	mov	r0, r6
1a003fcc:	e722      	b.n	1a003e14 <__udivdi3+0x8c>
1a003fce:	42a9      	cmp	r1, r5
1a003fd0:	d995      	bls.n	1a003efe <__udivdi3+0x176>
1a003fd2:	f1a8 0802 	sub.w	r8, r8, #2
1a003fd6:	441d      	add	r5, r3
1a003fd8:	e792      	b.n	1a003f00 <__udivdi3+0x178>
1a003fda:	458c      	cmp	ip, r1
1a003fdc:	d9a0      	bls.n	1a003f20 <__udivdi3+0x198>
1a003fde:	3c02      	subs	r4, #2
1a003fe0:	4419      	add	r1, r3
1a003fe2:	e79e      	b.n	1a003f22 <__udivdi3+0x19a>
1a003fe4:	4610      	mov	r0, r2
1a003fe6:	e7df      	b.n	1a003fa8 <__udivdi3+0x220>
1a003fe8:	460e      	mov	r6, r1
1a003fea:	e7c9      	b.n	1a003f80 <__udivdi3+0x1f8>
1a003fec:	3802      	subs	r0, #2
1a003fee:	4429      	add	r1, r5
1a003ff0:	e743      	b.n	1a003e7a <__udivdi3+0xf2>
1a003ff2:	bf00      	nop

1a003ff4 <__libc_init_array>:
1a003ff4:	b570      	push	{r4, r5, r6, lr}
1a003ff6:	4b0e      	ldr	r3, [pc, #56]	; (1a004030 <__libc_init_array+0x3c>)
1a003ff8:	4c0e      	ldr	r4, [pc, #56]	; (1a004034 <__libc_init_array+0x40>)
1a003ffa:	1ae4      	subs	r4, r4, r3
1a003ffc:	10a4      	asrs	r4, r4, #2
1a003ffe:	2500      	movs	r5, #0
1a004000:	461e      	mov	r6, r3
1a004002:	42a5      	cmp	r5, r4
1a004004:	d004      	beq.n	1a004010 <__libc_init_array+0x1c>
1a004006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00400a:	4798      	blx	r3
1a00400c:	3501      	adds	r5, #1
1a00400e:	e7f8      	b.n	1a004002 <__libc_init_array+0xe>
1a004010:	f7ff fd04 	bl	1a003a1c <_init>
1a004014:	4c08      	ldr	r4, [pc, #32]	; (1a004038 <__libc_init_array+0x44>)
1a004016:	4b09      	ldr	r3, [pc, #36]	; (1a00403c <__libc_init_array+0x48>)
1a004018:	1ae4      	subs	r4, r4, r3
1a00401a:	10a4      	asrs	r4, r4, #2
1a00401c:	2500      	movs	r5, #0
1a00401e:	461e      	mov	r6, r3
1a004020:	42a5      	cmp	r5, r4
1a004022:	d004      	beq.n	1a00402e <__libc_init_array+0x3a>
1a004024:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a004028:	4798      	blx	r3
1a00402a:	3501      	adds	r5, #1
1a00402c:	e7f8      	b.n	1a004020 <__libc_init_array+0x2c>
1a00402e:	bd70      	pop	{r4, r5, r6, pc}
1a004030:	1a004444 	.word	0x1a004444
1a004034:	1a004444 	.word	0x1a004444
1a004038:	1a004444 	.word	0x1a004444
1a00403c:	1a004444 	.word	0x1a004444

1a004040 <memset>:
1a004040:	4402      	add	r2, r0
1a004042:	4603      	mov	r3, r0
1a004044:	4293      	cmp	r3, r2
1a004046:	d002      	beq.n	1a00404e <memset+0xe>
1a004048:	f803 1b01 	strb.w	r1, [r3], #1
1a00404c:	e7fa      	b.n	1a004044 <memset+0x4>
1a00404e:	4770      	bx	lr

1a004050 <strlen>:
1a004050:	4603      	mov	r3, r0
1a004052:	f813 2b01 	ldrb.w	r2, [r3], #1
1a004056:	2a00      	cmp	r2, #0
1a004058:	d1fb      	bne.n	1a004052 <strlen+0x2>
1a00405a:	1a18      	subs	r0, r3, r0
1a00405c:	3801      	subs	r0, #1
1a00405e:	4770      	bx	lr

1a004060 <strncat>:
1a004060:	b530      	push	{r4, r5, lr}
1a004062:	4604      	mov	r4, r0
1a004064:	4623      	mov	r3, r4
1a004066:	3401      	adds	r4, #1
1a004068:	781d      	ldrb	r5, [r3, #0]
1a00406a:	2d00      	cmp	r5, #0
1a00406c:	d1fa      	bne.n	1a004064 <strncat+0x4>
1a00406e:	f112 32ff 	adds.w	r2, r2, #4294967295
1a004072:	d308      	bcc.n	1a004086 <strncat+0x26>
1a004074:	f811 4b01 	ldrb.w	r4, [r1], #1
1a004078:	f803 4b01 	strb.w	r4, [r3], #1
1a00407c:	b11c      	cbz	r4, 1a004086 <strncat+0x26>
1a00407e:	2a00      	cmp	r2, #0
1a004080:	d1f5      	bne.n	1a00406e <strncat+0xe>
1a004082:	701a      	strb	r2, [r3, #0]
1a004084:	e7f3      	b.n	1a00406e <strncat+0xe>
1a004086:	bd30      	pop	{r4, r5, pc}
1a004088:	0000002f 	.word	0x0000002f
1a00408c:	00000030 	.word	0x00000030
1a004090:	0000005f 	.word	0x0000005f
1a004094:	0000003a 	.word	0x0000003a
1a004098:	0000003b 	.word	0x0000003b
1a00409c:	7365756d 	.word	0x7365756d
1a0040a0:	73617274 	.word	0x73617274
1a0040a4:	7478742e 	.word	0x7478742e
1a0040a8:	00000000 	.word	0x00000000
1a0040ac:	00000a0d 	.word	0x00000a0d
1a0040b0:	2c2b2a22 	.word	0x2c2b2a22
1a0040b4:	3d3c3b3a 	.word	0x3d3c3b3a
1a0040b8:	5d5b3f3e 	.word	0x5d5b3f3e
1a0040bc:	00007f7c 	.word	0x00007f7c

1a0040c0 <ultrasonicSensorsIrqMap>:
1a0040c0:	00020100 7778797a 73747576 6f707172     ....zyxwvutsrqpo
1a0040d0:	6b6c6d6e 6768696a 63646566 38396162     nmlkjihgfedcba98
1a0040e0:	34353637 30313233 34333231 38373635     7654321012345678
1a0040f0:	63626139 67666564 6b6a6968 6f6e6d6c     9abcdefghijklmno
1a004100:	73727170 77767574 007a7978 33323130     pqrstuvwxyz.0123
1a004110:	37363534 42413938 46454443 00000000     456789ABCDEF....

1a004120 <gpioPinsInit>:
1a004120:	02000104 00050701 05010d03 04080100     ................
1a004130:	02020002 02000304 00000403 04070002     ................
1a004140:	030c0300 09050402 05040103 04030208     ................
1a004150:	04020305 06040504 0802000c 03000b06     ................
1a004160:	00090607 07060503 060f0504 03030004     ................
1a004170:	02000404 00050404 06040502 04060200     ................
1a004180:	0c050408 05040a04 0003010e 14010a00     ................
1a004190:	010f0000 0d000012 00001101 0010010c     ................
1a0041a0:	07070300 000f0300 01000001 00000000     ................
1a0041b0:	000a0600 08060603 06100504 04030005     ................
1a0041c0:	03000106 04090400 04010d05 010b0000     ................
1a0041d0:	0200000f 00000001 00010104 02010800     ................
1a0041e0:	01090000 09010006 05040002 04010200     ................
1a0041f0:	02020105 02020504 0e00000a 01000b02     ................
1a004200:	000c020b 00040c01 04000200 01020001     ................
1a004210:	02000204 00030402 03070302 070b0300     ................
1a004220:	0c030004 03000507 0006070d 01020e03     ................
1a004230:	04010504 06020006 02000504 00040405     ................
1a004240:	08040402 040c0504 0d050409 05040a04     ................
1a004250:	0005010e 00000801                       ........

1a004258 <lpcUarts>:
1a004258:	40081000 06020406 00180205 40081000     ...@...........@
1a004268:	09070509 00180706 40082000 00000000     ......... .@....
1a004278:	00190000 400c1000 07060107 001a0602     .......@........
1a004288:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a004298:	02020302 001b0204                       ........

1a0042a0 <GpioPorts>:
1a0042a0:	03030003 0f050403 05031005 07030603     ................
1a0042b0:	00000802                                ....

1a0042b4 <OscRateIn>:
1a0042b4:	00b71b00                                ....

1a0042b8 <ExtRateIn>:
1a0042b8:	00000000                                ....

1a0042bc <GpioButtons>:
1a0042bc:	08000400 09010900                       ........

1a0042c4 <GpioLeds>:
1a0042c4:	01050005 0e000205 0c010b01              ............

1a0042d0 <InitClkStates>:
1a0042d0:	00010308 00010307 01010f01              ............

1a0042dc <pinmuxing>:
1a0042dc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0042ec:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0042fc:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00430c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00431c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00432c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00433c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00434c:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a00435c:	00b31201 00f01301 00b31401 00b60707     ................
1a00436c:	00f20000 00b60100                       ........

1a004374 <UART_BClock>:
1a004374:	01a201c2 01620182                       ......b.

1a00437c <UART_PClock>:
1a00437c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00438c:	000000ff                                ....

1a004390 <periph_to_base>:
1a004390:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0043a0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0043b0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0043c0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0043d0:	01820013 00120182 01a201a2 01c20011     ................
1a0043e0:	001001c2 01e201e2 0202000f 000e0202     ................
1a0043f0:	02220222 0223000d 001c0223              "."...#.#...

1a0043fc <InitClkStates>:
1a0043fc:	00010100 00010909 0001090a 01010701     ................
1a00440c:	00010902 00010906 0101090c 0001090d     ................
1a00441c:	0001090e 0001090f 00010910 00010911     ................
1a00442c:	00010912 00010913 00011114 00011119     ................
1a00443c:	0001111a 0001111b                       ........
